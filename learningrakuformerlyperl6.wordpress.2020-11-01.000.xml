<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress/5.3" created="2020-11-01 02:19" -->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Learning Raku (formerly Perl 6)</title>
<link>http://www.learningraku.com</link>
<description/>
<pubDate>Sun, 01 Nov 2020 02:19:57 +0000</pubDate>
<language>en-US</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://www.learningraku.com</wp:base_site_url>
<wp:base_blog_url>http://www.learningraku.com</wp:base_blog_url>
<wp:author>
  <wp:author_id>1</wp:author_id>
  <wp:author_login>brian</wp:author_login>
  <wp:author_email>brian.d.foy@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[brian d foy]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>2</wp:term_id>
  <wp:category_nicename>administrative-notes</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Administrative notes]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>60</wp:term_id>
  <wp:category_nicename>asynchronous</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Asynchronous]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>74</wp:term_id>
  <wp:category_nicename>avoid-this-feature</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Avoid This Feature]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>46</wp:term_id>
  <wp:category_nicename>bugs-issues</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Bugs &amp; Issues]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>54</wp:term_id>
  <wp:category_nicename>coding-tools</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Coding Tools]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>18</wp:term_id>
  <wp:category_nicename>command-line-program</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Command Line Program]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>24</wp:term_id>
  <wp:category_nicename>cross-operators</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Cross Operators]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5</wp:term_id>
  <wp:category_nicename>editing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Editing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>11</wp:term_id>
  <wp:category_nicename>examples</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Examples]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>42</wp:term_id>
  <wp:category_nicename>faq</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[FAQ]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>44</wp:term_id>
  <wp:category_nicename>files-directories</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Files &amp; Directories]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>55</wp:term_id>
  <wp:category_nicename>grammars</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Grammars]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>6</wp:term_id>
  <wp:category_nicename>history</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[History]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>10</wp:term_id>
  <wp:category_nicename>horrors</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Horrors]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>15</wp:term_id>
  <wp:category_nicename>hyperoperators</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Hyperoperators]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>34</wp:term_id>
  <wp:category_nicename>junctions</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Junctions]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>12</wp:term_id>
  <wp:category_nicename>kickstarter-tips</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Kickstarter Tips]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>56</wp:term_id>
  <wp:category_nicename>lists</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Lists]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>31</wp:term_id>
  <wp:category_nicename>modules</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Modules]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>30</wp:term_id>
  <wp:category_nicename>numbers</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Numbers]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>70</wp:term_id>
  <wp:category_nicename>operators</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Operators]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>50</wp:term_id>
  <wp:category_nicename>other-projects</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Other Projects]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>22</wp:term_id>
  <wp:category_nicename>output</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Output]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>26</wp:term_id>
  <wp:category_nicename>performance</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Performance]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>39</wp:term_id>
  <wp:category_nicename>phasers</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Phasers]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>51</wp:term_id>
  <wp:category_nicename>presentations</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Presentations]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>61</wp:term_id>
  <wp:category_nicename>quick-tricks</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Quick Tricks]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>25</wp:term_id>
  <wp:category_nicename>rakudo</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Rakudo]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>14</wp:term_id>
  <wp:category_nicename>ranges</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Ranges]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>13</wp:term_id>
  <wp:category_nicename>sequences</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Sequences]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>17</wp:term_id>
  <wp:category_nicename>sets</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Sets]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>45</wp:term_id>
  <wp:category_nicename>social-media</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Social Media]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>35</wp:term_id>
  <wp:category_nicename>sorting</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Sorting]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>40</wp:term_id>
  <wp:category_nicename>strings</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Strings]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>4</wp:term_id>
  <wp:category_nicename>stuff-im-playing-with</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Stuff I'm playing with]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>3</wp:term_id>
  <wp:category_nicename>subroutines</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Subroutines]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>37</wp:term_id>
  <wp:category_nicename>testing</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Testing]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>16</wp:term_id>
  <wp:category_nicename>types</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Types]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>20</wp:term_id>
  <wp:category_nicename>unicode</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Unicode]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>71</wp:term_id>
  <wp:category_nicename>whatever</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Whatever]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>49</wp:term_id>
  <wp:category_nicename>writing-process</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Writing Process]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>67</wp:term_id>
  <wp:category_nicename>zip-operators</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Zip operators]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>75</wp:term_id>
  <wp:category_nicename>signatures</wp:category_nicename>
  <wp:category_parent>subroutines</wp:category_parent>
  <wp:cat_name><![CDATA[Signatures]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>65</wp:term_id>
  <wp:tag_slug>appveyor</wp:tag_slug>
  <wp:tag_name><![CDATA[appveyor]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>64</wp:term_id>
  <wp:tag_slug>chocolatey</wp:tag_slug>
  <wp:tag_name><![CDATA[chocolatey]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>41</wp:term_id>
  <wp:tag_slug>comb</wp:tag_slug>
  <wp:tag_name><![CDATA[comb]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>77</wp:term_id>
  <wp:tag_slug>commerce</wp:tag_slug>
  <wp:tag_name><![CDATA[commerce]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>73</wp:term_id>
  <wp:tag_slug>continuous-integration</wp:tag_slug>
  <wp:tag_name><![CDATA[continuous integration]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28</wp:term_id>
  <wp:tag_slug>fibonacci</wp:tag_slug>
  <wp:tag_name><![CDATA[fibonacci]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19</wp:term_id>
  <wp:tag_slug>gist</wp:tag_slug>
  <wp:tag_name><![CDATA[gist]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>76</wp:term_id>
  <wp:tag_slug>google-books</wp:tag_slug>
  <wp:tag_name><![CDATA[google books]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>59</wp:term_id>
  <wp:tag_slug>identity</wp:tag_slug>
  <wp:tag_name><![CDATA[identity]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>63</wp:term_id>
  <wp:tag_slug>infix</wp:tag_slug>
  <wp:tag_name><![CDATA[infix]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>68</wp:term_id>
  <wp:tag_slug>itunes</wp:tag_slug>
  <wp:tag_name><![CDATA[iTunes]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>69</wp:term_id>
  <wp:tag_slug>meta6-json</wp:tag_slug>
  <wp:tag_name><![CDATA[META6.json]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29</wp:term_id>
  <wp:tag_slug>multi</wp:tag_slug>
  <wp:tag_name><![CDATA[multi]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>53</wp:term_id>
  <wp:tag_slug>new-york</wp:tag_slug>
  <wp:tag_name><![CDATA[New York]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7</wp:term_id>
  <wp:tag_slug>nqp</wp:tag_slug>
  <wp:tag_name><![CDATA[nqp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>52</wp:term_id>
  <wp:tag_slug>ny-pm</wp:tag_slug>
  <wp:tag_name><![CDATA[NY.pm]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>33</wp:term_id>
  <wp:tag_slug>panda</wp:tag_slug>
  <wp:tag_name><![CDATA[panda]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>43</wp:term_id>
  <wp:tag_slug>perlfaq</wp:tag_slug>
  <wp:tag_name><![CDATA[perlfaq]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>57</wp:term_id>
  <wp:tag_slug>permutations</wp:tag_slug>
  <wp:tag_name><![CDATA[permutations]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>23</wp:term_id>
  <wp:tag_slug>phasers</wp:tag_slug>
  <wp:tag_name><![CDATA[phasers]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27</wp:term_id>
  <wp:tag_slug>profiling</wp:tag_slug>
  <wp:tag_name><![CDATA[profiling]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>38</wp:term_id>
  <wp:tag_slug>prove</wp:tag_slug>
  <wp:tag_name><![CDATA[prove]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21</wp:term_id>
  <wp:tag_slug>rakudo</wp:tag_slug>
  <wp:tag_name><![CDATA[rakudo]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>62</wp:term_id>
  <wp:tag_slug>reduction-operator</wp:tag_slug>
  <wp:tag_name><![CDATA[reduction operator]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>48</wp:term_id>
  <wp:tag_slug>rt</wp:tag_slug>
  <wp:tag_name><![CDATA[rt]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8</wp:term_id>
  <wp:tag_slug>sapphire</wp:tag_slug>
  <wp:tag_name><![CDATA[sapphire]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36</wp:term_id>
  <wp:tag_slug>schwartzian-transform</wp:tag_slug>
  <wp:tag_name><![CDATA[schwartzian transform]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>66</wp:term_id>
  <wp:tag_slug>sinan</wp:tag_slug>
  <wp:tag_name><![CDATA[sinan]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>47</wp:term_id>
  <wp:tag_slug>stackoverflow</wp:tag_slug>
  <wp:tag_name><![CDATA[stackoverflow]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9</wp:term_id>
  <wp:tag_slug>topaz</wp:tag_slug>
  <wp:tag_name><![CDATA[topaz]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>78</wp:term_id>
  <wp:tag_slug>translation</wp:tag_slug>
  <wp:tag_name><![CDATA[translation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72</wp:term_id>
  <wp:tag_slug>travis</wp:tag_slug>
  <wp:tag_name><![CDATA[travis]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>58</wp:term_id>
  <wp:tag_slug>unique</wp:tag_slug>
  <wp:tag_name><![CDATA[unique]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32</wp:term_id>
  <wp:tag_slug>zef</wp:tag_slug>
  <wp:tag_name><![CDATA[zef]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>2</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>administrative-notes</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Administrative notes]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>65</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>appveyor</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[appveyor]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>60</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>asynchronous</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Asynchronous]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>74</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>avoid-this-feature</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Avoid This Feature]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>46</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>bugs-issues</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Bugs &amp; Issues]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>64</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>chocolatey</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[chocolatey]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>54</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>coding-tools</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Coding Tools]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>41</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>comb</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[comb]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>18</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>command-line-program</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Command Line Program]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>77</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>commerce</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[commerce]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>73</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>continuous-integration</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[continuous integration]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>24</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>cross-operators</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Cross Operators]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>5</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>editing</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Editing]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>11</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>examples</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Examples]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>42</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>faq</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[FAQ]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>28</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>fibonacci</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[fibonacci]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>44</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>files-directories</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Files &amp; Directories]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>19</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>gist</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[gist]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>76</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>google-books</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[google books]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>55</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>grammars</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Grammars]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>6</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>history</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[History]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>10</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>horrors</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Horrors]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>15</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>hyperoperators</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Hyperoperators]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>59</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>identity</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[identity]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>63</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>infix</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[infix]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>68</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>itunes</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[iTunes]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>34</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>junctions</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Junctions]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>12</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>kickstarter-tips</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Kickstarter Tips]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>56</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>lists</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Lists]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>69</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>meta6-json</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[META6.json]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>31</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>modules</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Modules]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>29</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>multi</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[multi]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>53</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>new-york</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[New York]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>7</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>nqp</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[nqp]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>30</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>numbers</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Numbers]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>52</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>ny-pm</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[NY.pm]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>70</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>operators</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Operators]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>50</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>other-projects</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Other Projects]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>22</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>output</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Output]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>33</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>panda</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[panda]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>26</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>performance</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Performance]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>43</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>perlfaq</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[perlfaq]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>57</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>permutations</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[permutations]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>23</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>phasers</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[phasers]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>39</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>phasers</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Phasers]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>51</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>presentations</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Presentations]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>27</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>profiling</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[profiling]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>38</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>prove</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[prove]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>61</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>quick-tricks</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Quick Tricks]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>21</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>rakudo</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[rakudo]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>25</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>rakudo</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Rakudo]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>14</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>ranges</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Ranges]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>62</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>reduction-operator</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[reduction operator]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>48</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>rt</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[rt]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>8</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>sapphire</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[sapphire]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>36</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>schwartzian-transform</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[schwartzian transform]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>13</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>sequences</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Sequences]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>17</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>sets</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Sets]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>66</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>sinan</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[sinan]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>45</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>social-media</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Social Media]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>35</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>sorting</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Sorting]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>47</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>stackoverflow</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[stackoverflow]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>40</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>strings</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Strings]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>4</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>stuff-im-playing-with</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Stuff I'm playing with]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>3</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>subroutines</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Subroutines]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>37</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>testing</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Testing]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>9</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>topaz</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[topaz]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>78</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>translation</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[translation]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>72</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>travis</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[travis]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>16</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>types</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Types]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>1</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>uncategorized</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Uncategorized]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>20</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>unicode</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Unicode]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>58</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>unique</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[unique]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>71</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>whatever</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Whatever]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>49</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>writing-process</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Writing Process]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>32</wp:term_id>
  <wp:term_taxonomy>post_tag</wp:term_taxonomy>
  <wp:term_slug>zef</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[zef]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>67</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>zip-operators</wp:term_slug>
  <wp:term_parent/>
  <wp:term_name><![CDATA[Zip operators]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>75</wp:term_id>
  <wp:term_taxonomy>category</wp:term_taxonomy>
  <wp:term_slug>signatures</wp:term_slug>
  <wp:term_parent>subroutines</wp:term_parent>
  <wp:term_name><![CDATA[Signatures]]></wp:term_name>
</wp:term>
<generator>https://wordpress.org/?v=5.3</generator>
<item>
  <title>About</title>
  <link>http://www.learningraku.com/about/</link>
  <pubDate>Tue, 15 Dec 2015 11:40:25 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=5</guid>
  <description/>
  <content:encoded><![CDATA[brian d foy is working on a Perl 6 book aimed at an introductory audience. This site is about that book and a testbed for some of the writing. Some of the posts are merely experimental. Comment on what you like and what you don't like.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2015-12-15 11:40:25</wp:post_date>
  <wp:post_date_gmt>2015-12-15 11:40:25</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Site</title>
  <link>http://www.learningraku.com/site/</link>
  <pubDate>Tue, 15 Dec 2015 11:40:43 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=7</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2015-12-15 11:40:43</wp:post_date>
  <wp:post_date_gmt>2015-12-15 11:40:43</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>site</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Participate</title>
  <link>http://www.learningraku.com/participate/</link>
  <pubDate>Tue, 15 Dec 2015 11:42:57 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=12</guid>
  <description/>
  <content:encoded><![CDATA[As we write the book, there are many things the community can do to help or spread the word.

<ul>
<li>Read our stuff and tell us where we confused you (or got it wrong).
<li>Tell us what you are doing and how you are using Perl 6.
<li>When we get to the point of an alpha book, review it.
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2015-12-15 11:42:57</wp:post_date>
  <wp:post_date_gmt>2015-12-15 11:42:57</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>participate</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Events</title>
  <link>http://www.learningraku.com/events/</link>
  <pubDate>Tue, 15 Dec 2015 11:43:42 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=15</guid>
  <description/>
  <content:encoded><![CDATA[We don't have anything planned yet, but our plan is to run workshops and trainings to try out our material. The best way to get it right on paper is to get it right in person.

If you're an event organizer and you'd like to run a Perl 6 workshop or class, get in touch. We're happy to go anywhere that will at least cover our expenses. We can help you raise the funds for that.

If you'd like to have private, on-site training (perhaps as an add-on to regular Perl 5 training), get in touch with us through <a href="http://www.theperlreview.com">The Perl Review</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2015-12-15 11:43:42</wp:post_date>
  <wp:post_date_gmt>2015-12-15 11:43:42</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>events</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Book</title>
  <link>http://www.learningraku.com/book/</link>
  <pubDate>Tue, 15 Dec 2015 11:44:23 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=17</guid>
  <description/>
  <content:encoded><![CDATA[<i>Learning Perl 6</i> is a <A href="http://shop.oreilly.com/product/0636920062776.do">tutorial book from O'Reilly Media</a> published in August 2018.

I initially funded this book through a <a href="https://www.kickstarter.com/projects/1422827986/learning-perl-6?ref=user_menu">Kickstarter campaign</a>. The updates and discussion on the Kickstarter site explain quite a bit about the book.

<div align="center">
<a data-flickr-embed="true"  href="https://www.flickr.com/photos/paleo_bear/12146626495/in/photolist-jvmCSK-cNRFKq-5UQHU2-GBCvB9-nVH77Z-nVFNWG-9tnkn5-pNz6Nx-6qUFyu-5ujaGE-pwaSyy-dJ5UFY-daFkBy-5w2nrV-aRRra-aE1kTv-pwaVe3-eXUeP9-dKYDj2-pw8aQb-aTapNk-acWnQm-8UeAVC-oRHybA-gHKkKf-5w6FoQ-65Nr98-cMqMzA-f9BLj3-q4yqLo-pNz6mv-e7fjif-eXUfbj-wCzJy4-wSKEXQ-wCsADE-wV5eRM-wV5ccZ-wCzH8D-5UQNBe-aDZhYD-dKdheo-65Ntq8-65Nq7p-cSBzhu-d6m2cU-4mGY7x-2MBj6y-mxQf5g-8qhaaE" title="Hamadryas"><img src="https://c8.staticflickr.com/4/3713/12146626495_7a49ca9843.jpg" width="500" height="375" alt="Hamadryas"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>17</wp:post_id>
  <wp:post_date>2015-12-15 11:44:23</wp:post_date>
  <wp:post_date_gmt>2015-12-15 11:44:23</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>book</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Restrain return values</title>
  <link>http://www.learningraku.com/2015/12/28/restrain-return-values/</link>
  <pubDate>Mon, 28 Dec 2015 23:45:01 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=21</guid>
  <description/>
  <content:encoded><![CDATA[The utility of Perl 6 (or any language) is something that I can't already do. When people ask me if they should use Perl 6 (or even 
regular Perl), I ask them if they are having trouble getting what they want out of their current tools. <!--more-->

Looking forward to Perl 6, I see many features that I've wished for in other languages, or that other languages have but Perl doesn't. That's always the problem. Perl has most of the stuff I want, but some other language has a feature I want. Moving to that other language usually means I lose the stuff Perl had.

Here's an interesting bit from Perl 6, which has subroutine signatures (and, <a href="http://www.effectiveperlprogramming.com/2015/04/use-v5-20-subroutine-signatures/">so does Perl 5 now</a>). That's fine. But Perl 6 can also enforce return values.

Consider this subroutine that returns different values based on the even-ness of the number I pass it:

<pre class="brush:plain">
sub is-even(Int $number) {
	return 0 if $number % 2;
	return 1;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

I get back what I've been told—and what I've told others—is true or false:
 
<pre class="brush:plain">
$ perl6 is_excellent.p6
0
1
</pre>

Clearly, I've been programming Perl 5 for a long time because I use the <i>definite</i> values <code>1</code> and <code>0</code> to represent true and false.

But Perl 6 has the <a href="http://doc.perl6.org/type/Bool">Bool class</a> (well, enum) with <code>True</code> and <code>False</code>, so I should use those. One of the main benefits of object-oriented programming is object identity where the thingy knows what it is. A Bool knows that it's a Boolean thingy, but we have to have magical knowledge to know what a plain <code>0</code> or <code>1</code>. This isn't special to Perl 6; many other fine languages have it.

I fix up my Perl 5-ish code to look a little more Perl 6-y (but not all the way just yet):

<pre class="brush:plain">
sub is-even(Int $number) {
	return False if $number % 2;
	return 1;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

Now I can get a Bool value back in one case:

<pre class="brush:plain">
$ perl6 is_excellent.p6
False
1
</pre>

I don't get a Bool in the second case. I meant to fix up that case, but I made an incomplete patch. That might be rare in the universe of computer programming, but it does happen.

But Perl 6 can enforce a return value type, although at runtime. I add to the subroutine signature:

<pre class="brush:plain">
sub is-even(Int $number) returns Bool {
	return False if $number % 2;
	return 1;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

Now when I run this, I get an error for the case I didn't fix:

<pre class="brush:plain">
False
Type check failed for return value; expected Bool but got Int
</pre>

There are many ways to fix this and I'll try a wrong one before I get to the right one. First, I can turn that <code>1</code> into a Bool with a <a href="http://doc.perl6.org/type/Bool#prefix_%3F"><code>?</code>operator</a>:

<pre class="brush:plain">
sub is-even(Int $number) returns Bool {
	return False if $number % 2;
	return ?1;
	}
</pre>


That's a <a href="http://doc.perl6.org/language/operators#Operator_classification">prefix operator</a>, meaning it comes before the single value it operates on. It turns any sort of thing into either <code>True</code> or <code>False</code>. Now my code runs without an error. 

<pre class="brush:plain">
$ perl6 is-even.p6
False
True
</pre>

But, I still have some problems. I may think I'm forced to return a Boolean value, but I'm not. I can return a <code>Bool</code> type instead:

<pre class="brush:plain">
sub is-even(Int $number) returns Bool {
	return False if $number % 2;
	return Bool;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

I don't get an error, but I don't get the right answer either. I correctly get <code>False</code> for the first case, but I incorrectly get back a type for the second case <i>with no error</i>: 

<pre class="brush:plain">
$ perl6 is_excellent.p6
False
(Bool)
</pre>

I'm sure we're going to have fun with a dynamic language that passes types around, but not here. I need a better constraint on the return value.

By specifying <code>returns Bool</code>, I allow <code>is-even</code> to return <i>definite</i> and <i>undefined</i> values as long as they are from Bool. Curious! I can have object identity without a concrete value! The type object by itself has the right type even though it doesn't have a defined value. See <a href="https://perl6advent.wordpress.com/2013/12/02/day-02-the-humble-type-object/">Day 02 – The humble type object</a> in the 2013 Perl 6 Advent Calendar.

To force my subroutine to return a defined value, I can add a modifier to the return constraint. The <code>:D</code> (I hope your viewer doesn't turn colon-D into an emoji) marks a definite value:

<pre class="brush:plain">
sub is-even(Int $number) returns Bool:D {
	return False if $number % 2;
	return Bool;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

Now it fails, but with a cryptic error message that say it got what it expected:

<pre class="brush:plain">
$ perl6 is_excellent.p6
False
Type check failed for return value; expected Bool but got Bool
</pre>

I need to return definite values in each case:

<pre class="brush:plain">
sub is-even(Int $number) returns Bool:D {
	return False if $number % 2;
	return True;
	}

say is-even( 137 );
say is-even( 2 );
</pre>

This isn't the only way to specify the contraint, athough I think I like that one best. I can also use the arrow notation in the signature:

<pre class="brush:plain">
sub is-even(Int $number --> Bool:D) {
	return False if $number % 2;
	return True;
	}
</pre>

Lastly, even though I'm writing about return values, I can use the same modifier to fix up my problem with the parameter. I specify that I expect an <code>Int</code>, but that can be definite or indefinite as well: 

<pre class="brush:plain">
sub is-even(Int $number --> Bool:D) {
	return False if $number % 2;
	return True;
	}

say is-even( 137 );
say is-even( Int );
</pre>

If I try the modulus operator <code>%</code> with an indefinite value, my code blows up:

<pre class="brush:plain">
False
Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?
</pre>

I fix that by specifying that I want a definite value for the argument:

<pre class="brush:plain">
sub is-even(Int:D $number --> Bool:D) {
	return False if $number % 2;
	return True;
	}

say is-even( 137 );
say is-even( Int );
</pre>

Now I get an error that relates to the argument I pass. Notice what a nice error message it is:

<pre class="brush:plain">
False
Parameter '$number' requires an instance of type Int, but a type object was passed.  Did you forget a .new?
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2015-12-28 23:45:01</wp:post_date>
  <wp:post_date_gmt>2015-12-28 23:45:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>restrain-return-values</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="subroutines"><![CDATA[Subroutines]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Jlmartinez]]></wp:comment_author>
    <wp:comment_author_email>pplusdomain@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>176.83.16.102</wp:comment_author_IP>
    <wp:comment_date>2015-12-29 07:57:48</wp:comment_date>
    <wp:comment_date_gmt>2015-12-29 07:57:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Don't you think we'll be plaguing our functions with :D, which seems to be the default desired behavior that we would expect when saying Int or Bool?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451375868.7812709808349609375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1451466095.190876007080078125;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1094</wp:comment_id>
    <wp:comment_author><![CDATA[Yu Chang]]></wp:comment_author>
    <wp:comment_author_email>jluyuchang@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>183.240.196.146</wp:comment_author_IP>
    <wp:comment_date>2018-01-20 12:22:42</wp:comment_date>
    <wp:comment_date_gmt>2018-01-20 12:22:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In my opinion, as a dynamic programming language, it is reasonable that Perl 6 make the ":D" optionally, but not default.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Perl 6 gotchas</title>
  <link>http://www.learningraku.com/?p=35</link>
  <pubDate/>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[I'm finding the Perl 6 is fighting many of the things I want to do. We used to say you could write C in any language and now I'm trying to write Perl 5 in Perl 6. Some things aren't working out, but they also aren't documented. I don't intend this to be a Perl 5 translator; it's just a list of gripes I ran into.

I may reference the docs here, and maybe they change.

<h3>The quoting operators apparently can't use parens as a delimiter</h3>

I wanted to run an external command and capture the output, so I wanted to use the <code>q</code> quoter with the <code>:x</code> adverb. I tend to like the parens as paired delimiters so I tried that:

<pre class="brush:plain">
$ perl6 -e 'say q:x( date )'
===SORRY!=== Error while compiling -e
Invalid adverb value for :x( date )
at -e:1
------> q:x( date )⏏<EOL> 
</pre>

Nope. In <a href="http://doc.perl6.org/language/quoting">Quoting Constructs</a>, I read "followed by any pair of delimiters surrounding your text". Any except parentheses apparently, although that's a likely thing to reach for and one that would certainly deserve an explicit exception.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2016-01-10 11:13:28</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Perl 6 modulinos are even easier</title>
  <link>http://www.learningraku.com/2016/01/10/perl-6-modulinos-are-even-easier/</link>
  <pubDate>Sun, 10 Jan 2016 12:48:39 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=37</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has this wonderful thing called <code>MAIN</code> which is a built-in modulino thingy.

In my <a href="http://www.excellentnums.com">excellent number hobby</a> (which I started <A href="http://www.masteringperl.org/tag/excellent-numbers/">writing about in Mastering Perl</a> even after I switched to C), I've been converting some bits to Perl 6 just for giggles. There's a small <a href="https://github.com/briandfoy/excellent_numbers/blob/master/lib/CpuCount.pm">Perl 5 module I wrote to get the number of CPUs</a> I rewrote in Perl 6. It's not sophisticated or surprising. It's actually quite banal in function; merely dispatch to some method that knows what to do on the platforms I care about. And, be a modulino. <!--more-->

<pre class="brush:plain">
module CpuCount {
	sub run () is export {
		say get_cpu_count();
		}

	sub get_cpu_count () is export {
		state $dispatch = {
			freebsd  => &_freebsd,
			_default => &_posix,
			};

		my $key = $dispatch.{ $*DISTRO.name }:exists ?? $*DISTRO.name !! '_default';

		$dispatch.{ $key }.();
		}

	sub _freebsd () { _get_conf( 'NPROCESSORS_ONLN' ) }

	sub _posix ()   { _get_conf( '_NPROCESSORS_ONLN' ) }

	sub _get_conf ( $key ) {
		state $command = '/usr/bin/getconf';

		unless $key ~~ m/ ^^ <[_A..Z0..9]>+ $$ / {
			warn "Key $key doesn't look acceptable";
			return;
			};
		qq:x{$command $key 2>/dev/null}.chomp;
		}
	}

sub MAIN {
	import CpuCount;
	run;
	}
</pre>

First, <code>MAIN</code>. Perl 6 calls that if the file is the top-level thingy rather than something that's loaded by something else. No more <code>caller</code> tricks. It's even better though. Although I don't need it here, if I give <code>MAIN</code> a signature, it does some argument handling automatically. And, lexical imports!

Back to the top of the program, I can create a <code>module</code>, similar to Perl 5's <code>package BLOCK</code> syntax. I really like that. I get export handling without inheritance (that I can see, at least) by marking what is eligible with <code>is export</code>.

Inside <code>get_cpu_count</code>, I use the <code>$*DISTRO</code> special variable to find out what system I'm on. That's an object with various parts I can access.

In the dispatch table, I get a reference to a subroutine by using the <code>&</code> in front of it. That messed me up for a bit, but I think I like that.

In <code>_get_conf</code>, I have a regex. That's changed quite a bit with double typing. The <code>^^</code> and <code>$$</code> are anchors, whitespace is insignificant by default, and character classes are much fancier. Those are put in <code> &lt;[ ... ]&gt; </code> because you can do set operations on the things in the square brackets. Very fancy, but there's more typing. I also have to use <code>..</code> to make a range of characters. Disk drives are cheap, so let's use up those bytes!

I love string objects. I call the external command and can <code>chomp</code> it right away. And, <code>chomp</code> returns the modified string like God always wanted.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>37</wp:post_id>
  <wp:post_date>2016-01-10 12:48:39</wp:post_date>
  <wp:post_date_gmt>2016-01-10 12:48:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>perl-6-modulinos-are-even-easier</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Perl 6 BBEdit Codeless Language Module</title>
  <link>http://www.learningraku.com/2016/01/10/a-perl-6-bbedit-codeless-language-module/</link>
  <pubDate>Sun, 10 Jan 2016 15:49:32 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=39</guid>
  <description/>
  <content:encoded><![CDATA[Now I have rudimentary Perl 6 syntax coloring for BBEdit, my long-preferred editor on the Mac for years. I don't need anything fancy, so I did the minimum to color the stuff in the files I had open. BBEdit supports <a href="http://www.barebones.com/support/develop/clm.html">Codeless Language Modules</a> that specify various things about the language, including its file extensions, name, keywords, and so on. It's something a normal user can put into an XML or JSON file and drop into an <i>Application Support/BBEdit/Language Modules</i> directory for immediate use (with an application restart). It's not as clever as a compiled code module, but good enough for me at the moment. <!--more-->

<div class="image center">
<div>
<img src="/images/perl6_clm.png" />
</div>
</div>

I've put it in the <a href="https://github.com/briandfoy/Perl6_BBEdit_CLM">Perl6_BBEdit_CLM</A> project on GitHub for anyone who wants to improve it. For example, I've only listed the keywords I was actually using.

You can get syntax coloring for other editors:

<ul>
<li><a href="http://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim">http://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim</a>
<li><a href="https://github.com/hinrik/perl6-mode">emacs Perl6 mode</a>
</ul>

If you know of others, let me know.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2016-01-10 15:49:32</wp:post_date>
  <wp:post_date_gmt>2016-01-10 15:49:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-perl-6-bbedit-codeless-language-module</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="editing"><![CDATA[Editing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Topaz is still on SourceForge</title>
  <link>http://www.learningraku.com/2016/01/27/topaz-is-still-on-sourceforge/</link>
  <pubDate>Wed, 27 Jan 2016 23:46:08 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=46</guid>
  <description/>
  <content:encoded><![CDATA[Topaz, which was almost the next version of Perl in 2000, is still in Sourceforge. Chip Salzenberg had a hunch that rewriting Perl's guts in C++ would be the thing to solve its maintenance issues. He codenamed his project <a href="http://topaz.sourceforge.net">Topaz</a> and went to work. <!--more-->

He didn't get it working though, and Chip's the sort of guy that can get anything working. He took C++ to its limits. At the 1999 OSCON, he explained what he wanted to do and why he chose C++ in his talk <a href="//www.perl.com/pub/1999/09/topaz.html">Topaz: Perl for the 22nd Century</A>. It's old enough that there's a RealAudio version of the talk. Heck, the Topaz repo uses CVS. I tried compiling CVS but it doesn't like my <code>getline</code> (and I didn't try that hard).

<div class="image center">
<div>
<a data-flickr-embed="true"  href="https://www.flickr.com/photos/mauroescritor/8358129568/in/photolist-dJzAJd-5Cz8Dm-CnSZBx-Dj25nn-amh4Qk-6244vQ-8rPBN8-5vr5SF-q2Z6yZ-aNe4qv-cnJoxm-aGQPFr-k9toVP-psVtf7-pvntY3-p6VHk3-562LX-rucn81-73APpS-pot4gV-9M6kJZ-8Z3Ggf-fURCw6-7hkyqs-qk3fig-5JYbkP-qEMbPs-oRn87b-8QbWKt-pCrsRT-7e55Bp-mokQtZ-pChMar-bcMVye-5CuSVg-5CzaVj-5CzaUo-5CuSTk-5CuSSM-5Cz8L7-5CuQKi-5CuQGx-5Cz8EW-5CuQD6-C8i8qh-7VPKPA-rFZdSX-csk9DG-pEAXFo-kRFFj2" title="Blue topaz"><img src="https://farm9.staticflickr.com/8513/8358129568_d4e8916090.jpg" width="500" height="388" alt="Blue topaz"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script>
</div>
</div>

A year later he had given up, for solid technical reasons, but also because the community pushed all in for Perl 6.  I recall a talk where Chip discussed very technical C++ things he discovered, but it seems to have disappeared from the world. We also might have been sitting around a table in the hallway listening to him talk about it too. For what it's worth, Simon Cozens tried a similar thing with <a href="//www.perl.com/pub/2000/09/sapphire.html">Sapphire</a> (and there's <a href="http://perl11.org">Perl 11</a> and <a href="http://rperl.org">RPerl</a> and ...).

Much of the discussion around that time was about which language the next perl sources would use. The then current Perl 5 sources were in C and had macros on top of macros (on top of macros) as it bent over backward to not conflict with other C code it might be embedded next to. Today we have <a href="http://www.metacpan.org/module/DBI">DBI</a> as a generic database interface, but back in the day there were things like <b>oraperl</b>, an Oracle client with Perl embedded in it (or Perl with an Oracle client embedded in it).

Other options were briefly considered, but a crazy idea stuck. Perl 6 would be written in Perl 6. That sounds a little weird, but if you unwind it a bit it works. 

There's <a href="//github.com/perl6/nqp">NQP</a>, or "Not Quite Perl 6" which serves as a basic layer between a virtual machine and Perl 6. From that, NQP looks quite a bit like Perl 6 and can bootstrap Perl 6. As long as NQP can translate its part to the layer under it, Perl 6 can go anywhere NQP can go. That might be Parrot, a JVM, or <A href="//www.moarvm.org">MOAR</a> (MetaModel on a Runtime).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>46</wp:post_id>
  <wp:post_date>2016-01-27 23:46:08</wp:post_date>
  <wp:post_date_gmt>2016-01-27 23:46:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>topaz-is-still-on-sourceforge</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="history"><![CDATA[History]]></category>
  <category domain="post_tag" nicename="nqp"><![CDATA[nqp]]></category>
  <category domain="post_tag" nicename="sapphire"><![CDATA[sapphire]]></category>
  <category domain="post_tag" nicename="topaz"><![CDATA[topaz]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>47</wp:comment_id>
    <wp:comment_author><![CDATA[2016.5,6 Rakudo Starring | Weekly changes in and around Perl 6]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://p6weekly.wordpress.com/2016/02/08/2016-56-rakudo-starring/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.145</wp:comment_author_IP>
    <wp:comment_date>2016-02-08 22:31:25</wp:comment_date>
    <wp:comment_date_gmt>2016-02-08 22:31:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Topaz Is Still On SourceForge by brian d foy [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454970685.55597400665283203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1456208346.5968940258026123046875;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Don't install over your existing Perl 6</title>
  <link>http://www.learningraku.com/2016/02/06/dont-install-over-your-existing-perl-6/</link>
  <pubDate>Sat, 06 Feb 2016 20:27:42 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=49</guid>
  <description/>
  <content:encoded><![CDATA[When you want to install a new Perl 6 (or any of its backend stuff), don't install over what you already have working. The language and the tools aren't stable or reliable enough for you to end up with something that still works. It's getting better (relative to Pugs, which could take days, or the situation five years ago), but it doesn't pass the <A href="//www.urbandictionary.com/define.php?term=Grandma+Test">grandma test</a> yet. <!--more-->

I'm at the first meeting of the Perl 6 Study Group in NYC, which Jim Keenan has organized in the back of <a href="//www.yelp.com/biz/d-b-a-new-york-2">dba</a>. That's the same place the first ever Perl users group meeting took place. My goal today was to explore some installation strategies for Perl 6.

First, you aren't merely installing Perl 6. There's a <b>backend</b> you'll need. Perl 6 can run on <a href="//www.moarvm.org">MoarVM</a>, JVM, and maybe a few others. You'll need to build that. Second, you need to bootstrap Perl 6 since it's written in Perl 6. <A href="//github.com/perl6/nqp">NQP</a> (Not Quite Perl 6) is the path to that bootstrapping. Third, there's the Perl 6 implementation. Most people will go for <a href="//rakudo.org/downloads/star/">Rakudo</a>, but one of the goals of Perl 6 is to get away from the single, canonical interpreter we have in Perl 5 Land.

<div class="image center">
<div>
<img src="http://i0.kym-cdn.com/entries/icons/original/000/000/574/moar-cat.jpg" width="500" height="392">
</div>
</div>

Most of this you won't have to worry about in most cases. The <A href="//github.com/tadzik/rakudobrew">rakudobrew</a> tool automates this. When you follow that link, you'll end up on a GitHub page. When you run rakudobrew, you'll pull from several GitHub projects:

<pre class="brush:perl">
my %git_repos = (
    rakudo => "$GIT_PROTO://github.com/rakudo/rakudo.git",
    MoarVM => "$GIT_PROTO://github.com/MoarVM/MoarVM.git",
    nqp    => "$GIT_PROTO://github.com/perl6/nqp.git",
    panda  => "$GIT_PROTO://github.com/tadzik/panda.git",
    zef    => "$GIT_PROTO://github.com/ugexe/zef.git",
);
</pre>

I strongly believe that the path to mastery includes understanding what a tool does even if it automates really annoying stuff that you don't want to think about. You see the rakudo, MoarVM, and NQP components there. Panda and zef are Perl 6 module tools.

Pulling directly from repos, even if its from a  specific tag, seems fragile and makes me nervous. Some of this is technically unfounded but socially aware. Pulling from several repos each time I want to build Perl 6 also makes me nervous. I could download <A href="//rakudo.org/downloads/star/">Rakudo Star</a>, a tarball that includes the basics and a MoarVM and install it by hand.

rakudobrew is more interesting because it should manage several installed versions at the same time. Pulling from the repositories works fine, but the various hand-offs to external programs and the shell are fragile. I talked to a tech from Amazon Web Services about setting up a shared Perl 6 machine, and sadly he ran into problems on a fresh install of everything. These aren't uncommon. It's also the first problem that people are going to run into and the quickest way that they are going to give up. We need more binary packages until the installation system is reliable to the point that we never think about it.

For my task, I installed several by hand and these worked without a problem:

<pre class="brush:plain">
$ perl Configure.pl --prefix=/Users/brian/Dropbox/Perl6/20160205 --gen-moar --make-install
$ perl Configure.pl --prefix=/Users/brian/Dropbox/Perl6/20160205.2 --gen-moar --make-install
$ git checkout -b v6.c
$ perl Configure.pl --prefix=/Users/brian/Dropbox/Perl6/6.c --gen-moar --make-install
</pre>

For some reason, the same session wouldn't build using rakudobrew. It would fail with the a similar mismatch in tools I reported in <A href="//github.com/MoarVM/MoarVM/issues/334">Issue 334 for MoarVM</a>. Basically, the installer chooses a set of tools and adds them to the Makefile as the command name, like  <code>AR=ar</code>. This leaves it up to the path to choose the first one it finds, not the one that goes with the compiler it chose.

I recommend that you don't nuke your existing implementation when you want a different version of Perl 6. You might even up with something that doesn't work. I should be old enough to know not to install new software while I'm at an airport, but I tried to upgrade and spent the rest of the flight trying to fix the installation errors.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2016-02-06 20:27:42</wp:post_date>
  <wp:post_date_gmt>2016-02-06 20:27:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dont-install-over-your-existing-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="horrors"><![CDATA[Horrors]]></category>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[2016.5,6 Rakudo Starring | Weekly changes in and around Perl 6]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://p6weekly.wordpress.com/2016/02/08/2016-56-rakudo-starring/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.48</wp:comment_author_IP>
    <wp:comment_date>2016-02-08 22:34:25</wp:comment_date>
    <wp:comment_date_gmt>2016-02-08 22:34:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Don&#8217;t Install Over Your Existing Perl 6 by brian d foy [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1454970865.6331539154052734375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1456208351.522571086883544921875;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Perl 6 Examples</title>
  <link>http://www.learningraku.com/2016/02/23/perl-6-examples/</link>
  <pubDate>Tue, 23 Feb 2016 19:12:04 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=55</guid>
  <description/>
  <content:encoded><![CDATA[In the early days of Perl 6 we don't have a library of reliable books, mostly because the language had shifted so rapidly. But, there are plenty of examples of Perl 6. I've listed some of them in the sidebar of <a href="/">this website</a>. <!--more-->

<ul>
<li>The <a href="//github.com/perl6/roast">test suite ("roast")</a> for Perl 6 has examples of almost all of the features so developers can verify the specification.
<li><a href="//rosettacode.org/wiki/Category:Perl_6">Rosetta Code has a section with Perl 6 examples</A>.
<li><a href="//examples.perl6.org/">There's examples.perl6.org</a>, which includes <A href="//examples.perl6.org/categories/euler.html">Project Euler solutions</a>. See it's <a href="https://github.com/perl6/perl6-examples">GitHub repo</a> too.
<li><a href="//learnxinyminutes.com/docs/perl6/">Learn Perl 6 in Y minutes</a> is a summary of Perl 6, in code.
</ul>

We don't emphasize code reading enough. We're used to teaching you how to write new code, usually while you struggle with a particular concept we give you. You'll learn much more by reading code. Someone else will do it slightly differently or even in a completely different way using features you didn't know about. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2016-02-23 19:12:04</wp:post_date>
  <wp:post_date_gmt>2016-02-23 19:12:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>perl-6-examples</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="examples"><![CDATA[Examples]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>58</wp:comment_id>
    <wp:comment_author><![CDATA[Steve Mynott]]></wp:comment_author>
    <wp:comment_author_email>steve.mynott@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.192.115.245</wp:comment_author_IP>
    <wp:comment_date>2016-02-26 10:29:32</wp:comment_date>
    <wp:comment_date_gmt>2016-02-26 10:29:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is a previous start of a book at <a href="https://github.com/perl6/book" rel="nofollow">https://github.com/perl6/book</a> although this hasn’t seen much love in a while.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1456482573.0382850170135498046875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1456609895.6681549549102783203125;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>DOS pattern matching, in Perl 6</title>
  <link>http://www.learningraku.com/2016/02/28/dos-pattern-matching-in-perl-6/</link>
  <pubDate>Sun, 28 Feb 2016 05:26:36 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=57</guid>
  <description/>
  <content:encoded><![CDATA[I rewrote my <a href="http://www.learning-perl.com/2016/02/dos-pattern-matching-in-perl/">DOS pattern matching</a> in Perl 6. There's nothing particularly fancy here and I tried to keep it close to the version I wrote in Perl 5 and <a href="https://blogs.msdn.microsoft.com/oldnewthing/20071217-00/?p=24143">the way Raymond Chen presented it</a>. <!--more-->

<pre class="brush:plain">
#!perl6

=begin pod

Match 8.3 filenames in the DOS way, from Raymond Chen

https://blogs.msdn.microsoft.com/oldnewthing/20071217-00/?p=24143

1. Start with eleven spaces and the cursor at position 1.

2. Read a character from the input. If the end of the input is
reached, then stop.

3. If the next character in the input is a dot, then set positions 9,
10, and 11 to spaces, move the cursor to position 9, and go back to
step 2.

4. If the next character in the input is an asterisk, then fill the
rest of the pattern with question marks, move the cursor to position
12, and go back to step 2. (Yes, this is past the end of the pattern.)

5. If the cursor is not at position 12, copy the input character to
the cursor position and advance the cursor.

*: Remember that Perl 6 counts strings counting from zero.

=end pod

for $=finish.lines -> $line {
	my $dos_pattern = ' ' x 11;
	my $cursor = 0;

	for $line.split("", :skip-empty) -> $char {
		if $char eq '.' {
			$dos_pattern.substr-rw( 8, 3 ) = ' ' x 3;
			$cursor = 8;
			}
		elsif $char eq '*' {
			$dos_pattern.substr-rw( $_, 1 ) = '?' for $cursor .. 10;
			$cursor = 11;
			}
		elsif $cursor != 11 {
			$dos_pattern.substr-rw( $cursor++, 1 ) = $char;
			}

		}

	printf "%d: %12s -> %12s\n", $++, $line, $dos_pattern;
	}

=finish
ABCD.TXT
ABCDEFGHIJK
A*B.TXT
*.*
*
*.TXT
.TXT
</pre>

I get the same output.

<pre class="brush:plain">
0:     ABCD.TXT ->  ABCD    TXT
1:  ABCDEFGHIJK ->  ABCDEFGHIJK
2:      A*B.TXT ->  A???????TXT
3:          *.* ->  ???????????
4:            * ->  ???????????
5:        *.TXT ->  ????????TXT
6:         .TXT ->          TXT
</pre>

But let's look at some differences.

I have <code>$line.split("", :skip-empty)</code>. Splitting with an empty string creates empty elements at the beginning <i>and</i> end of the list, so I can add the <code>:skip-empty</code>. 

There's a <a href="https://doc.perl6.org/type/Str#routine_chars"><code>chars</code></a> method in the <code>Str</code> class, but it doesn't return characters. It returns a count. The <a href="https://doc.perl6.org/type/Str#routine_lines"><code>lines</code></a> method, however, returns lines and not a count.

The <a href="https://doc.perl6.org/type/Str"><code>Str</code> class</a> has several <code>subst*</code> methods that do slightly different things. The <code>subset-rw</code> provides the lvalue that I can assign to. 

And, check out that anonymous variable in the <code>printf</code> line. Perl 6 has a feature that creates persistent state variables that are private to a statement. Don't give the variable a name. <code>$++</code> is a variable without a name that I post-increment. That's pretty handy.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2016-02-28 05:26:36</wp:post_date>
  <wp:post_date_gmt>2016-02-28 05:26:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dos-pattern-matching-in-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="examples"><![CDATA[Examples]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_2115ce1120508ed8f16546c7fff2692b</wp:meta_key>
    <wp:meta_value><![CDATA[<blockquote data-secret="jOyt08lI5E" class="wp-embedded-content"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071217-00/?p=24143">How did wildcards work in MS-DOS?</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://blogs.msdn.microsoft.com/oldnewthing/20071217-00/?p=24143/embed#?secret=jOyt08lI5E" data-secret="jOyt08lI5E" width="600" height="338" title="&#8220;How did wildcards work in MS-DOS?&#8221; &#8212; The Old New Thing" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_time_2115ce1120508ed8f16546c7fff2692b</wp:meta_key>
    <wp:meta_value><![CDATA[1515589256]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>61</wp:comment_id>
    <wp:comment_author><![CDATA[LLFourn]]></wp:comment_author>
    <wp:comment_author_email>lloyd.fourn@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>124.171.2.96</wp:comment_author_IP>
    <wp:comment_date>2016-02-28 11:09:06</wp:comment_date>
    <wp:comment_date_gmt>2016-02-28 11:09:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[# using 'comb' instead of 'split' and 'when' to match on $_ instead of 'if'.

for $=finish.lines -&gt; $line {
    my $dos_pattern = ' ' x 11;
    my $cursor = 0;

    for $line.comb {
        when '.' {
            $dos_pattern.substr-rw( 8, 3 ) = ' ' x 3;
            $cursor = 8;
        }
        when '*' {
            $dos_pattern.substr-rw( $_, 1 ) = '?' for $cursor .. 10;
            $cursor = 11;
        }
        when $cursor != 11 {
            $dos_pattern.substr-rw( $cursor++, 1 ) = $_;
        }
    }
    printf "%d: %12s -&gt; %12s\n", $++, $line, $dos_pattern;
}

# Seems to work :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1456657747.3448150157928466796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1469854176.6899011;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #5: The Z=&gt; zip operator, lazy ranges, and terse hash creation.</title>
  <link>http://www.learningraku.com/2016/11/20/the-z-zip-operator-lazy-ranges-and-terse-hash-creation/</link>
  <pubDate>Sun, 20 Nov 2016 03:10:48 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=62</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has some very sophisticated operators, and many of them naturally do the sorts of things that we do quite a bit unnaturally otherwise. The strength of these operators are the ugliness they hide from us. <!--more-->

Consider how I might turn a Perl 5 array into a hash, perhaps so I can use <code>exists</code> to lookup an item:

<pre class="brush:perl">
#!perl5
my @array = qw( a b c d );
my %hash  = map { $_ => 1 } @array;
</pre>

It might seem a bit shorter to try a hash slice assignment, but I like to declare my variables. This is this a bit goofy looking:

<pre>
#!perl5
my %hash;
@hash{ @array } = (1) x @array;
</pre>

It's a bit harder if I want the hash value to be the array position:

<pre class="brush:perl">
#!perl5
my @array = qw( a b c d );
my %hash  = map { $array[$_] => $_ } 0 .. $#array;

# ... or
@hash{ @array } = 0 .. $#array;
</pre>

I can still do these things the hard way in Perl 6. The <A href="https://docs.perl6.org/language/operators#Sequencer_Precedence">feed operators</a> (<code>==></code>, also known as <i>sequencer</i>) makes short work of declaring a variable on one side of the expression, doing work in the middle, and having the result end up in a declared variable on the other end. It's like an <code>xargs</code> for programming languages where the result of the generating side because the final arguments of the receiving side:

<pre class="brush:plain">
#!perl6
my @array = < a b c d >
	==> map( { $_ => 1 } )
	==> my %hash1;
</pre>

I know I'm going to abuse those feed operators.

What if I want the array index to be the value. Or, is it? Perl 6 does quite a bit to make it easy to create lists. If you make it easy to create complex data structures, you're going to be a nice language.

I can use the <a href="https://docs.perl6.org/language/operators#Zip_Operators">zip metaoperator</a>, <code>Z</code> to apply the <a href="https://docs.perl6.org/language/operators#Item_Assignment_Precedence">item assignment operator</a>, <code>=></code> to corresponding pairs:

<pre class="brush:plain">
my %hash2 = @array Z=> 0 .. @array.end;
</pre>

This takes the first item in <code>@array</code> and pairs it with the first item in the <code>0 .. @array.end</code>.

But, I don't even need to know about the end of the array. The zip operator stops when it gets to the end of the shorter list. I don't need to type out the name of the array again:

<pre class="brush:plain">
my %hash2 = @array Z=> 0 .. *;
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>62</wp:post_id>
  <wp:post_date>2016-11-20 03:10:48</wp:post_date>
  <wp:post_date_gmt>2016-11-20 03:10:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-z-zip-operator-lazy-ranges-and-terse-hash-creation</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>134</wp:comment_id>
    <wp:comment_author><![CDATA[Elizabeth Mattijsen]]></wp:comment_author>
    <wp:comment_author_email>liz@dijkmat.nl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.100.131.131</wp:comment_author_IP>
    <wp:comment_date>2016-11-24 20:33:31</wp:comment_date>
    <wp:comment_date_gmt>2016-11-24 20:33:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The righthand side of Z=&gt; doesn’t need to be bounded, it can be an infinite range, delimited by the lefthand side of Z=&gt; . Again a nice use of Whatever  :-)

<pre>
$ 6 'my @a = &lt;a b c d e&gt;; my %h = @a Z=&gt; 0..*; dd %h'
Hash %h = {:a(0), :b(1), :c(2), :d(3), :e(4)}
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480019611.354322;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480118320.4697051;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>135</wp:comment_id>
    <wp:comment_author><![CDATA[mscha]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0983:8781:0001:a402:ec2c:2d2d:09e8</wp:comment_author_IP>
    <wp:comment_date>2016-11-25 16:44:16</wp:comment_date>
    <wp:comment_date_gmt>2016-11-25 16:44:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The very last line of code can be simplified as:

<pre>
my %hash2 = @array Z=&gt; @array.keys;
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480092256.443769;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480118322.0376971;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>143</wp:comment_id>
    <wp:comment_author><![CDATA[krunen]]></wp:comment_author>
    <wp:comment_author_email>krunen@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.213.19.19</wp:comment_author_IP>
    <wp:comment_date>2016-11-28 14:14:11</wp:comment_date>
    <wp:comment_date_gmt>2016-11-28 14:14:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Or even:

my %hash2 = @array.map: * =&gt; $++;
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480342451.8485129;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480365905.1432059;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>145</wp:comment_id>
    <wp:comment_author><![CDATA[Christopher Bottoms]]></wp:comment_author>
    <wp:comment_author_email>christopher.bottoms@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2610:00e0:a010:0304:3dad:516a:6807:c6d8</wp:comment_author_IP>
    <wp:comment_date>2016-11-29 20:44:57</wp:comment_date>
    <wp:comment_date_gmt>2016-11-29 20:44:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Awesome! Thanks for this post! I'll have to remember "Z=&gt;" for simplifying creating hashes from computed lists.

By the way, since you want array indices for hash values and array values for hash keys, you could get the same results thus:

my %hash = @array.kv.reverse;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480452297.487252;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480456659.909605;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>147</wp:comment_id>
    <wp:comment_author><![CDATA[bbkr]]></wp:comment_author>
    <wp:comment_author_email>bbkr@post.pl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>78.31.153.58</wp:comment_author_IP>
    <wp:comment_date>2016-11-29 21:08:38</wp:comment_date>
    <wp:comment_date_gmt>2016-11-29 21:08:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Or just:

my %hash = @array.kv.reverse;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480453718.642765;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480456645.3635249;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>157</wp:comment_id>
    <wp:comment_author><![CDATA[TimToady]]></wp:comment_author>
    <wp:comment_author_email>larry@wall.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>107.202.146.247</wp:comment_author_IP>
    <wp:comment_date>2016-12-01 01:37:15</wp:comment_date>
    <wp:comment_date_gmt>2016-12-01 01:37:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Or just my %hash = @array.antipairs;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480556235.7876129;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480561916.653059;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip 1: User-defined infinite sequences</title>
  <link>http://www.learningraku.com/2016/11/16/quick-tip-1-user-defined-infinite-sequences/</link>
  <pubDate>Wed, 16 Nov 2016 16:03:49 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=65</guid>
  <description/>
  <content:encoded><![CDATA[Every day of the <A href="https://www.kickstarter.com/projects/1422827986/learning-perl-6">Learning Perl 6 Kickstarter campaign</a>, I'll present a <a href="/category/kickstarter-tips/">quick tip</a> about something I like in Perl 6. Let's start with sequences. <!--more-->

We have simple sequences, like one digit to another. Here's 0 to 9:

<pre class="brush:plain">
my $tenner := 0 ... 9;
</pre>

Notice a few things here. I've used the <a href="https://docs.perl6.org/language/operators#infix_:=">infix binding operator, <code>:=</code></a>. It doesn't assign a value, it makes the lefthand side the same as the righthand side.

The <code>...</code> is the <a href="https://docs.perl6.org/language/operators#infix_...">sequence operator</a>, which we can use to produce <i>lazy</i> lists.

Lazy lists, you say? What if I wanted not just 0 to 9, but 0 to whatever number I felt like for as long as I wanted to run the program. I don't know what that number might be, so I won't specify it. I'll just call it "whatever" with the <code>*</code>:

<pre class="brush:plain">
my $infinite := 0 ... *;
</pre>

Perl 6 doesn't compute this sequence. It knows that it starts at zero and keeps going until it reaches the end. That <code>*</code> is literally a <a href="https://docs.perl6.org/type/Whatever">Whatever</a> object. When Perl 6 wants to know if it's at the end, <a href="https://docs.perl6.org/type/Whatever">Whatever</a> says no.

That could be a long, long list. But, the laziness takes care of that. Perl 6 doesn't evaluate the next item until it needs it. This loop will go on forever:

<pre class="brush:plain">
for $infinite -> $next {
	say $next;
	}
</pre>

Big deal. We've had infinite loops forever (does anyone know who made the first one?). We can do this with <code>loop</code>:

<pre class="brush:plain">
loop ( my $i = 0; ; $i++ ) {
	say $i;
	}
</pre>

But, a loop is just a loop. It sits there all by itself. However, we can pass around a sequence, we can store it. We can so many other things with it. We can put it in a hash and choose the one we need later:

<pre class="brush:plain">
my %hash;

%hash&lt;s> := 7 ... 10;
%hash&lt;t> := 0 ...  3;
%hash&lt;u> := 137 ...  *;

show( %hash{ time %% 2 ?? 't' !! 's' } );

sub show ( $s ) {
	.say for |$s;
	}
</pre>

Yep, we just stored an infinite number of values in a single hash value. I'll have more on this in the next entry.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>65</wp:post_id>
  <wp:post_date>2016-11-16 16:03:49</wp:post_date>
  <wp:post_date_gmt>2016-11-16 16:03:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-1-user-defined-infinite-sequences</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>129</wp:comment_id>
    <wp:comment_author><![CDATA[Wenzel Peppmeyer]]></wp:comment_author>
    <wp:comment_author_email>wenzel.peppmeyer@gmx.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>95.90.208.73</wp:comment_author_IP>
    <wp:comment_date>2016-11-22 03:31:02</wp:comment_date>
    <wp:comment_date_gmt>2016-11-22 03:31:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ada Localace made the first infinite loop. In the appendix to Luigi Menabrea book that she translated, she tried to implement the computation of Bernoulli numbers in such a buggy way that the program never terminated. This is assuming that neither Babbage nor Menabrea (who where programmers before Ada) made a similar mistake.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1479785462.8576739;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1479789978.4075501;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>183</wp:comment_id>
    <wp:comment_author><![CDATA[Vitali]]></wp:comment_author>
    <wp:comment_author_email>vitali.peil@uni-bielefeld.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0638:0504:c016:0250:b6ff:fe78:6bcf</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 12:05:53</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 12:05:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I like this concept of infinite loops and of lazy evaluation. This reminds me of Haskell.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481025953.1032121;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481036231.687355;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #2: Fancier sequences</title>
  <link>http://www.learningraku.com/2016/11/17/quick-tip-2-fancier-sequences/</link>
  <pubDate>Thu, 17 Nov 2016 06:47:21 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=69</guid>
  <description/>
  <content:encoded><![CDATA[Every day of the <A href="https://www.kickstarter.com/projects/1422827986/learning-perl-6">Learning Perl 6 Kickstarter campaign</a>, I'll present a <a href="/category/kickstarter-tips/">quick tip</a> about something I like in Perl 6. Yesterday I posted <a href="/2016/11/16/quick-tip-1-user-defined-infinite-sequences/">User-defined infinite sequences</a>. In that post I only showed sequences of positive numbers. That's a bit boring. Let's make something fancier. <!--more-->

Let's start with one of the boring examples that every programming language likes to use. It's a bit not-safe-for-work. About 800 years ago, Fibonacci spent a lot of time thinking about what adult rabbits do with their free time. He didn't invent the problem, but he gets all the credit:

<pre class="brush:plain">
my $fibonacci := 1, 1, { $^a + $^b } ... *;
say "Fibonacci: " ~ $fibonacci[0..10];
</pre>

Here's the result:

<pre class="brush:plain">
Fibonacci: 1 1 2 3 5 8 13 21 34 55 89
</pre>

We can create an infinite, lazy sequence. (As a side not, doesn't that sound wrong? The order of adjectives in English is customarily quantity followed by opinion. Doesn't lazy, infinite lists sound better?)

But, what's going on with that sequence? I start off with two literals, the <code>1</code> and <code>1</code>. But, after that I have a <a href="https://docs.perl6.org/language/functions#Blocks_and_Lambdas">block</a>. When Perl 6 sees a block in the sequence, it uses it to compute the next element. And, I can do anything I like in that block.

But, what's going in the block? There's a <code>$^a</code> and a <code>$^b</code>. Perl 6 figures out that this block takes two arguments and grabs the previous two items from the sequence to fill those variables. The last evaluated expression in the block becomes the next value in the sequence. After that it starts all over. And, since I used the Whatever <code>*</code> at the end, the sequence goes on forever.

The Lucas Sequence is similar:

<pre class="brush:plain">
my $lucas := 2, 1, 3, { $^a + $^b } ... *;
say "Lucas: " ~ $lucas[0..10];
</pre>

Here's the result:

<pre class="brush:plain">
Lucas: 2 1 3 4 7 11 18 29 47 76 123
</pre>

Let's do something more interesting. There's a sequence of "digit product". You take the number and split it up into individual decimal digits. Multiply all of those and add that product to the original number. That's the next number in the sequence. Here it is:

<pre class="brush:plain">
my $d := 1, { $^a + [*] $^a.comb } ... *;
say "Digit product: " ~ $d[0..10];
</pre>

Here's the result:

<pre class="brush:plain">
Digit product: 1 2 4 8 16 22 26 38 62 74 102
</pre>

There are a few interesting things in that block. First, I call the <code>comb</code> method to break the number up into digits. In front of that is the <code>[*]</code> <a href="https://docs.perl6.org/language/operators#Reduction_Operators">reduction operator</a>. It takes two elements from the succeeding list, performs the operation inside the square braces, and puts the result back on the list. It does this until there's a single element left. That gives me the product of the digits.

Once I have the product, I add it to the original number (still in <code>$^a</code>). Now I have the next item in the sequence.

Not fancy enough? How abou the "speak and say" sequence? Take a number, such as 1. Now, say the count of the like digits and the digit word. So, there is "one 1". Translate that into digits, so <code>11</code>. Do it again. There's "two 1s", or <code>21</code>, then, "one 2 and one 1", so <code>1211</code>. Keep doing that until you get bored with it:

<pre class="brush:plain">
my $speak_and_say := 1, { .subst( /(<[0..9]>)$0*/, { .chars() ~ .[0] }, :g ) } ... *;
say "Speak and say: " ~ $speak_and_say[0..5];
</pre>

The result is:

<pre class="brush:plain">
Speak and say: 1 11 21 1211 111221 312211
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>69</wp:post_id>
  <wp:post_date>2016-11-17 06:47:21</wp:post_date>
  <wp:post_date_gmt>2016-11-17 06:47:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-2-fancier-sequences</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>127</wp:comment_id>
    <wp:comment_author><![CDATA[thundergnat]]></wp:comment_author>
    <wp:comment_author_email>thundergnat@comcast.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>73.195.158.233</wp:comment_author_IP>
    <wp:comment_date>2016-11-21 18:38:29</wp:comment_date>
    <wp:comment_date_gmt>2016-11-21 18:38:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Not necessarily golfed, more idiomatic perhaps.

    my @fib   = 1, 1, * + * … *;
    my @lucas = 2, 1, * + * … *;
    my @dprod = 1, { $^a + [*] $a.comb } … *;
    my @look-and-say = 1, *.subst(/(.)$0*/, { .chars ~ .[0] }, :g) … *;

    put "Fib: ", @fib[^11];
    put "Lucas: ", @lucas[^11];
    put "Digit product: ", @dprod[^11];
    put "Look and say: ", @look-and-say[^11];]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1479753509.737148;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1479789996.8978479;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>128</wp:comment_id>
    <wp:comment_author><![CDATA[Damian Conway]]></wp:comment_author>
    <wp:comment_author_email>damian@conway.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>168.1.99.199</wp:comment_author_IP>
    <wp:comment_date>2016-11-21 18:56:50</wp:comment_date>
    <wp:comment_date_gmt>2016-11-21 18:56:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The easy way to split a string into characters is with the .comb method. 
Hence:

    my $d := 1, { $^a + [*] $^a.comb } ... *;

The .subst method passes the Match object of each match 
as the argument to the specified replacement block. 
So you just need:

    my $speak_and_say := 1, { $^a.subst( /(\d)$0*/, {.chars() ~ .[0]}, :g) } ... *;

Though I'd be inclined to write that in a way that is a little punctuated and a little more self-explanatory:

    my $speak_and_say := 1, { .subst( /&lt;digit>$&lt;digit>*/, {.chars() ~ .}, :g) } ... *;

(Note the use of unary dot instead of $^a in the sequence block as well).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1479754610.5792191;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1479789986.9519351;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>131</wp:comment_id>
    <wp:comment_author><![CDATA[Francis]]></wp:comment_author>
    <wp:comment_author_email>perl@powered.ninja</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:4479:b4c8:9b16:ddbe:344c:d591:6047</wp:comment_author_IP>
    <wp:comment_date>2016-11-22 10:55:11</wp:comment_date>
    <wp:comment_date_gmt>2016-11-22 10:55:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; There’s a subst-mutate that doesn’t change the original but returns a modified versio

my $speak_and_say := 1, { S:g/(()$0*)/{$0.chars() ~ $/[0][0]}/ given $^a } ... *]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1479812111.857168;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1479873661.937541;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1126</wp:comment_id>
    <wp:comment_author><![CDATA[khoguan]]></wp:comment_author>
    <wp:comment_author_email>khoguanp@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>114.26.127.153</wp:comment_author_IP>
    <wp:comment_date>2020-08-01 02:20:51</wp:comment_date>
    <wp:comment_date_gmt>2020-08-01 02:20:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[&gt; my $speak_and_say := 1, { .subst( /$*/, {.chars() ~ .}, :g) } … *;

I cannot compile it on Rakudo version 2020.01 built on MoarVM version 2020.01.1.
The error mesage is:
"Malformed postfix call (only alphabetic methods may be detached)
Damian, would you please debug the code? Thanks a lot.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>128</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #3: Inclusive and Exclusive</title>
  <link>http://www.learningraku.com/2016/11/18/quick-tip-3-inclusive-and-exclusive/</link>
  <pubDate>Fri, 18 Nov 2016 09:51:59 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[Every day of the <A href="https://www.kickstarter.com/projects/1422827986/learning-perl-6">Learning Perl 6 Kickstarter campaign</a>, I'll present a quick tip about something I like in Perl 6. Yesterday I posted <a href="/2016/11/17/quick-tip-2-fancier-sequences/">Fancier sequences</a>. In that post I only showed how you could use blocks to decide the next element in the sequence. <!--more-->

There's some other interesting syntax that sequences and ranges (and a few other things). You already know how to make the fancy sequences, so I won't distract you with that in this post. I'll use simple, boring sequences for this post.

By default, the <code>..</code> (<a href="https://docs.perl6.org/type/Range.html">Range</a>) and <code>...</code> (<a href="https://docs.perl6.org/type/Seq.html">Sequence</a>) operators include their end points. The range <code>0..9</code> includes the 0 and the 9. That's mostly what you want and mostly what you expect.

Rather than writing programs, let's look at these in the Perl 6 REPL. When you start <i>perl6</i> without arguments, you drop into the <i>perl6</i> shell:

<pre class="brush:plain">
$ perl6
To exit type 'exit' or '^D'
> 0 .. 9
0..9
</pre>

The REPL shows the result of what I entered. In this case, it shows me the sequence although it has not evaluated it yet.

The list or flat methods will turn it into, well, a list. I can also assign it to a listy thing:

<pre class="brush:plain">
> (0..9).list
(0 1 2 3 4 5 6 7 8 9)
> (0..9).flat
(0 1 2 3 4 5 6 7 8 9)
> my @a = 0 .. 9;
[0 1 2 3 4 5 6 7 8 9]
</pre>

You should have line history already (if not, <a href="https://docs.perl6.org/language/faq.html#How_can_I_get_command_line_history_in_the_Perl_6_prompt_(REPL)?">See the FAQ</a>), so you can arrow up to change the previous command without re-typing everything.

I try it again by including a <code>^</code> before the end element. This makes the end <i>exclusive</i>. It excludes the element from the list:

<pre class="brush:plain">
(0..^9).flat
(0 1 2 3 4 5 6 7 8) 
</pre>

I can do the same on the other side to exclude the starting element:

<pre class="brush:plain">
> (0^..9).flat
(1 2 3 4 5 6 7 8 9)
</pre>

Or I can do it on both sides:

<pre class="brush:plain">
> (0^..^9).flat
(1 2 3 4 5 6 7 8)
</pre>

I can put spaces around the start or end elements:

<pre class="brush:plain">
> (0 ^..^ 9).flat
(1 2 3 4 5 6 7 8)
</pre>

But not between the <code>^</code> and the <code>..</code>:

<pre class="brush:plain">
> (0 ^.. ^9).flat
Range objects are not valid endpoints for Ranges
</pre>

The operators are actually <code><a href="https://docs.perl6.org/language/operators#infix_..">..</a></code>, <code><a href="https://docs.perl6.org/language/operators#infix_^..">^..</a></code>, <code><a href="https://docs.perl6.org/language/operators#infix_..^">..^</a></code>, or <code><a href="https://docs.perl6.org/language/operators#infix_^..^">^..^</a></code>.

I can use this to terminate the sequences as well. I already showed the infinite sequence. But, I can use a condition as the end point. When the condition is true, the sequence ends. In this case, it's just a numerical comparison:

<pre class="brush:plain">
> ( 1 ... * > 15 ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
</pre>

And, if I don't want to element that ends the sequence, I exclude it:

<pre class="brush:plain">
> ( 1 ...^ * > 15 ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
</pre>

I can have a block at the end, and I can exclude the value that makes the block true:

<pre class="brush:plain">
> ( 1 ... -> $a { $a > 15 } ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
> ( 1 ...^ -> $a { $a > 15 } ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
</pre>

But, the block can be anything that I like. I can terminate the sequence after a certain time passes:

<pre class="brush:plain">
> ( 1 ... -> $a { state $t = now; now > $t + 0.01 } ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
> ( 1 ... -> $a { state $t = now; now > $t + 0.02 } ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)
> ( 1 ... -> $a { state $t = now; now > $t + 0.06 } ).list
(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 ...)
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2016-11-18 09:51:59</wp:post_date>
  <wp:post_date_gmt>2016-11-18 09:51:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-3-inclusive-and-exclusive</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="ranges"><![CDATA[Ranges]]></category>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>136</wp:comment_id>
    <wp:comment_author><![CDATA[mscha]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0983:8781:0001:a402:ec2c:2d2d:09e8</wp:comment_author_IP>
    <wp:comment_date>2016-11-25 17:29:43</wp:comment_date>
    <wp:comment_date_gmt>2016-11-25 17:29:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It might be worth mentioning the shortcut ^$n for 0..^$n.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480094983.948601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480118326.323523;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #4: The Hamming Sequence and hyper-operators</title>
  <link>http://www.learningraku.com/2016/11/19/quick-tip-4-the-hamming-sequence-and-hyper-operators/</link>
  <pubDate>Sat, 19 Nov 2016 06:04:10 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=76</guid>
  <description/>
  <content:encoded><![CDATA[The Hamming Sequence shows up in <a href="http://web.cecs.pdx.edu/~cs410aph/Lectures/Smalltalk%20II/Dijkstra%20on%20Hamming's%20Problem.pdf">programming exercises</a>. It's the sequence of numbers that have only 2, 3, or 5 as divisors. The trick is to generate them in ascending order. Dijkstra figured it out, but he cheated a bit by restraining his problem to the first 1,000 values. Some people have a pre-occupation with programs that finish. <!--more-->

Dijkstra figured this out. Remember the elements in the list. Keep a set of indices to remember which elements in the list already have their multiples in the list. To get the next element in the sequence, try the next multiple for each factor. Take the least one and add it to the list. Increment the indices for the factors that produced a value less than or equal to the value just added. That's the next index to try for that factor.

In Perl 6 (or many other langauges), a direct translation of that might look like this:

<pre class="brush:plain">
sub get_sequence { my $seq := 1, { dijkstra() } ... *  }

sub MAIN ( $number = 30 ) {
	my $seq = get_sequence;

	say $seq[^$number];
	}

sub dijkstra {
	state @h = <1>;
	state ( $i, $j, $k ) = < 0 0 0 >;

	@h.push( min( 2*@h[$i], 3*@h[$j], 5*@h[$k] ) );

	$i++ if 2*@h[$i] <= @h[*-1];
	$j++ if 3*@h[$j] <= @h[*-1];
	$k++ if 5*@h[$k] <= @h[*-1];

	return @h[*-1];
	}
</pre>

I wrote about lazy sequences in <a href="/2016/11/16/quick-tip-1-user-defined-infinite-sequences/">User-defined infinite sequences</a> and the <code>MAIN</code> in <a href="/2016/01/10/perl-6-modulinos-are-even-easier/">Perl 6 modulinos are even easier</a>. The <code>*-1</code> in the <code>@h</code> subscript gets me the last element. Perl 6 doesn't count backward, but a <code>*</code> (the <a href="https://docs.perl6.org/type/Whatever">Whatever</a> thingy) in the subscript gets the number of elements in the array. From that I subtract 1 to get the last index.

But, I can do better. First, that example hard-coded the 2, 3, and 5. There are other "smooth numbers" that factor only into powers of small prime numbers.

So, I'll put the factors into their own array. Later I can convert that to a configurable parameter. I might want different factors, or a different number of factors.

<pre class="brush:plain">
sub dijkstra {
	state @h       = <1>;
	state @factors = < 2 3 5 >;
	state @indices = < 0 > xx @factors;

	@h.push( min( @h[ @indices ] <<*>> @factors ) );

	...;

	return @h;
	}
</pre>

So, I'll create an array of indices that has the same length of factors. The <a href="https://docs.perl6.org/language/operators#infix_xx">list replication</a>, <code>xx</code> does that for me. The array <code>@factors</code>, in numeric context, is the number of elements.

Then I use one of my favorite features of Perl, the hyper-operator. Let me break out that bit from the code:

<pre class="brush:plain">
@h[ @indices ] <<*>> @factors
</pre>

In the first example, I needed to multiply individual elements in <code>@h</code> with a list of factors (even though I hard-coded them). That's what the <a href="https://docs.perl6.org/language/operators#Hyper_Operators">hyper-operators</a> do. It applies the operator between the angle brackets to corresponding elements of each list. In this case, it multiplies the first elements of each list, then the second, and so on. The grand result of is the list of results. I can put just about any operator in there that I like (and in a moment I'll do something fancy with that).

In this case, I've used <code>@indices</code> to create an array slice of the elements in <code>@h</code> that still need a multiple. I hyper-multiply that with
<code>@factors</code>. It's the same thing as this line from the first example:

<pre class="brush:perl">
( 2*@h[$i], 3*@h[$j], 5*@h[$k] )
</pre>


But, this stuff won't work with the next bit because I got rid of the  <code>$i</code>, <code>$j</code>, and <code>$k</code> variables. Those values are now in the <code>@indices</code>. so I've used the <code>...</code> <a href="https://docs.perl6.org/language/operators#listop_...">stub operator</a> (or, the "yada yada"). That compiles, but Perl 6 dies when it executes it. I use it as a placeholder for work I still need to do.

Let's build up the next part. I need to increment the indices for the factors that produce sequence elements that are the same or less than the last value I stored in <code>@h</code>. In the first example I had three lines of code with repeated structure.

First, I need to figure out which indices I want to increment. Those are the ones where element in @h at that index is less than or equal to the last element in @h. Remember, some multiples will overlap when they have common factors. The number 10 is in the sequence because 5 is in the sequence and 5*2 is 10. But, it's also in the sequence because 2 is in the sequence and 2*5 is 10.

I can use the same code I just used to get the products:

<pre class="brush:perl">
( @h[ @indices ] <<*>> @factors )
</pre>

Now, I need to know which of those products are less than the last element of @h. I can use the hyper-operator again, but this time with
the <code>&lt;=</code> comparator:

<pre class="brush:perl">
( @h[ @indices ] «*» @factors ) «<=» @h[*-1]
</pre>

But, I had to do something else here. When I put the <code>&lt;=</code> between the ASCII angle brackets, all sorts of parser confusion ensues. But, Perl 6 has a way around this by using fancy Unicode characters. The « and » characters do the same job, and since they aren't the ASCII version, the parser doesn't have a chance to confuse which angle brackets belong to what. Perl 6 calls the ASCII versions <a href="https://docs.perl6.org/language/unicode_texas">"Texas-style"</a>. For the non-Americans, Texas is a state in the U.S. that thinks they are the biggest. They're okay. They invented <a href="ninfas on navigator">fajitas</a>, Tex-Mex, and <a href="https://franklinbarbecue.com/menu/">Franklin BBQ</a>, so they can say that. The ASCII quotes are bigger, so <a href="http://code.activestate.com/lists/perl6-language/27015/">Larry calls them "Texas"</a>. You may know about "Jersey barriers" used to divide roads, but there are larger versions called "Texas barriers" as well as the largest version called Alaska Barriers. Don't tell Damian Conway or he might come up with even larger quoting mechanisms! But back to Perl 6.

The result of those two hyper-operators is a list of True and False values. The position of the Boolean value indicates whether I should increment the index in the same position. Now that I'm that far, I can use a third hyper, this time with binary addition, to numerically add that list of Boolean values to <code>@indices</code>:

<pre class="brush:plain">
@indices «+=» ( ( @h[ @indices ] «*» @factors ) «<=» @h[*-1] )
</pre>

Putting that together, I have something with no <code>if</code> statements:

<pre class="brush:plain">
sub dijkstra () {
	state @h       = < 1 >;   # and so could this!
	state @factors = <2 3 5>; # this could be a parameter
	state @indices = < 0 > xx @factors;

	# add the next least multiple. This is the next number
	# in the sequence.
	@h.push( min( @h[ @indices ] «*» @factors ) );

	# Adjust the indices for the factor that were in the next number
	# more than one of these can be true!
	# For instance, 10 is both 5 * 2 and 2 * 5.
	@indices «+=» ( ( @h[ @indices ] «*» @factors ) «<=» @h[*-1] );

	@h[*-1];
	}
</pre>

This generates the next value in the Hamming sequence. But, I'm not done yet. The @h array holds the entire sequence even after I don't need some of the elements. I should get rid of those. Once all the indices are at least 1, I don't need the zeroth element anymore. I should get rid of it:

<pre class="brush:plain">
sub dijkstra () {
	state @h       = < 1 >;   # and so could this!
	state @factors = <2 3 5>; # this could be a parameter
	state @indices = < 0 > xx @factors;

	# add the next least multiple. This is the next number
	# in the sequence.
	@h.push( min( @h[ @indices ] «*» @factors ) );

	# Adjust the indices for the factor that were in the next number
	# more than one of these can be true!
	# For instance, 10 is both 5 * 2 and 2 * 5.
	@indices «+=» ( ( @h[ @indices ] «*» @factors ) «<=» @h[*-1] );

	# remove elements we don't need any more and adjust indices
	# the least element should be 1. If the index is 1, the number
	# in @h[0] already has multiples of @factors in the sequence
	if all( @indices ) > 0 {
		@h.shift;
		@indices>>--;
		}

	@h[*-1];
	}
</pre>

In the last bit of code, I just the <code>all</code> <a href="https://docs.perl6.org/type/Junction">Junction</a> to check  that every index is greater than 0. If so, I take the first element off <code>@h</code>. But, when I do that, I need to adjust all of the indices down one. The hyper-operators work for unary operators (such as the <a href="https://docs.perl6.org/language/operators#postfix_--">auto-decrement</a> <code>--</code>). This time there's one set of quotey things, with the alligator mouth toward the list thingy.

<iframe width="560" height="315" src="https://www.youtube.com/embed/M6Efzu2slaI" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>76</wp:post_id>
  <wp:post_date>2016-11-19 06:04:10</wp:post_date>
  <wp:post_date_gmt>2016-11-19 06:04:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-4-the-hamming-sequence-and-hyper-operators</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="hyperoperators"><![CDATA[Hyperoperators]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #6: Data dumping is built into Rakudo</title>
  <link>http://www.learningraku.com/2016/11/21/quick-tip-6-data-dumping-is-built-in/</link>
  <pubDate>Mon, 21 Nov 2016 00:38:11 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=98</guid>
  <description/>
  <content:encoded><![CDATA[I've often wished that Perl 5's <a href="http://www.metacpan.org/module/Data::Dumper">Data::Dumper</a> was built into the language. I often have statements like: <!--more-->

<pre class="brush:perl">
#!perl5
Dumper( @array ); use Data::Dumper;
</pre>

Or, if I'm playing with <a href="http://www.metacpan.org/module/Mojolicious">Mojolicious</a>:

<pre class="brush:perl">
#!perl5
use Mojo::Util qw(dumper);
dumper( @array );
</pre>

Rakudo (one of the Perl 6 implementations) has this baked in as <a href="https://docs.perl6.org/routine/dd">dd</a>. This is something extra beyond the Perl 6 specification. Here I drop into the REPL:

<pre class="brush:plain">
$ perl6
> my @array = 'a' .. 'g'
[a b c d e f g]
> dd @array
Array @array = ["a", "b", "c", "d", "e", "f", "g"]
</pre>

There is also the gist and perl methods. The first gives you output designed for people and the second shows the actual Perl interpretation:

<pre class="brush:plain">
> @array.gist
[a b c d e f g]
> @array.perl
["a", "b", "c", "d", "e", "f", "g"]
</pre>

If that's not enough for you, there's the <a href="https://modules.perl6.org/">Data::Dump</a> module that can do many other things, including colorizing the output.

<div align="image center">
<div>
<img src="/images/data-dump-color-output.png" height="349" width="500" />
<p class="caption"></p>
</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>98</wp:post_id>
  <wp:post_date>2016-11-21 00:38:11</wp:post_date>
  <wp:post_date_gmt>2016-11-21 00:38:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-6-data-dumping-is-built-in</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="post_tag" nicename="rakudo"><![CDATA[rakudo]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>137</wp:comment_id>
    <wp:comment_author><![CDATA[mscha]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0983:8781:0001:a402:ec2c:2d2d:09e8</wp:comment_author_IP>
    <wp:comment_date>2016-11-26 13:49:15</wp:comment_date>
    <wp:comment_date_gmt>2016-11-26 13:49:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You don't really have to know about the `gist` method: `say $something` actually prints `$something.gist` followed by a newline.  (If you want output for computers instead of people, use `put`.)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480168155.1610079;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>179</wp:comment_id>
    <wp:comment_author><![CDATA[Alexander Hartmaier (abraxxa)]]></wp:comment_author>
    <wp:comment_author_email>abraxxa@cpan.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.31.90.40</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 09:50:27</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 09:50:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sounds like there are, again, many ways to do the same thing which makes it hard for newcomers (and we are newcomers, even from Perl 5) to know which one to use.
What's the preferred way? Has dd an advantage over .gist?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>137</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481017827.6541829;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481024688.8574741;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>182</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 11:47:19</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 11:47:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[To talk about advantages, you have to know the goal. <code>.gist</code> is Perl 6, <code>dd</code> is a Rakudo enhancement. Try them and chose the one that you like.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>179</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481024839.4778011;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>234</wp:comment_id>
    <wp:comment_author><![CDATA[Alexander Hartmaier (abraxxa)]]></wp:comment_author>
    <wp:comment_author_email>abraxxa@cpan.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.31.90.40</wp:comment_author_IP>
    <wp:comment_date>2016-12-16 11:20:18</wp:comment_date>
    <wp:comment_date_gmt>2016-12-16 11:20:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Really? I didn't know that Rakudo implements more than 6c.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>182</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481887218.8177791;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #9: User-defined data types</title>
  <link>http://www.learningraku.com/2016/11/24/quick-tip-8-user-defined-data-types/</link>
  <pubDate>Thu, 24 Nov 2016 02:10:50 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=102</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has <a href="http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/">"gradual typing"</a>. I can constrain values when I like, and let them run free otherwise. User-defined data types are one of the Perl 6 features that excite me the most. I can define what sort of value I can put in a container thingy, and I can define my own types any way that I like. <!--more-->

First, I'll show a couple of built-in types. I can constrain an array to contain only <a href="https://docs.perl6.org/type/Int">Int</a> values. I place the type between the declarator and the variable name. If every value I want to store is that type, I have no problem. If there's a non-decimal integer string (say, a hex digit), I have a problem:

<pre class="brush:plain">
$ perl6
To exit type 'exit' or '^D'
> my Int @array = < 1 2 3 >
[1 2 3]
> my Int @other_array = < 8 9 a b >
Type check failed in assignment to @other_array; expected Int but got Str ("a")
</pre>

This means I can constrain some thing at the point I store them in the variable instead of checking a type-agnostic array every time I use it somewhere else.

Perl 6 already comes with some classes. The <code>Int</code> type is a platform-agnostic number that doesn't depend on the local ideas of integers. I could use the lowercase version, <code>int</code>, to specify a native type. Those are limited to the storage types on the platform:

<pre class="brush:plain">
> my Int $j = 99999999999999999999
99999999999999999999
> my int $j = 99999999999999999999
Cannot unbox 67 bit wide bigint into native integer
</pre>

I can make my own type. I can create my own classes and then use those class names as types:

<pre class="brush:plain">
> class Butterfly {}
(Butterfly)
> my Butterfly $thingy1 = Butterfly.new
Butterfly.new
> my $animal = Butterfly.new
Butterfly.new
> $animal.WHAT
(Butterfly)
> my Butterfly $thingy2 = $animal
Butterfly.new
> my Butterfly $thingy3 = 137
Type check failed in assignment to $thingy3; expected Butterfly but got Int (137)
</pre>

Check that out! I didn't put anything in the class, but Perl 6 provided the <code>new</code> constructor for me. I'll write about that some other time.

I can create subtypes based on those that already exist. First, the
value has to satisfy the base type, then the extra constraint I put on it. I use subset to start it off and a where clause with some code:

<pre class="brush:plain">
> subset Vowel of Str where *.lc ∈ set( &lt;a e i o u y m> )
(Vowel)
> my Vowel $s = 'A';
A
> my Vowel $s = 'e'
e
> my Vowel $s = 'j'
Type check failed in assignment to $s; expected Vowel but got Str ("j")
</pre>

In this case, I created a new type called <code>Vowel</code> based on <a href="https://docs.perl6.org/type/Str.html">Str</a>. The value has to be some sort of string, so thats a start, but I constrain it to be a string in a set (which I wrote about yesterday in <a href="/2016/11/23/quick-tip-8-perl-6-sets/">Perl 6 sets</a>).

Zoffix has a very good post, <a href="http://blogs.perl.org/users/zoffix_znet/2016/04/perl-6-types-made-for-humans.html">"Perl 6 Types: Made for Humans"</A> on the same thing, and Brad Clawsie created <A href="https://github.com/bradclawsie/Subsets-Common">Subsets::Common</a> to comprise interesting types. A  <a href="http://softwareengineering.stackexchange.com/q/222555/103630">StackExchange question on gradual typing</a> is very interesting as well, although it has virtually nothing to do with Perl 6. Jonathan
Worthington has an <a href="http://www.jnthn.net/papers/2008-yapc-eu-perl6types.pdf">older presentation on types</a> from YAPC::EU 2008.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>102</wp:post_id>
  <wp:post_date>2016-11-24 02:10:50</wp:post_date>
  <wp:post_date_gmt>2016-11-24 02:10:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-8-user-defined-data-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="types"><![CDATA[Types]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #8: Perl 6 sets</title>
  <link>http://www.learningraku.com/2016/11/23/quick-tip-8-perl-6-sets/</link>
  <pubDate>Wed, 23 Nov 2016 05:26:37 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=104</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has proper sets and set-like types, along operators to do proper set operations. <!--more-->

<ul>
<li><a href="https://docs.perl6.org/type/Set">Set</a> - a collection of unique thingys
<li><a href="https://docs.perl6.org/type/Bag">Bag</a> - a collection of unique thingys, but weighted for the count of the number of times something is put the bag
<li><a href="https://docs.perl6.org/type/Mix">Mix</a> - a bag that allows fractional weights
</ul>

These are immutable types. Once you make them, that's it. Each has a <code>*Hash</code> version that allows you to change the members, but I'll ignore those.

<pre class="brush:plain">
$ perl6
> my $set = set( 1, 2, 3, 4 )
set(4, 3, 1, 2)
> 4 ∈ $set                      # member of
True
> 5 ∈ $set                      # member of
False
> 5 ∉ $set                      # not member of
True
> set( 2, 3 ) ⊆ $set            # subset of
True
> set( 2, 6 ) ⊆ $set            # subset of
False
</pre>

A set is a more natural way to see if a value exists in a list of values. You might each for a hash and use <code>:exists</code> to check for the key, but a set will do that (even though that's what
Perl 6 sets are doing for you behind the scenes for now):

<pre class="brush:plain">
my $set  = set( &lt;a b c d> );
my $item = 'h';
say "$item is in set" if $item ∈ $set;
</pre>


Perl 6 has the operators to turn two lists into a set:

<pre class="brush:plain">
$ perl6
> ( 1, 2, 3 ) ∪ ( 4, 5 )        # union
set(5, 4, 3, 1, 2)
> ( 1, 2, 4 ) ∩ ( 1,  2, 3 )    # intersection
set(1, 2)
> ( 1, 2, 4 ) ∖ ( 1, 2, 3 )     # difference
set(4)
> ( 1, 2, 4 ) ⊖ ( 1, 2, 3 )     # symmetric difference
set(4, 3)
</pre>

So far I've used the fancy Unicode characters that you'd see in set math, but each of these have <a href="https://docs.perl6.org/language/unicode_texas">Texas (ASCII) versions</a> too:

<table>
<tr>
<th>Texas</th>
<th>Fancy</th>
<th>Codepoint (hex)</th>
<th>Operation</th>
</tr>

<tr><td>(elem)</td> <td>∈</td><td>U+2208</td><td>member of, <code>$a ∈ $set</code> or <code>$a (elem) $set</code></td></tr>
<tr><td>!(elem)</td><td>∉</td><td>U+2209</td><td>not a member of, <code>$a ∉ $set</code> or <code>$a !(elem) $set</code></td></tr>
<tr><td>(cont)</td> <td>∋</td><td>U+220B</td><td>contains, </td></tr>
<tr><td>!(cont)</td><td>∌</td><td>U+220C</td><td>does not contain</td></tr>
<tr><td>(&lt;=)</td><td>⊆</td><td>U+2286</td><td>subset of or equal to, </td></tr>
<tr><td>!(&lt;=)</td><td>⊈</td><td>U+2288</td><td>not subset of nor equal to, </td></tr>
<tr><td>(&lt;)</td> <td>⊂</td><td>U+2282</td><td>subset of</td></tr>
<tr><td>!(&lt;)</td> <td>⊄</td><td>U+2284</td><td>not subset of</td></tr>
<tr><td>(>=)</td>   <td>⊇</td><td>U+2287</td><td>superset of or equal to, </td></tr>
<tr><td>!(>=)</td>   <td>⊉</td><td>U+2289</td><td>not superset of nor equal to, </td></tr>
<tr><td>(>)</td>    <td>⊃</td><td>U+2283</td><td>superset of</td></tr>
<tr><td>!(>)</td>    <td>⊅</td><td>U+2285</td><td>not superset of</td></tr>
<tr><td>(&gt;+)</td><td>≼</td><td>U+227C</td><td>baggy superset</td></tr>
<tr><td>!(>+)</td>   <td>≽</td><td>U+227D</td><td>not baggy superset</td></tr>

</table>

There are operators that return sets from two lists:

<table>
<tr>
<th>Texas</th>
<th>Fancy</th>
<th>Codepoint (hex)</th>
<th>Operation</th>
</tr>
<tr><td>(|)</td><td>∪</td><td>U+222A</td><td>union</td></tr>
<tr><td>(&)</td><td>∩</td><td>U+2229</td><td>intersection</td></tr>
<tr><td>(-)</td><td>∖</td><td>U+2216</td><td>difference</td></tr>
<tr><td>(^)</td><td>⊖</td><td>U+2296</td><td>symmetric difference</td></tr>
<tr><td>(.)</td><td>⊍</td><td>U+228D</td><td>baggy multiplication</td></tr>
<tr><td>(+)</td><td>⊎</td><td>U+228E</td><td>baggy addition</td></tr>

</table>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>104</wp:post_id>
  <wp:post_date>2016-11-23 05:26:37</wp:post_date>
  <wp:post_date_gmt>2016-11-23 05:26:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-8-perl-6-sets</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="sets"><![CDATA[Sets]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[quick-tip-7-perl-6-sets]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #7: Texas and Unicode things</title>
  <link>http://www.learningraku.com/2016/11/22/quick-tip-7-texas-and-unicode-things/</link>
  <pubDate>Tue, 22 Nov 2016 05:33:37 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=112</guid>
  <description/>
  <content:encoded><![CDATA[<i>["Texas" as a cute name has been changed to the less offensive and more prosaic "ASCII"]</i>

Perl 6 is more than Unicode "aware"—it reaches into the Unicode Character Database to use appropriate and meaningful characters. There use to be a joke that the only thing that kept Perl 5 from expanding was the lack of unused punctuation keys. That's not a problem anymore. <!--more-->

But, for most Unicode thingys, there is an ASCII version. That version is probably multiple characters, so it's larger than the Unicode version. And, since it's a larger, super-sized version, we'll call it the "Texas" version. The Perl 6 docs <a href="https://docs.perl6.org/language/unicode_texas#Other_acceptable_single_codepoints">map the Unicode to ASCII versions</a>.

I wrote a small command-line program to convert between the two. It's not very sophisticated and I plan on improving it later. I'd especially like to look up things based on what they do. For instance,  search for "subset" and get subset operators. Another data column with a description would be nice. And, reading all this from a file. Although I've taken the data from a <a href="https://docs.perl6.org/language/unicode_texas#Other_acceptable_single_codepoints">single page in the Perl 6 docs</a>, there are many other things I could add (such as the quoting stuff). I've also saved this in my <a href="https://gist.github.com/briandfoy/619638701f38817387f3e5d22d6dab12">unicode2texas.p6 gist</a>.

<pre class="brush:plain">
use v6;

# https://docs.perl6.org/language/unicode_texas#Other_acceptable_single_codepoints
# https://gist.github.com/briandfoy/619638701f38817387f3e5d22d6dab12

my %hash;

BEGIN {  # Phasers on!
my @table = qw{
	«	U+00AB	<<
	»	U+00BB	>>
	×	U+00D7	*
	÷	U+00F7	/
	−	U+2212	-
	∘	U+2218	o
	≅	U+2245	=~=
	π	U+03C0	pi
	τ	U+03C4	tau
		U+1D452	e
	∞	U+221E	Inf
	…	U+2026	...
	‘	U+2018	'
	’	U+2019	'
	‚	U+201A	'
	“	U+201C	"
	”	U+201D	"
	„	U+201E	"
	｢	U+FF62	Q//
	｣	U+FF63	Q//
	⁺	U+207A	+
	⁻	U+207B	-
	¯	U+00AF	-
	⁰	U+2070	**0
	¹	U+2071	**1
	²	U+2072	**2
	³	U+2073	**3
	⁴	U+2074	**4
	⁵	U+2075	**5
	⁶	U+2076	**6
	⁷	U+2077	**7
	⁸	U+2078	**8
	⁹	U+2079	**9
	∘	U+2218	o
	∅	U+2205	set()
	∈	U+2208	(elem)
	∉	U+2209	!(elem)
	∋	U+220B	(cont)
	∌	U+220C	!(cont)
	⊆	U+2286	(<=)
	⊈	U+2288	!(<=)
	⊂	U+2282	(<)
	⊄	U+2284	!(<)
	⊇	U+2287	(>=)
	⊉	U+2289	!(>=)
	⊃	U+2283	(>)
	⊅	U+2285	!(>)
	≼	U+227C	(<+)
	≽	U+227D	(>+)
	∪	U+222A	(|)
	∩	U+2229	(&)
	∖	U+2216	(-)
	⊖	U+2296	(^)
	⊍	U+228D	(.)
	⊎	U+228E	(+)
	};

while ( @table #`(I could also read from a file) ) {
	# I'd really like a @table.shift(3);
	my ( $unicode, $codepoint, $texas ) = @table.splice( 0, 3 );
	# I don't particularly like the two way hash here.
	%hash{ $unicode, $texas } = %(
		unicode   => $unicode,
		texas     => $texas,
		codepoint => $codepoint
		) xx *;  # list replication
	}
}

# I don't really need a multi here, but I'm playing with it anyway.
# multi implies sub, so I could have said "multi sub MAIN"
multi MAIN( Str $s where { %hash{$_}:exists and .substr(0, 1).ord > 0xAA } ) {
	say "Running the Unicode version for $s";
	show( %hash{$s} );
	}

multi MAIN( Str $s where { %hash{$_}:exists and .substr(0, 1).ord <= 0xAA } ) {
	say "Running the Texas version for $s";
	show( %hash{$s} );
	}

sub show ( %h ) {
	say sprintf "Unicode: %s\nTexas: %s", %h&lt;unicode texas>,
	}
</pre>

Some notes on the program, which I didn't spend much time thinking about. In the <code>while</code> I put an <a href="https://docs.perl6.org/language/syntax#Multi-line_/_embedded_comments">embedded comment</a> <code>#`(...)</code>. I think I want to create a data file to hold all of this. 

I use a <a href="https://docs.perl6.org/language/functions#Multi-dispatch">multi to define the same subroutine name several times but with different signatures</a>. Inside each, I specify that they take a <a href="https://docs.perl6.org/type/Str">Str</a> but I constrain them with <a href="https://docs.perl6.org/type/Signature#Type_Constraints">where</a>. Those code blocks get the parameter as <code>$_</code> (or some other ways). That <code>$_</code> is the default "topic",. When I neglect to type out the object in <code>.substr(0, 1)</code>, Perl 6 uses the topic. 

And, I do a few hash slices here, but never change the sigil.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>112</wp:post_id>
  <wp:post_date>2016-11-22 05:33:37</wp:post_date>
  <wp:post_date_gmt>2016-11-22 05:33:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-7-texas-and-unicode-things</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="command-line-program"><![CDATA[Command Line Program]]></category>
  <category domain="post_tag" nicename="gist"><![CDATA[gist]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>146</wp:comment_id>
    <wp:comment_author><![CDATA[Christopher Bottoms]]></wp:comment_author>
    <wp:comment_author_email>christopher.bottoms@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2610:00e0:a010:0304:3dad:516a:6807:c6d8</wp:comment_author_IP>
    <wp:comment_date>2016-11-29 20:50:01</wp:comment_date>
    <wp:comment_date_gmt>2016-11-29 20:50:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This utility works great in a shell that can handle Unicode!

You can also use a `for` loop to iterate over that array, by the way:

<pre class="brush:plain">
    for @table -&gt; $unicode, $codepoint, $texas
    {
            # I don't particularly like the two way hash here.
            %hash{ $unicode, $texas } = %(
                    unicode   =&gt; $unicode,
                    texas     =&gt; $texas,
                    codepoint =&gt; $codepoint
                    ) xx *;
            }
    }
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480452601.7723179;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480456656.5556309;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>191</wp:comment_id>
    <wp:comment_author><![CDATA[JJ]]></wp:comment_author>
    <wp:comment_author_email>jjmerelo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://jj.github.io</wp:comment_author_url>
    <wp:comment_author_IP>83.38.223.60</wp:comment_author_IP>
    <wp:comment_date>2016-12-08 11:04:04</wp:comment_date>
    <wp:comment_date_gmt>2016-12-08 11:04:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Is there some direct way to convert the Texas representation to the Unicode code point? I have tried quoting + .perl like this:

<pre class="brush:plain">
    say .perl
</pre>

but does not work, obviously.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481195044.742069;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481195764.2522621;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>192</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-08 11:39:02</wp:comment_date>
    <wp:comment_date_gmt>2016-12-08 11:39:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Are you trying to let P6 parse the code you wrote with Texas quotes and then deparse it with the fancier versions? I don't know of a way to do that.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>191</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481197142.9092481;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1127</wp:comment_id>
    <wp:comment_author><![CDATA[me]]></wp:comment_author>
    <wp:comment_author_email>me@me.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2600:1700:50e1:800:5ded:c041:1019:4a9</wp:comment_author_IP>
    <wp:comment_date>2020-08-31 18:43:01</wp:comment_date>
    <wp:comment_date_gmt>2020-08-31 18:43:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I find nothing offensive in using the term "Texas" to describe character combinations that ASCII cannot handle as an individual codepoints, therefore a combination of ASCII characters must be used.

Changing "Texas" to "ASCII" is an exercise in obfuscation.]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #10: Syntax highlighting Perl 6</title>
  <link>http://www.learningraku.com/2016/11/25/quick-tip-10-syntax-highlighting-perl-6/</link>
  <pubDate>Fri, 25 Nov 2016 08:33:46 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=118</guid>
  <description/>
  <content:encoded><![CDATA[So far, my quick tips haven't been that quick. I've gotten mired in the tarpit of tracking down weird behaviors and whatnot. Here's a truly quick tip. If you have more info on editor syntax highlighting for Perl 6, leave a comment. <!--more-->

If you're on StackOverflow and you want your code highlighted as Perl 6, use the HTML comment <code>&lt;!-- language-all: lang-perl6 --></code>. See <a href="http://stackoverflow.com/q/40814933/2766176">what Brad Gilbert did with one of my questions</a>. They use <A href="https://github.com/google/code-prettify">Google Prettify</a>, which does a job of the usual Google quality.

David Farrell explains how to activate Perl 6 syntax in his Perltricks article <a href="https://perltricks.com/article/194/2015/9/22/Activating-Perl-6-syntax-highlighting-in-Vim/">Activating Perl 6 syntax highlighting in Vim</a>. And, he's also supporting the <A href="https://www.kickstarter.com/projects/1422827986/learning-perl-6">Kickstarter campaign</a> by offering two more backers the chance to sponsor a Perl 6 article on Perltricks.

See the <a href="https://github.com/vim-perl/vim-perl">vim-perl</A> Github project, or the <a href="https://github.com/hinrik/perl6-mode">perl6-mode</a> Github project for emacs.

The Atom editor <a href="https://atom.io/packages/language-perl6fe">supports Perl 6</a>. It doesn't seem that helpful though.

The <a href="http://padre.perlide.org">Padre editor</A> does too. It even has a butterfly for its logo.

I started a <a href="/2016/01/10/a-perl-6-bbedit-codeless-language-module/">BBEdit Codeless Language Module</a>, but it's so deficient it's hardly worth mentioning.

One of Perl 6's goals for improvement over Perl 5 was a much easier way to parse the a program without being the language itself. There's an <A href="https://github.com/perl6/std">actual grammar</a>.

If you know of more stuff, leave a comment.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>118</wp:post_id>
  <wp:post_date>2016-11-25 08:33:46</wp:post_date>
  <wp:post_date_gmt>2016-11-25 08:33:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-10-syntax-highlighting-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="editing"><![CDATA[Editing]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #11: Number, Strings, and NumberString Allomorphs</title>
  <link>http://www.learningraku.com/2016/11/26/quick-tip-11-number-strings-and-numberstring-allomorphs/</link>
  <pubDate>Sat, 26 Nov 2016 09:11:40 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=121</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has a variety of ways to quote things (maybe too many), but they aren't all the same thing. The angle-bracket quote words, <code>&lt;...></code> isn't just <code>qw//</code> written with different characters. It tries to  guess what the words inside the brackets mean. That wasn't documented today, but <a href="https://github.com/perl6/doc/commit/fa0b8f643356a3db1e5e59fda4f153f48f90ee90">Zoffix has changed the docs</a> so now it does. <!--more-->

Start with <code>qw//</code>, the basic quotewords operators. It  grabs groups of non-whitespace characters and produces a list of those strings:

<pre class="brush:plain">
$ perl6
> qw{ a b c}.perl
("a", "b", "c")
> qw{ a b c}.WHAT
(List)
</pre>

This form doesn't care what the strings are. Every item comes out a string:

<pre class="brush:plain">
> qw{ a b 137}.perl
("a", "b", "137")
> qw{ a b 137}.WHAT
(List)
> qw{ a b 137}.[*-1].perl
"137"
> qw{ a b 137}.[*-1].WHAT
(Str)
</pre>

There's also a more general quote operator, <code>Q</code>, that can take a <code>:w</code> adverb to do the same thing:

<pre class="brush:plain">
> Q:w{ a b 137}.perl
("a", "b", "137")
</pre>

This is mostly what I expect. Everything in the quote words operators come out as the same sort of thing. But note, just because I expect something doesn't mean it's reality. You'll be much happier with Perl 6 if you don't expect it to act like some other language named Perl.

<h3>The angle bracket quote words</h3>

The angle bracket form, however, tries to guess what the strings mean. It uses <a href="https://docs.perl6.org/routine/val">val</a> to turn strings that look like numbers into an <i>allomorph</i>. That's something that can look different but retains its meaning. The idea of the digit 1 is the same as the string "1" and the string "one", even if Perl 6 decides to represent them as different classes.

<table>

<th>
<tr><td><a href="https://docs.perl6.org/type/IntStr">IntStr</a></td><td>"137"</td><td>Whole numbers</td></tr>
<tr><td><a href="https://docs.perl6.org/type/NumStr">NumStr</a></td><td>"1.37e2"</td><td></td></tr>
<tr><td><a href="https://docs.perl6.org/type/RatStr">RatStr</a></td><td>"1/137"</td><td>Rational numbers</td></tr>
<tr><td><a href="https://docs.perl6.org/type/ComplexStr">ComplexStr</a></td><td>"137+0i"</td><td>Complex numbers</td></tr>
<tr><td><a href="https://docs.perl6.org/type/xStr">Str</a></td><td>"abc"</td><td>Everything else</td></tr>
</th>

First, look at some values in the Perl 6 REPL. I use <a href="https://docs.perl6.org/routine/val">val</a> on a bunch of strings and then call <code>WHAT</code> to see what <a href="https://docs.perl6.org/routine/val">val</a> produced:

<pre class="brush:plain">
$ perl6
> val( "137" ).WHAT
(IntStr)
> val( "1e37" ).WHAT
(NumStr)
> val( "1/137" ).WHAT
(RatStr)
> val( "137+4i" ).WHAT
(ComplexStr)
> val( "abc" ).WHAT
(Str)
</pre>

Previously, the quote words didn't guess like this for us, but we can add the <code>:v</code> adverb (if you can find this in the docs, let me know so I can link to it):

<pre class="brush:plain">
$ perl6
> qw:v{ 137 1.37e2 137+0i 1/137 }.perl
(IntStr.new(137, "137"), NumStr.new(137e0, "1.37e2"), ComplexStr.new(<137+0i>, "137+0i"), RatStr.new(<1/137>, "1/137"))
</pre>

This is what the angle-bracket form of word quoting does ("documented" in <a href="https://design.perl6.org/S02.html#Allomorphic_value_semantics">S02: Allomorphic value semantics</A>:

<pre class="brush:plain">
> < 137 1.37e2 137+0i 1/137 >.perl
(IntStr.new(137, "137"), NumStr.new(137e0, "1.37e2"), ComplexStr.new(<137+0i>, "137+0i"), RatStr.new(<1/137>, "1/137"))
</pre>

The <a href="https://docs.perl6.org/routine/val">val</a> can tell you if Perl 6 thinks a string is a number and fail otherwise. Give it the <code>:val-or-fail</code> adverb and you might get an exception:

<pre class="brush:plain">
> val( "123Camelia", :val-or-fail )
Cannot convert string to number: trailing characters after number in '123⏏Camelia' (indicated by ⏏)
</pre>

If you're expecting the lax string to number conversion of Perl 5, you're out of luck.

<pre class="brush:plain">
> "123Camelia" + 0
Cannot convert string to number: trailing characters after number in '123⏏Camelia' (indicated by ⏏)
</pre>

<a href="https://docs.perl6.org/routine/val">val</a> returns the starting string when it can't convert it:

<pre class="brush:plain">
> my $s = val( "123Camelia" )
123Camelia
> $s.WHAT
(Str)
</pre>

With <code>:val-or-fail</code>, you get a <a href="https://docs.perl6.org/type/Failure">Failure</a> object back instead:

<pre class="brush:plain">
> my $s = val( "123Camelia", :val-or-fail )
Cannot convert string to number: trailing characters after number in '123⏏Camelia' (indicated by ⏏)
> $s.WHAT
(Failure)
</pre>

<h3>Digit strings that aren't numbers</h3>

This means, though, that if you have strings that are digits but shouldn't be numbers (i.e. strings that use digits to identify a thingy but for whom there is no algebra), then angle brackets aren't what you want. You wouldn't want to put postal codes in them, for instance. Or vehicle number plates. Those might be digits, but you wouldn't add or multiply them. That is, you wouldn't want to pass them
through <a href="https://docs.perl6.org/routine/val">val</a>:

<pre class="brush:plain">
my @zip_codes =   < 02199 02902 01614 94039 >; # not what you want
my @zip_codes = qw{ 02199 02902 01614 94039 }; # stays as strings
</pre>

If you've ever had to process postal code data that was incorrectly inserted, exported, or otherwise handled, you can appreciate this.

But, there are some times that you don't know if you need the number or string form. Perl 6 has signatures that can let it decide which subroutine or method to use in multiple dispatch.

Indeed, it's even difficult to justify putting most things into angle brackets because number things as strings already turn into the right thing with mathematical operators. You probably don't need Perl 6 to guess at these things for you ahead of time.

<h3>The case for lists of allomorphs</h3>

So what is the case for the angle brackets? You want to use them when
you want numbers to be either strings or numbers <i>types</i>. Some
things in Perl 6 can constrain the types of values they will accept. A subroutine signature might call for an <a href="https://docs.perl6.org/type/Failure">Int</a>:

<pre class="brush:plain">
sub do_something ( Int $i ) { ... }
</pre>

But, perhaps you've got a bunch of values of unknown origin or dubious parentage. The angle brackets leave strings as strings. It turns numbers and strings that look like numbers in allomorphs. The double angle brackets are for variable interpolation:

<pre class="brush:plain">
> my $a = '123';
123
> my $b = 'Butterfly'
Butterfly
> my $c = 321
321
> << $a $b $c >>.perl
(IntStr.new(123, "123"), "Butterfly", IntStr.new(321, "321"))
</pre>

Now, consider the case of constructing an argument list. You want the compactness that comes with the implied commas and quotes, but you need number-like strings:

<pre class="brush:plain">
sub int-or-str ( Int $i, Str $s, Rat $r ) { say "Hello" }

int-or-str( 1, 'Butterfly', 1/2 );
int-or-str( |< 1 Butterfly 1/2 > );
</pre>

In the first call, I make the argument list with commas and the types satisfy the signature for <code>int-or-str</code>. Everything works out.


If I use angle quotes (and turn the resulting List into an argument list (lowercase l) with the "turn that List into an argument list" operator (uppecase |)), it still works. The numberish things come out as <a href="https://docs.perl6.org/type/IntStr">IntStr</a> or <a href="https://docs.perl6.org/type/RatStr">RatStr</a>. Since <a href="https://docs.perl6.org/type/RatStr">RatStr</a> is both <a href="https://docs.perl6.org/type/Rat">Rat</a> and <a href="https://docs.perl6.org/type/Str">Str</a> under multiple inheritance, a RatStr</a> satifies either.

<h3>The stronger case for single things</h3>

The single thingy angle brackets is useful mostly for grouping when you don't a literal that may be constant folded (hence losing its type). Inside the angle brackets it's a number type:

<pre class="brush:plain">
> <1/137>.WHAT
(Rat)
</pre>

Wait a minute! That's not a stringy thing at all! But watch this:

<pre class="brush:plain">
> < 1/137 >.WHAT
(RatStr)
</pre>

Okay, that's weird. With no spaces it's just the number type. With some whitespace, it's the allomorph type.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>121</wp:post_id>
  <wp:post_date>2016-11-26 09:11:40</wp:post_date>
  <wp:post_date_gmt>2016-11-26 09:11:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-11-number-strings-and-numberstring-allomorphs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>155</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Legrady]]></wp:comment_author>
    <wp:comment_author_email>tom@TomLegrady.com</wp:comment_author_email>
    <wp:comment_author_url>http://which-dwarf-are-you.blogspot.ca/</wp:comment_author_url>
    <wp:comment_author_IP>199.198.223.104</wp:comment_author_IP>
    <wp:comment_date>2016-11-30 19:39:01</wp:comment_date>
    <wp:comment_date_gmt>2016-11-30 19:39:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[https://design.perl6.org/S02.html#Allomorphic_value_semantics
https://docs.perl6.org/language/glossary#Allomorph]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480534741.3452489;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480588340.254899;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #12: Unicode Helper Apps</title>
  <link>http://www.learningraku.com/2016/11/27/quick-tip-12-unicode-helper-apps/</link>
  <pubDate>Sun, 27 Nov 2016 10:26:02 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=124</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 uses fancy Unicode characters to do some of its work, but those don't show up on most keyboards. I like the Mac program <a href="https://earthlingsoft.net/UnicodeChecker/">UnicodeChecker</a>. I can search by name, code point, or I can paste a character. I find the one that I want, copy it, and paste it into source. The Windows program <a href="http://www.babelstone.co.uk/Software/BabelMap.html">BabelStine</A> looks similar. Leave me suggestions if you know something for your distro. <!--more-->

<div class="image align">
<div>
<img src="/images/unicode_checker.png" height="518" width="500" />
<p class="caption"> UnicodeChecker </p>
</div>
</div>

Or, you can write your own program. Here's one that takes codepoints and prints their characters (assuming that your terminal is already set up for UTF-8):

<pre class="brush:plain">
$ perl6 -e 'for @*ARGS { say chr(:16($_)) }' 2150 2153
⅐
⅓
</pre>

The <code>:16()</code> interprets its string argument as base 16. You can convert any base between 2 and 36 that way. 

I can have some command-line aliases:

<pre class="brush:plain">
alias u2char='perl6 -e "for @*ARGS { say chr(:16(\$_)) }"'
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>124</wp:post_id>
  <wp:post_date>2016-11-27 10:26:02</wp:post_date>
  <wp:post_date_gmt>2016-11-27 10:26:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-12-unicode-helper-apps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="editing"><![CDATA[Editing]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="unicode"><![CDATA[Unicode]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>142</wp:comment_id>
    <wp:comment_author><![CDATA[Grant McLean]]></wp:comment_author>
    <wp:comment_author_email>grant@mclean.net.nz</wp:comment_author_email>
    <wp:comment_author_url>http://www.mclean.net.nz/ucf/</wp:comment_author_url>
    <wp:comment_author_IP>101.98.47.59</wp:comment_author_IP>
    <wp:comment_date>2016-11-28 07:47:24</wp:comment_date>
    <wp:comment_date_gmt>2016-11-28 07:47:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've built a Unicode search tool at http://www.mclean.net.nz/ucf/ called the "Unicode Character Finder".

You can use it to search the character descriptions; paste in a character to find more information about it; explore related characters via the code chart; save characters in a "scratchpad" for easy recall later; compose and decompose characters between normal forms; share links to specific characters or search results.

Use the "Help" tab to find out how to drive it and to find links to other Unicode tools. Follow the github link to fork it and make it even better.

The Unicode Character Finder is a Javascript app that runs from static files (no AJAX backend) so you can run your own copy locally.  It uses a data file generated from the Unicode database (currently version 9.0.0) using a Perl(5) script. Enjoy :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480319244.053942;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480327508.923537;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Should I just call it P6? or v6?</title>
  <link>http://www.learningraku.com/2016/12/01/should-i-just-call-it-p6-or-v6/</link>
  <pubDate>Thu, 01 Dec 2016 11:23:26 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=135</guid>
  <description/>
  <content:encoded><![CDATA[I'm working on chapter that I need to turn in to O'Reilly and I keep typing "Perl 6". It's annoying. But, what else would I call it? I'm not looking to change the name, just the nickname in the book. <!--more-->

<iframe width="560" height="315" src="https://www.youtube.com/embed/DGtq1GlmaAw" frameborder="0" allowfullscreen></iframe>

I'm not annoyed because a previous language shares the name. No matter what I think that's a done deal. I'm more annoyed that it takes some much typing and is repetitive. In <A href="//www.learning-perl.com/">Learning Perl</a>, I often said things like "v5.24 does this" of "v5.10 did that" without saying the magic word. What if I said "v6"? For instance, the sentence, "In v6, the match operator immediately applies the pattern to $_." 

But, I think that also implies that it's a change from earlier versions. What about "P6"? It's the same thing. I could say "QP" for "Quite Perl 6" ;)

I'm talking about the language, not the implementation, so saying "Rakudo", "Rakudo Star", "R*" or the like aren't right.

And, when are we going to get an implementation named Camelia? ;)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>135</wp:post_id>
  <wp:post_date>2016-12-01 11:23:26</wp:post_date>
  <wp:post_date_gmt>2016-12-01 11:23:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>should-i-just-call-it-p6-or-v6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <category domain="category" nicename="editing"><![CDATA[Editing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>159</wp:comment_id>
    <wp:comment_author><![CDATA[Barry Keeling]]></wp:comment_author>
    <wp:comment_author_email>barryfoxbat@btinternet.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2a00:23c4:4b00:b700:0225:64ff:feea:3339</wp:comment_author_IP>
    <wp:comment_date>2016-12-01 12:31:42</wp:comment_date>
    <wp:comment_date_gmt>2016-12-01 12:31:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[IMHO, it seems too early to be detailing spec version numbers (v6.c, v6.d etc) throughout the text, in a book aimed at those new to the language. Maybe it would be best not to use the phrase "In Perl 6" or similar, so often in the text [possibly use it at the start, and end of each Chapter only, when summarising]. I wouldn't be in favour of using a nickname for Perl 6, though I often write it without the " ". Personally, I'd like to see virtually no comparison with Perl (5) in the book, essentially treating Perl 6 as a completely new language. Hope this helps :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480595502.0534611;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480596505.7314341;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>160</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-01 12:49:32</wp:comment_date>
    <wp:comment_date_gmt>2016-12-01 12:49:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My goal is to pretend that Perl 5 does not exist. It's not going to be a translation of Learning Perl with slightly different code.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>159</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480596572.833499;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>161</wp:comment_id>
    <wp:comment_author><![CDATA[david nicol]]></wp:comment_author>
    <wp:comment_author_email>davidnicol@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2605:a601:046d:0b01:cabc:c8ff:fea5:82f4</wp:comment_author_IP>
    <wp:comment_date>2016-12-02 05:08:53</wp:comment_date>
    <wp:comment_date_gmt>2016-12-02 05:08:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For what it's worth, at our Perl Mongers meetings, such as they are, when the topic comes up, we tend to refer to the language in question here as simply "Six."]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480655333.791045;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480675461.5602479;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>164</wp:comment_id>
    <wp:comment_author><![CDATA[polettix]]></wp:comment_author>
    <wp:comment_author_email>flavio@polettix.it</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.203.132.119</wp:comment_author_IP>
    <wp:comment_date>2016-12-02 23:12:37</wp:comment_date>
    <wp:comment_date_gmt>2016-12-02 23:12:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When talking about the language at large, it's fair to use Perl 6 IMHO, especially if you want to mark a "page turning" (or better, "book changing") with respect to Perl 5. Saying "v6" does convey a sense of continuity/smooth evolution instead.

The "vX.Y.Z" stuff is for illustrating different behaviors across releases of "the same language". As this is the first shot and you probably don't know how things are going to evolve, you don't need it in this iteration.

Just 2c :-)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480720357.71439;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480773575.2304909;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>165</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Browder]]></wp:comment_author>
    <wp:comment_author_email>tom.browder@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>67.235.131.65</wp:comment_author_IP>
    <wp:comment_date>2016-12-03 02:39:54</wp:comment_date>
    <wp:comment_date_gmt>2016-12-03 02:39:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[And "p6" or "P6" are used a lot on IRC channels #perls and #perl6-dev.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480732794.826124;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480773562.114645;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>166</wp:comment_id>
    <wp:comment_author><![CDATA[perlpilot]]></wp:comment_author>
    <wp:comment_author_email>perlpilot@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2602:0304:b20c:3630:0000:0000:0000:002b</wp:comment_author_IP>
    <wp:comment_date>2016-12-03 04:40:09</wp:comment_date>
    <wp:comment_date_gmt>2016-12-03 04:40:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[On #perl6, we often say "P5" and "P6" to refer to the two perls.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480740009.6273191;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480773561.216022;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>173</wp:comment_id>
    <wp:comment_author><![CDATA[Laurent Rosenfeld]]></wp:comment_author>
    <wp:comment_author_email>laurent.rosenfeld@googlemail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>86.195.112.83</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 23:24:33</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 23:24:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Brian,

As you may know, I have also been writing on the subject. 

I've decided to simply say "Perl" in most cases, after a warning in the early parts that whenever I say Perl without further qualification, I mean Perl 6. At the same time, I still specify "Perl 6" when the difference with Perl 5 (or earlier versions) is really significant.

My two cents, for what it's worth...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480980273.7230761;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481012071.21137;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>174</wp:comment_id>
    <wp:comment_author><![CDATA[Juerd]]></wp:comment_author>
    <wp:comment_author_email>site-learningperl6.com@juerd.nl</wp:comment_author_email>
    <wp:comment_author_url>https://juerd.nl/</wp:comment_author_url>
    <wp:comment_author_IP>2a02:2308:0010:07f1:0250:b6ff:fe7d:b2dc</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 23:36:06</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 23:36:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Larry usually just calls it Perl. This seems consistent with your goal to pretend that Perl 5 does not exist.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480980966.7973809;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481012059.798702;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>176</wp:comment_id>
    <wp:comment_author><![CDATA[Brock Wilcox]]></wp:comment_author>
    <wp:comment_author_email>awwaiid@thelackthereof.org</wp:comment_author_email>
    <wp:comment_author_url>http://thelackthereof.org</wp:comment_author_url>
    <wp:comment_author_IP>73.200.137.202</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 03:41:53</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 03:41:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I had the same thought when writing a blog post recently. I ended up writing P6 and at the end changed my mind and s/P6/Perl 6/g .... but I kinda like P6 still :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480995713.439966;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481012039.4209721;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>184</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Legrady]]></wp:comment_author>
    <wp:comment_author_email>tom@tomlegrady.com</wp:comment_author_email>
    <wp:comment_author_url>http://which-dwarf-are-you@blogspot.ca</wp:comment_author_url>
    <wp:comment_author_IP>173.230.184.241</wp:comment_author_IP>
    <wp:comment_date>2016-12-07 00:18:01</wp:comment_date>
    <wp:comment_date_gmt>2016-12-07 00:18:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I like P6 as the short name.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481069881.2781341;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Experiment in the Perl 6 REPL</title>
  <link>http://www.learningraku.com/2016/10/15/experiment-in-the-perl-6-repl/</link>
  <pubDate>Sat, 15 Oct 2016 09:58:21 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=137</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has a REPL. That's a tiny, language-specific shell that <b>R</b>eads a line, <b>E</b>valuates it, <b>P</b>rints the result, and <b>L</b>oops to do it again. It can remember the previous results in the same session.

Let's start with something simple. Run the <i>perl6</i> command with no arguments and wait for the prompt: <!--more-->

<pre class="brush:plain">
$ perl6
To exit type 'exit' or '^D'
>
</pre>

I can try the usual "Hello World" program:

<pre class="brush:plain">
> 'Hello World!'
Hello World!
</pre>

I can try it with <code>say</code>, which outputs the string with a newline on the end. That's how I would need to output it inside a program; inside the REPL, that doesn't look different than
what I already did:

<pre class="brush:plain">
> say 'Hello World!'
Hello World!
</pre>

In Perl 6 land, a string is an object, so I can call methods on the string. Perl 6 uses the dot as the method call operator:

<pre class="brush:plain">
> 'Hello World!'.say
Hello World!
</pre>

What else can I do with <code'"Hello World!'</code>? Perl 6 values are themselves objects. The <code>WHAT</code> "meta" method knows what thingys are:

<pre class="brush:plain">
> 'Hello World!'.WHAT
(Str)
</pre>

The <code>(Str)</code> is the name of the class in parentheses. I don't need to know the type of thing it is to figure out what I can do. Or, read another way, I don't need to look at the <a href="https://docs.perl6.org/type/Str">docs for Str</a> to see what methods I can call. The <code>.^methods</code> method (ahem) tells me what the object can respond to:

<pre class="brush:plain">
> 'Hello World!'.^methods
(BUILD Int Num chomp pred succ simplematch match ords samecase
samemark samespace word-by-word trim-leading trim-trailing trim
encode NFC NFD NFKC NFKD wordcase trans indent codes chars uc lc tc
fc tclc flip ord WHY WHICH Bool Str Stringy DUMP ACCEPTS chop
starts-with ends-with substr-eq contains indices index rindex Numeric
gist perl comb subst-mutate subst lines split words)
</pre>

That <code>.^methods</code> looks weird, but it's really just a shortcut for <code>.HOW.methods</code>. The <a href="https://docs.perl6.org/type/Metamodel$COLON$COLONClassHOW"><b>H</b>igher <b>O</b>rder <b>W</b>orkings</a> class has many ways to <i>introspect</i> a thingy. This is an amazing boon to learning the language since you can, at least partly, discover things about the objects from inside the language. All your Ruby friends will say "Welcome to 1995!".

Notice that <code>say</code> is not in the list. By default, <code>.^methods</code> doesn't show methods from certain base classes. I can ask for different slices of that list by adding the <code>:all</code> adverb:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all)
(BUILD Int Num chomp pred succ simplematch match ords samecase
samemark samespace word-by-word trim-leading trim-trailing trim encode
NFC NFD NFKC NFKD wordcase trans indent codes chars uc lc tc fc tclc
flip ord WHY WHICH Bool Str Stringy DUMP ACCEPTS chop starts-with
ends-with substr-eq contains indices index rindex Numeric gist perl
comb subst-mutate subst lines split words trans fmt comb acosech cotan
sin fc contains EVAL cosec atan2 abs ord trim-trailing ords acotan
asec ceiling unpolar acosec acos indices log10 exp match subst chrs
acosh truncate acotanh Num path floor UInt words flip asin codes
univals asech chomp split cotanh ...)
</pre>

That's right, I said adverb. Things that start with a colon are modifiers for an action. You can worry about those later. In this case, <code>:all</code> modifies how <code>.^methods</code> responds.

Still, I don't see <code>say</code> in that list, which is truncated with <code>...</code>. Perl 6 displays the result as a "gist", or, the general idea of the result in a human-readable form. It's the same thing as this:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).gist
</pre>

This gist an amazing feature. I've wished that <a href="">Data::Dumper</a> was built into Perl 5 so many times. Now it's available to most objects automatically, but it is not going to overload you with output. I'll have to do a bit of work on my own for that.

If that's too high-level for you, the <code>perl</code> method is closer to the internal representation. You can run this yourself if you'd like to see the very long and complicated output that's pretty useless to all but 11 people in the world:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).perl
</pre>

But, I want to find that <code>say</code> method. What do I get back from <code>^methods()</code>? I call <code>WHAT</code> again and see that I get a <a href="https://docs.perl6.org/type/List">List</a> object:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).WHAT
(List)
</pre>

That's a list, but what's in the list? I can call <code>map</code> on the <a href="https://docs.perl6.org/type/List">List</a>. I cheat a bit here because I know that there should be something like <code>map</code> and I looked at the documentation. I'd much rather discover that through exploration, but that's how it is at the moment:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).map( {.WHAT.gist} ).unique
((Submethod) (Method) (Method+{Callable[Int:D]}) (Method+{&lt;anon|140546676469920>}))
</pre>


The <code>map</code> gets each item in the list and passes it to the block argument. Perl 6 does some impressive stuff with blocks, but for now think of it as an inline subroutine. Inside this <code>map</code>, I call <code>.WHAT.gist</code>. What's up with the leading dot?

Perl 6 has a default variable, which it calls the <i>topic</i>. If there's no object in front of the method-calling dot, it uses that topic.

Once I've constructed that list I call <code>unique</code> to make a list of just the types it saw. Each thing is a some sort of <a href="https://docs.perl6.org/type/Method">Method</A>.

A <a href="https://docs.perl6.org/type/Method">Method</A> knows its name (if it has one). This in itself is quite interesting. If I call <code>can</code> on an object and that object can respond to a method of that name, it gives me back a list of methods? (A list? Yep! Because Perl 6 has multi dispatch based on the arguments I pass!). Even though I have a list of one item, I only want to first item. I store that in <code>$method</code> (which I must declare before use):

<pre class="brush:plain">
> my $method = 'Hello World!'.can( 'say' ).first
say
</pre>


The REPL remembers what I stored in that variable. It's a <a href="https://docs.perl6.org/type/Method">Method</A> and I can ask it its name. I can also use the variable in place of the literal method name to operate on my string:

<pre class="brush:plain">
> $method.name
say
> 'Hello World!'.$method
Hello World!
</pre>

It's a bit easier to see if I use a different method, such as <code>uc</code> to uppercase

<pre class="brush:plain">
> my $method = 'Hello World!'.can( 'uc' ).first
uc
> 'Hello World!'.$method
HELLO WORLD!
</pre>

This is very exciting! It might not seem like much, but when these things are objects that know things about themselves, a big world of  programming opens up.

But, I started off looking for <code>say</code> but I haven't found it yet.

I can make a new list of just the names by calling <code>map</code> and <code>sort</code> that. When I give only one argument to the block in <code>sort</code>, it uses that result to compare elements. It also remembers that value so it does not calculate it again (so, no Schwartzian Transform needed!):

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).map( { .name } ).sort( { .lc } ).unique.join( "\n" )
</pre>

This creates a really long string, but it's all the methods available on <code>"Hello World"</code>. I can make a shorter list with <code>grep</code> by looking for things that have <code>sa</code> at the start of the string:

<pre class="brush:plain">
> 'Hello World!'.^methods(:all).map( {.name} ).grep( { /^^ sa/ } ).join( "\n" )
samecase
samemark
samespace
samecase
say
</pre>

And, I've found <code>say</code>! It took me a bit, but I was able to find out quite a bit starting with just the object.

I can define my own class with some attributes. Here's a <code>Butterfly</code> class that has a name and a type attribute. I
can create an object in that class, then look at the

<pre class="brush:plain">
> class Butterfly { has Str $.name; has Str $.type; }
(Butterfly)
> my $camelia = Butterfly.new( name => 'Camelia', type => 'Monarch' );
Butterfly.new(name => "Camelia", type => "Monarch")
> $camelia.WHAT
(Butterfly)
> $camelia.^attributes
(Str $!name Str $!type)
</pre>

I could keep going like this to try bits of Perl 6. I don't have to write programs for the very short experiements. Personally, I like to keep the experiments in files because I keep changing things. It's better than retyping.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>137</wp:post_id>
  <wp:post_date>2016-10-15 09:58:21</wp:post_date>
  <wp:post_date_gmt>2016-10-15 09:58:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>experiment-in-the-perl-6-repl</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1115</wp:comment_id>
    <wp:comment_author><![CDATA[Peter]]></wp:comment_author>
    <wp:comment_author_email>peterrenshaw@seldomlogical.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/peterrenshaw</wp:comment_author_url>
    <wp:comment_author_IP>141.168.240.147</wp:comment_author_IP>
    <wp:comment_date>2018-06-09 04:01:44</wp:comment_date>
    <wp:comment_date_gmt>2018-06-09 04:01:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Brian, trying the examples in P6  (-v reports, 'This is perl6 version 2014.07 built on parrot 6.6.0 revision 0') on RaspberryPi... (This is a really old build.) The below code returns nothing...

&gt; 'Hello World!'.^methods(:all).WHAT
&gt; 

returns nothing. Trying [0] ...

&gt; 'Hello World!'.^methods(:all).WHAT.gist
&gt;  (Parcel)

I think the version of rakudo/parrot I've installed, stock on latest P6 pre-build on RPi Raspian is borked. I think I'll build from the source to see what happens in a later build.  Thanks for adding these posts, great way to go through Perl6.

[0] SO ]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1116</wp:comment_id>
    <wp:comment_author><![CDATA[Peter]]></wp:comment_author>
    <wp:comment_author_email>peterrenshaw@seldomlogical.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/peterrenshaw</wp:comment_author_url>
    <wp:comment_author_IP>141.168.240.147</wp:comment_author_IP>
    <wp:comment_date>2018-06-09 06:33:32</wp:comment_date>
    <wp:comment_date_gmt>2018-06-09 06:33:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Yep, a source build upgrade on the RPi to the latest "Perl 6 with MoarVM" using this method [0] yeilds the right response.

&gt; 'Hello World!'.^methods(:all).WHAT
(List)

[0] https://www.tyil.nl/tutorials/perl6-setting-up-a-raspberry-perl/#installing-perl-6]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1115</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #13: Kapreker's Constant</title>
  <link>http://www.learningraku.com/2016/11/28/quick-tip-13-krapukers-constant/</link>
  <pubDate>Mon, 28 Nov 2016 09:19:19 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=144</guid>
  <description/>
  <content:encoded><![CDATA[A Kaprekar's Constant is the number you end up with when you repeatedly substract the descending digits of a four digit number from the ascending digits. This is mostly a problem with rearranging characters. <!--more-->

Here's the process:

<ul>
<li>Start with a four digit number that has at least two different digits. Zero-pad if necessary.
<li>Get the number formed from the ascending digits, and the number formed from the descending digits.
<li>Subtract the ascending from the descending to get the starting number for the next round.
<li>Do it again. You shouldn't have to do this more than seven times.
</ul>

Perl 6 has some nice methods in the <a href="https://docs.perl6.org/type/Str.html">Str</a> class. The <code>comb</code> method turns a string into a list of its characters. Once I have a list, it's a matter of sorting the digits and putting them back together.

I use the signature for the MAIN subroutine to grab a number from the command line and force it to be in the right range. Perl 6 has the nice syntax to check that a number is between two others that uses the variable once.

I also put the list of digits into a set so I can check if there is more than one thing (set members are unique).

<pre class="brush:plain">
sub MAIN ( Int $n where { 0 &lt; $_ &lt;= 9999 and set( $n.comb ).elems > 1 } ) {
	my $previous = '0000';

	# pad small numbers with zero to maintain 4 digits in $descending
	# we treat numbers as strings of digits rather than values
	my $next = sprintf "%04d", $n;

	while ( $next != 0 ) {
		my $descending = $next.comb.sort.reverse.join;
		my $ascending  = $next.comb.sort.join;
		$next = sprintf "%04d", $descending - $ascending;
		say "$descending - $ascending = $next";
		last if $next eq $previous;
		$previous = $next;
		}
	}
</pre>

When I run this with a number that fits the conditions, it quickly turns into 6174, and that's Kaprekar's Constant:

<pre class="brush:plain">
$ perl6 kaprekar_numbers.p6 8881
8881 - 1888 = 6993
9963 - 3699 = 6264
6642 - 2466 = 4176
7641 - 1467 = 6174
7641 - 1467 = 6174
</pre>

If I try to pass invalid input, the <code>MAIN</code> doesn't run. Instead, an implied <code>USAGE</code> spits out a vague message:

<pre class="brush:plain">
$ perl6 kaprekar_numbers.p6
Usage:
  kaprekar_numbers.p6 &lt;n>
$ perl6 kaprekar_numbers.p6 abc
Usage:
  kaprekar_numbers.p6 &lt;n>
$ perl6 kaprekar_numbers.p6 1
Usage:
  kaprekar_numbers.p6 &lt;n>
</pre>

I could define my own <code>USAGE</code>, but I'll save that for another Quick Tip.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>144</wp:post_id>
  <wp:post_date>2016-11-28 09:19:19</wp:post_date>
  <wp:post_date_gmt>2016-11-28 09:19:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-13-krapukers-constant</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="command-line-program"><![CDATA[Command Line Program]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="sets"><![CDATA[Sets]]></category>
  <category domain="category" nicename="subroutines"><![CDATA[Subroutines]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #14: Myriad output routines</title>
  <link>http://www.learningraku.com/2016/11/29/quick-tip-14-myriad-output-routines/</link>
  <pubDate>Tue, 29 Nov 2016 13:55:52 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=149</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has many ways to output things. Here's a table of the various routines you may want, along with their subtle differences. <!--more-->

<table cellpadding=10px cellspacing=10px>

<tr>
	<th style="bgcolor: yellow; padding-right: 5px:">routine&nbsp;&nbsp;</th>
	<th>IO handle&nbsp;&nbsp;</th>
	<th>Behavior&nbsp;&nbsp;</th>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/print">print</a></code></td>
	<td><code>$*OUT</code></td>
	<td></td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/printf">printf</a></code></td>
	<td>IO::Handle object</td>
	<td>Call as a method on some <A href="https://docs.perl6.org/type/IO$COLON$COLONHandle#method_printf">IO::Handle</a> object.&nbsp;&nbsp;</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/put">put</a></code></td>
	<td><code>$*OUT</code></td>
	<td>Outputs its arguments and adds the line-ending</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/say">say</a></code></td>
	<td><code>$*OUT</code></td>
	<td>Adds newline, uses <code><a href="https://docs.perl6.org/routine/gist">.gist</a></code> on non-<code>Str</code> objects</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/note">note</a></code></td>
	<td><code>$*ERR</code></td>
	<td>Adds newline, uses <code><a href="https://docs.perl6.org/routine/gist">.gist</a></code> on non-<code>Str</code> objects</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/dd">dd</a></code></td>
	<td><code>$*ERR</code></td>
	<td>Rakudo extension for data dumping. It actually wraps <code><a href="https://docs.perl6.org/routine/note">warn</a></code>.</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/prompt">prompt</a></code></td>
	<td><code>$*OUT</code></td>
	<td>Outputs arguments, then waits for a line of input. It returns the line without the newline.</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/die">die</a></code></td>
	<td><code>$*ERR</code></td>
	<td>Throws an exception. The default handler prints a stacktrace to standard error.</td>
</tr>

<tr>
	<td><code><a href="https://docs.perl6.org/routine/note">warn</a></code></td>
	<td></td>
	<td>Throws an exception. You properly might want <code><a href="https://docs.perl6.org/routine/note">note</a></code> instead.</td>
</tr>

</table>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>149</wp:post_id>
  <wp:post_date>2016-11-29 13:55:52</wp:post_date>
  <wp:post_date_gmt>2016-11-29 13:55:52</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-14-myriad-output-routines</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="output"><![CDATA[Output]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #15: Phasers</title>
  <link>http://www.learningraku.com/2016/11/30/quick-tip-15-phasers/</link>
  <pubDate>Wed, 30 Nov 2016 10:32:25 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=160</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has phasers, which are subroutines that run at particular times despite their spatial placement inside the the program text. As a program moves from one thing to another, it might trigger a phaser. I wanted to use a cute title like "Phasers set to stun!", but <a href="https://perl6advent.wordpress.com/2012/12/15/day-15-phasers-set-to-stun/">Jonathan Worthington got there first in the 2012 Perl 6 Advent Calendar</a>. (And, tomorrow is the first day of the <a href="https://perl6advent.wordpress.com">2016 Perl 6 Advent Calendar</a>). <!--more-->

For instance, there's a boundary once the compiler has compiled the program and when the main execution of the program is about to begin. Or, when the program enters or leaves a block.

Here are the <code>NEXT</code> and <code>LAST</code> block phasers:

<pre class="brush:plain">
for 0 .. 3 -> $item {
	put "$item: I'm the last statement in this block";
	NEXT { say "NEXT: About to move onto next iteration" }
	LAST { say "LAST: I'm not running this block again" }
	}
</pre>

The output shows that the <code>put</code> outputs its message, then the <code>NEXT</code> does. After all the iterations, the <code>LAST</code> runs:

<pre class="brush:plain">
0: I'm the last statement in this block
NEXT: About to move onto next iteration
1: I'm the last statement in this block
NEXT: About to move onto next iteration
2: I'm the last statement in this block
NEXT: About to move onto next iteration
3: I'm the last statement in this block
NEXT: About to move onto next iteration
LAST: I'm not running this block again
</pre>

But, I can rearrange the statements and get the same output:

<pre class="brush:plain">
for 0 .. 3 -> $item {
	LAST { say "LAST: I'm not running this block again" }
	NEXT { say "NEXT: About to move onto next iteration" }
	put "$item: I'm the last statement in this block";
	}
</pre>

The phasers are attached to Perl 6's block handling and aren't really part of the statements inside the block even though that's where I declared them.

But, since I declared the phasers inside the block, they can bind to variables in that scope. Here I can output a message after the last iteration:

<pre class="brush:plain">
for 0 .. 15 -> $item {
	state $count = 0;
	if $item.is-prime {
		put "$item is prime";
		$count++;
		}
	LAST { say "There were $count primes" }
	}
</pre>

That's really cool! I like this much more than adding another, outer scope to handle the variable and the final message:

<pre class="brush:plain">
{
my $count;
for 0 .. 15 -> $item {
	if $item.is-prime {
		put "$item is prime";
		$count++;
		}
	}
say "There were $count primes";
}
</pre>

Note that even though the phasers don't particularly care about their textual position, the compiler needs to have already seen anything you want the phaser to reference. This won't work because <code>$count</code> doesn't exist yet:

<pre class="brush:plain">
for 0 .. 15 -> $item {
	LAST { say "There were $count primes" }  # $count not compiled yet
	state $count = 0;
	if $item.is-prime {
		put "$item is prime";
		$count++;
		}
	}
</pre>


Here's a program the shows many of the phasers:

<pre class="brush:plain">
use v6;

# Program execution
BEGIN  { put "BEGIN, at compile time as soon as possible" }
CHECK  { put "CHECK, at compile time, as late as possible" }
INIT   { put "INIT, during main execution, as soon as possible" }
END    { put "END, during main execution, as late as possible" }

for 0 .. 3 -> $item {
	my Int $square = $item ** 2;

	# Block phasers
	ENTER { say "\tENTER block" }
	LEAVE { say "\tLEAVE block" }
	KEEP  { say "KEEP block: Got value $_"  } # not implemented?
	UNDO  { say "\t\tUNDO block"  }
	PRE   { say "PRE block ------"  } # before running block
	POST  { say "POST block" }        # after running block, before leaving

	# Loop phasers
	FIRST { say "\tFIRST loop" } # first one when beginning looping
	NEXT  { say "\tNEXT loop"  } # last one while looping
	LAST  { say "\tLAST loop"; say "**** LOOP is done ****"  } # last one when done looping
	}
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>160</wp:post_id>
  <wp:post_date>2016-11-30 10:32:25</wp:post_date>
  <wp:post_date_gmt>2016-11-30 10:32:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-15-phasers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="post_tag" nicename="phasers"><![CDATA[phasers]]></category>
  <category domain="category" nicename="subroutines"><![CDATA[Subroutines]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>197</wp:comment_id>
    <wp:comment_author><![CDATA[Bruce Van Allen]]></wp:comment_author>
    <wp:comment_author_email>bva@cruzio.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>50.0.67.33</wp:comment_author_IP>
    <wp:comment_date>2016-12-09 06:08:48</wp:comment_date>
    <wp:comment_date_gmt>2016-12-09 06:08:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[brian,

The KEEP and UNDO phasers are both implemented, but seemingly not in the way the docs describe. Problems: a) The docs say that KEEP receives any "return" value of the block as the topical variable $_, but it doesn't seem to; and b) What you notice above: KEEP seems silent when it would be expected to show up.

However, I've found that KEEP and UNDO have complementary behaviors depending on where in the block that "return" value appears. Try the mod below of your script. This changes two things: it changes $_ to $square inside KEEP's block and also puts it into UNDO's, because any phaser can access objects in its block scope; and it moves the block's actual action, so that while declaring $square at the start of the block, the statement that assigns $item ** 2 to $square comes AFTER all of the phasers. 

Run the script below, and KEEP appears. Then move the $square = $item ** 2 statement to above ANY of the phasers and see UNDO appear instead.  (Perl 6.c Rakudo 2016.10 on MoarVM, macOS 10.12.1)

I have not been able to figure out how this behavior fits the spec as described in the docs at .

##
use v6;
 
# Program execution
BEGIN  { put "BEGIN, at compile time as soon as possible" }
CHECK  { put "CHECK, at compile time, as late as possible" }
INIT   { put "INIT, during main execution, as soon as possible" }
END    { put "END, during main execution, as late as possible\n---\n" }
 
for 0 .. 3 -&gt; $item {
    my Int $square;
    # Block phasers    
    ENTER { say "\tENTER block" }
    KEEP  { say "\t\tKEEP block: Got value $square"  } # not implemented?
    LEAVE { say "\tLEAVE block"  }
    UNDO  { say "\t\tUNDO block with value $square"  }
    PRE   { say "PRE block ------"  } # before running block
    POST  { say "POST block" }        # after running block, before leaving
 
    # Loop phasers
    FIRST { say "\tFIRST loop" } # first one when beginning looping
    NEXT  { say "\tNEXT loop"  } # last one while looping
    LAST  { say "\tLAST loop"; say "**** LOOP is done ****"  } # last one when done looping
    
    $square	= $item ** 2;
}
##]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481263728.2760601;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481299037.00121;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #16: Explosive combinatorials</title>
  <link>http://www.learningraku.com/2016/12/01/quick-tip-16-explosive-combinatorials/</link>
  <pubDate>Thu, 01 Dec 2016 15:27:33 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=165</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has several sophisticated ways to make lists. I was playing with a particular task where I needed combinations for something similar to bin packing.

I have a list of items and I want to combine those into other lists of a particular length. Duplication doesn't matter (so, not sets), although later I'll want to filter the lists on some utility function. That's not the interesting bit. <!--more-->

Create a list, and specify a length. Imagine a loop where the length gets bigger:

<pre class="brush:plain">
$ perl6
> my @n = &lt;1 2 3>;
[1 2 3]
> my $n = 4;
4
</pre>

Now for the fancy stuff. The <code>xx</code> replicates the list. It's not flat. I get a list that has that number of lists. Yep, Perl 6 has proper lists of lists. 

Then, I take that list of lists and reduce it with a cross operator. I end up with a bunch of lists of length <code>$n</code> in all the combinations:

<pre class="brush:plain">
> ( [X] ( @n xx $n ) )
((1 1 1 1) (1 1 1 2) (1 1 1 3) (1 1 2 1) (1 1 2 2) (1 1 2 3) 
(1 1 3 1) (1 1 3 2) (1 1 3 3) (1 2 1 1) (1 2 1 2) (1 2 1 3) 
(1 2 2 1) (1 2 2 2) (1 2 2 3) (1 2 3 1) (1 2 3 2) (1 2 3 3) 
(1 3 1 1) (1 3 1 2) (1 3 1 3) (1 3 2 1) (1 3 2 2) (1 3 2 3) 
(1 3 3 1) (1 3 3 2) (1 3 3 3) (2 1 1 1) (2 1 1 2) (2 1 1 3) 
(2 1 2 1) (2 1 2 2) (2 1 2 3) (2 1 3 1) (2 1 3 2) (2 1 3 3) 
(2 2 1 1) (2 2 1 2) (2 2 1 3) (2 2 2 1) (2 2 2 2) (2 2 2 3) 
(2 2 3 1) (2 2 3 2) (2 2 3 3) (2 3 1 1) (2 3 1 2) (2 3 1 3) 
(2 3 2 1) (2 3 2 2) (2 3 2 3) (2 3 3 1) (2 3 3 2) (2 3 3 3) 
(3 1 1 1) (3 1 1 2) (3 1 1 3) (3 1 2 1) (3 1 2 2) (3 1 2 3) 
(3 1 3 1) (3 1 3 2) (3 1 3 3) (3 2 1 1) (3 2 1 2) (3 2 1 3) 
(3 2 2 1) (3 2 2 2) (3 2 2 3) (3 2 3 1) (3 2 3 2) (3 2 3 3) 
(3 3 1 1) (3 3 1 2) (3 3 1 3) (3 3 2 1) (3 3 2 2) (3 3 2 3) 
(3 3 3 1) (3 3 3 2) (3 3 3 3))
</pre>

Note that permutations are different, and that's even easier because there's a method for that:

<pre class="brush:plain">
> @n.permutations
((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))
</pre>

But, let's do it step by step.

First, I have a list:

<pre class="brush:plain">
> (1, 2, 3)
( 1 2 3 )
</pre>

Now, I want to replicate it. I can do that to get two lists in a bigger list:

<pre class="brush:plain">
> (1, 2, 3) xx 2
((1 2 3) (1 2 3))
</pre>

As a side note, if you don't like that, you could "de-containerize" (using <code>|</code>) the small list so it loses its structure:

<pre class="brush:plain">
> |(1, 2, 3) xx 2
(1 2 3 1 2 3)
</pre>

I want to keep the structure, however, so I can combine two copies of the list. The next step is a cross. Here I do it by hand:

<pre class="brush:plain">
> (1, 2, 3) X ( 1, 2, 3 )
((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))
</pre>

That's not so bad. The cross makes little lists of the first element of the first list and all the elements of the second list in turn. Then with the second element, and so on. The big list is a bunch of two element little lists.

Now, do that as a reduction. With two lists, it's the same result:

<pre class="brush:plain">
> [X] (1, 2, 3), (1, 2, 3)
((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))
</pre>

But, try it with three lists. The lefthand cross gives the result I've already shown. There's one more cross to go. Take the first element, <code>(1, 1)</code> and combine it with <code>1</code> to get <code>(1, 1, 1)</code>. And, do all of those:

<pre class="brush:plain">
> (1, 2, 3) X ( 1, 2, 3 ) X ( 1, 2, 3 )
...
>  ((1, 1) ... (3, 3))    X ( 1, 2, 3 )
((1 1 1) (1 1 2) ... (3 3 2) (3 3 3))
</pre>

The reduction operator does that for me. It takes two elements, does the operation, and puts the result back on the list. Then it takes that element and the next element and does the operation again. It keeps doing that until there's one element. I can cross as many times as I like without repeatedly typing it. This is the same thing:

<pre class="brush:plain">
> [X] (1, 2, 3), ( 1, 2, 3 ), ( 1, 2, 3 )
...
</pre>

And, I already know how to replicate the list:

<pre class="brush:plain">
> [X] (1, 2, 3) xx 3
((1 1 1) (1 1 2) ... (3 3 2) (3 3 3))
</pre>

Now, I put that list in a variable and the count in another variable:

<pre class="brush:plain">
> [X] @n xx $n
( ... )
</pre>

The combinatorial explosion might wreck the computer, but that's why they make bigger computers. And, later, Perl 6 will let things happen in parallel.

But, I said that I wanted to apply a utility function to these. I can <code>grep</code> those:

<pre class="brush:plain">
> ( [X] @n xx 5 ).grep( { .sum > 13 } )
((2 3 3 3 3) (3 2 3 3 3) (3 3 2 3 3) (3 3 3 2 3) (3 3 3 3 2) (3 3 3 3 3))
</pre>

But, I can do better than that! Oh yeah, it gets better. I want to partition the big set. I can call <code>categorize</code>. The string I return is which hash key the item "belongs" to. I get a hash back, and each key has an array with the values associated with that key:

<pre class="brush:plain">
> ( [X] @n xx 5 ).categorize( { .sum > 13 ?? 'pass' !! 'fail' } )
{fail => [(1 1 1 1 1) ... (3 3 3 3 1)], pass => [(2 3 3 3 3) (3 2 3 3 3) (3 3 2 3 3) (3 3 3 2 3) (3 3 3 3 2) (3 3 3 3 3)]}
</pre>

This sort of thing replaces several Perl 5 modules I've written where I had to manage arrays of arrays to build tuples.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>165</wp:post_id>
  <wp:post_date>2016-12-01 15:27:33</wp:post_date>
  <wp:post_date_gmt>2016-12-01 15:27:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-16-explosive-combinatorials</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="cross-operators"><![CDATA[Cross Operators]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #17: Rakudo's built-in profiler</title>
  <link>http://www.learningraku.com/2016/12/02/quick-tip-17-rakudos-built-in-profiler/</link>
  <pubDate>Fri, 02 Dec 2016 14:03:06 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=174</guid>
  <description/>
  <content:encoded><![CDATA[Rakudo comes with a built-in profiler. Invoke the program with the <code>--profiler</code> option and

<pre class="brush:plain">
$ perl6 --profiler some_script.p6
... output ...
Writing profiler output to profile-1480712222.02931.html
</pre>

That profile is an HTML file using Bootstrap and other fun things to make it look pretty. It's not as sophisticated as something like Perl 5's <a href="https://www.metacpan.org/module/Devel::NYTProf">Devel::NYTProf</a>, but it's still pretty interesting. <!--more-->

Let's write some routines to do Fibonacci numbers, which seem to be most authors' favorite example for this sort of thing. Indeed, I used it in the "Benchmarking" chapter of <a href="http://www.masteringperl.org">Mastering Perl</a>, but mostly to point out how wrong the simple benchmarks were.

I'll implement it in four ways, none of which I claim to be the best:

<ul>
<li>The recursive way you see in most examples
<li>A recursive fashion with memoization
<li>Using the sequence operator
<li>Using memoization with an iterative approach.
</ul>

In <a href="http://www.masteringperl.org">Mastering Perl</a>, I presented a few arguments that escape the usual discussion:

<ul>
<li>The routine that runs fastest the first time isn't necessarily the best
<li>Caching results you'll use again eventually pays off in time
<li>Using less time usually means using less memory
<li>You improve with better algorithms instead of different syntax.
</ul>

Here are some implementations in Perl 6, where I didn't try at all to make them efficient. I merely want something to show the workings of the profiler:

<pre class="brush:plain">
sub fib_recursive ( Int $n where * >= 0 --> Int ) {
	return 1 if $n < 2;

	return fib_recursive( $n - 1 ) + fib_recursive( $n - 2 )
	}

sub fib_recursive_memoize ( Int $n where * >= 0 --> Int ) {
	state @n = ( 1, 1 );

	return @n[$n] if $n < @n.elems;

	return @n[$n] = fib_recursive_memoize( $n - 1 ) + fib_recursive_memoize( $n - 2 )
	}

sub fib_sequence ( Int $n where * >= 0 --> Int ) {
	my $seq := 1, 1, * + * ... *;
	$seq[$n]
	}

sub fib_memoize ( Int $n where * >= 0 --> Int ) {
	state @n = ( 1, 1 );
	return @n[$n] if $n < @n.elems;

	for @n.elems .. $n -> $index {
		@n[$index] = @n[$index-1] + @n[$index-2];
		}

	@n[*-1]
	}

sub MAIN ( Int $n where * >= 0 --> Int ) {
	for 1 .. 10 {
		say fib_recursive( $n );
		say fib_recursive_memoize( $n );
		say fib_sequence( $n );
		say fib_memoize( $n );
		}
	}
</pre>

I run this program under the profiler, and if I've everything correctly, I should see the same number output several times. Or, I've done it wrong the same way each time.

<pre class="brush:perl">
$ perl6 --profile fib.p6 20
10946
10946
.....
10946
10946
Writing profiler output to profile-1480712222.02931.html
</pre>

If you don't like that filename, you can choose your own:

<pre class="brush:perl">
$ perl6 --profile --profile-filename=fibonacci.html fib.p6 20
10946
10946
.....
10946
10946
Writing profiler output to fibonacci.html
</pre>

I can then look at the profiler output. Here's a screenshot that shows the time spent in each of the subroutines:

<div class="image center">
<div>
<img src="/images/fibonacci_profiler.png" width="500" height="250" />
</div>
</div>

To see the rest of the report, run the program yourself!

I won't write too much about interpreting these results, but there are several things you should think about in these sorts of comparisons.

First, test with a variety of values, especially those of vastly different orders of magnitude. The recursive solution might look really fast for small <i>N</i>, but it gets bad very quickly.

Second, test it several times, as I've done in this example. Some implementations always take the same amount of time while others get faster and faster. In a program where this level of optimization matters, you're likely to run the interesting routine several times.

Third, consider a completely different approach than any you see here. The Fibonacci numbers aren't going to change (neither are the values of other sequences). Why compute them again? Just look them up. (I'll write more about this tomorrow when <A href="https://www.learningperl6.com/2016/12/03/quick-tip-18-short-circuit-subroutines-with-multi/">I use multi subs</a>) Something like Redis can store huge lists without eating all your resources or complicating your program.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>174</wp:post_id>
  <wp:post_date>2016-12-02 14:03:06</wp:post_date>
  <wp:post_date_gmt>2016-12-02 14:03:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-17-rakudos-built-in-profiler</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="fibonacci"><![CDATA[fibonacci]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="performance"><![CDATA[Performance]]></category>
  <category domain="post_tag" nicename="profiling"><![CDATA[profiling]]></category>
  <category domain="category" nicename="rakudo"><![CDATA[Rakudo]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>168</wp:comment_id>
    <wp:comment_author><![CDATA[mscha]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0983:8781:0001:a402:ec2c:2d2d:09e8</wp:comment_author_IP>
    <wp:comment_date>2016-12-03 18:53:45</wp:comment_date>
    <wp:comment_date_gmt>2016-12-03 18:53:45</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You can make fib_sequence a lot faster by using a state variable:

    state @seq = 1, 1, * + * ... *;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480791225.4898911;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>188</wp:comment_id>
    <wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
    <wp:comment_author_email>example@example.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.58.77.210</wp:comment_author_IP>
    <wp:comment_date>2016-12-07 11:51:33</wp:comment_date>
    <wp:comment_date_gmt>2016-12-07 11:51:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The profiler also supports JSON format, if you use .json extension on the --profile-filename= and December 2016 release will also feature SQL format.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481111493.2269471;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481195485.1331911;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #18: Short circuit subroutines with multi</title>
  <link>http://www.learningraku.com/2016/12/03/quick-tip-18-short-circuit-subroutines-with-multi/</link>
  <pubDate>Sat, 03 Dec 2016 16:15:34 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=179</guid>
  <description/>
  <content:encoded><![CDATA[In <A href="https://www.learningperl6.com/2016/12/02/quick-tip-17-rakudos-built-in-profiler/">yesterday's Quick Tip</a> I used the Fibonacci sequence as an example to show off Rakudo's <code>--profile</code> option. In today's tip I'll use that same sequence to show off Perl 6's multi-dispatch features. <!--more-->

Consider the situation where I have an out-of-control subroutine. The one I'm about to show is not really going crazy, but I've programmed it in such a way that for moderately low input values it becomes unusable:

<pre class="brush:plain">
sub fib_recursive ( Int $n where * >= 0 --> Int ) {
	state $called = 0;
	$called++;
	END { say "fib_recursive was called $called times" }
	note "Called with $n";
	return 1 if $n < 2;

	note "$n calling with {$n -1} and {$n-2}";
	return fib_recursive( $n - 1 ) + fib_recursive( $n - 2 )
	}

sub MAIN ( Int $n where * >= 0 --> Int ) {
	say fib_recursive( $n );
	}
</pre>

I've added some calls to <code>note</code> so I can watch the progress:

<pre class="brush:plain">
$ perl6 fibonacci.p6 5
Called with 5
5 calling with 4 and 3
Called with 4
4 calling with 3 and 2
Called with 3
3 calling with 2 and 1
Called with 2
2 calling with 1 and 0
Called with 1
Called with 0
Called with 1
Called with 2
2 calling with 1 and 0
Called with 1
Called with 0
Called with 3
3 calling with 2 and 1
Called with 2
2 calling with 1 and 0
Called with 1
Called with 0
Called with 1
8
fib_recursive was called 15 times
</pre>

If I map this out to call levels, I get something like this to explain the calls. Each level of indentation is a call level:

<pre class="brush:plain">
5
	4
		3
			2
				1
				0
			1
		2
			1
			0
	3
		2
			1
			0
		1
</pre>

The <code>note</code> routine sends its output to standard error. If I don't want those extra messages, I can redirect standard error to something else:

<pre class="brush:plain">
$ perl6 fibonacci.p6 5 2> /dev/null
8
fib_recursive was called 15 times
</pre>

So far so good. I get the answer quickly enough that I don't care how long it took. However, as the argument's value increases, the slower and slower my program gets. The number of times I call the routine explodes as the number goes up. I'll leave this as an exercise for the reader, but the number of calls follows the sequence <i>F(n) = F(n-1) + F(n-2) + 1</i>. That <i>+1</i> is a sly way of saying that the number of recursive calls grows faster than the coresponding value in the Fibonacci sequence.

You may have heard (or read) me rant on this before, but this is what happens to languages that can't do tail-call optimization. Perl 6 doesn't know what subroutine it might call to get the next values, so it can't turn this recursive algorithm into an iterative one. Some languages can optimize the literal source code into something much better, and that's why you see examples like this. But I could spend all day talking about this (and do in my <a href="https://www.masteringperl.org">Mastering Perl</a> class). The short answer is "Don't do that."

In this post, I'm not going to rewrite the subroutine as something better. I'm going to short-circuit it by define a new subroutine with the same name that handles particular cases.

Before I start, I want to see the Fibonacci sequence. In the Perl 6 REPL, I'll slice an infinite lazy sequence:

<pre class="brush:plain">
$ perl6
> (1,1, *+* ... * )[0..30];
(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269)
</pre>

And here's the number of calls to <code>fib_recursive</code> I have to make to get those numbers:

<pre class="brush:plain">
$ perl6
> (1,1, *+*+1 ... * )[0..30]
(1 1 3 5 9 15 25 41 67 109 177 287 465 753 1219 1973 3193 5167 8361 13529 21891 35421 57313 92735 150049 242785 392835 635621 1028457 1664079 2692537)
</pre>

Oh, too hard to line up the values? Here's a double zip (using the Z operator) of the sequence number, Fibonacci number, and subroutine call count:

<pre class="brush:plain">
$ perl6
> ( 0 .. 30 ) Z (1,1, *+* ... * )[0..30] Z (1,1, *+*+1 ... * )[0..30]
((0 1 1) (1 1 1) (2 2 3) (3 3 5) (4 5 9) (5 8 15) (6 13 25) (7 21 41) (8 34 67) (9 55 109) (10 89 177) (11 144 287) (12 233 465) (13 377 753) (14 610 1219) (15 987 1973) (16 1597 3193) (17 2584 5167) (18 4181 8361) (19 6765 13529) (20 10946 21891) (21 17711 35421) (22 28657 57313) (23 46368 92735) (24 75025 150049) (25 121393 242785) (26 196418 392835) (27 317811 635621) (28 514229 1028457) (29 832040 1664079) (30 1346269 2692537))
</pre>

All those years you made fun of Lisp...

I now know these numbers and I can use this knowledge in my program so avoid computation. I'll create a multi-sub that immediately returns the value for <i>n = 25</i>. I can see in that list that I would save 242,785 subroutine calls every time I'd call fib_recursive( 25 ):

In Perl 6, I can have multiple definitions of a subroutine if I give them different signatures. When I call the subroutine, Perl 6 will look through the list of definitions and use the first one that fits the argument list.

The special technique here is that I use a literal value in the signature. When the value of the argument is 25, that's the subroutine Perl 6 will call:

<pre class="brush:plain">
# define first! Perl 6 looks in the order of definition!
multi fib_recursive ( 25 ) { 121393 }

# multi implies "sub", but you can write "multi sub" if you like
multi fib_recursive ( Int $n where * >= 0 --> Int ) {
	state $called = 0;
	$called++;
	END { say "fib_recursive was called $called times" }
	note "Called with $n";
	return 1 if $n < 2;

	note "$n calling with {$n -1} and {$n-2}";
	return fib_recursive( $n - 1 ) + fib_recursive( $n - 2 )
	}


sub MAIN ( Int $n where * >= 0 --> Int ) {
	say fib_recursive( $n );
	}
</pre>

When I call it with 25 now, I immediately get the answer. The <code>END</code> block still runs and doesn't have a value for <code>$count</code> because I never ran the other subroutine definition:

<pre class="brush:plain">
$ perl6 fibonacci.p6 25 2> /dev/null
121393
fib_recursive was called  times
</pre>

When I run it with 26, I see that <code>fib_recursive</code> runs 150,050 times. From the sequence I generated earlier, I would have had to run it 392,835 times with the pure recursive solution. The difference of 392,835 and 150,050 is 242,785. That's the number of calls from the 25 branch!

<pre class="brush:plain">
$ perl6 fibonacci.p6 26 2> /dev/null
196418
fib_recursive was called 150050 times
</pre>

I saved some time there, but let's go one better. I could have saved more by defining three multis. To really short-circuit the sequence, I need to short circuit the <i>n-1</i> and <i>n-2</i> branches. I define another multi with the literal value of 24:

<pre class="brush:plain">
multi fib_recursive ( 24 ) {  75025 }
multi fib_recursive ( 25 ) { 121393 }

multi fib_recursive ( Int $n where * >= 0 --> Int ) {
	state $called = 0;
	$called++;
	END { say "fib_recursive was called $called times" }
	note "Called with $n";
	return 1 if $n < 2;

	note "$n calling with {$n -1} and {$n-2}";
	return fib_recursive( $n - 1 ) + fib_recursive( $n - 2 )
	}


sub MAIN ( Int $n where * >= 0 --> Int ) {
	say fib_recursive( $n );
	}
</pre>

When I try it with 26 now, I call the actually-recursing <code>fib_recursive</code> exactly once. That calls the two multis for <code>fib_recursive(25)</code> and <code>fib_recursive(24)</code>, which immediately return values:

<pre class="brush:plain">
$ perl6 fibonacci.p6 26 2> /dev/null
196418
fib_recursive was called 1 times
</pre>

In this example, I've saved time because I had some precomputed values. The problem is as complex as when I started. It's not a better algorithm, really. It's just cheating a bit.

Consider a different way to use this same technique that changes the complexity. I won't write real code here, but I want to illustrate another use of this technique.

Suppose that I have a general subroutine that works in most cases, but there are a few special cases that could make the code really complicated. Handling the special cases requires a lot of structure. Let the multi subs handle that structure for you, perhaps calling common subroutines as needed:

<pre class="brush:plain">
multi open_for_business ( Date $d where *.is-a-federal-holiday ) { ... }
multi open_for_business ( Date $d where *.is-a-weekend ) { ... }
multi open_for_business ( Date $d ) { ... }
</pre>

I could also use this for debugging where I know I have one case that I want to inspect while not seeing debugging output from the other cases.


]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>179</wp:post_id>
  <wp:post_date>2016-12-03 16:15:34</wp:post_date>
  <wp:post_date_gmt>2016-12-03 16:15:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-18-short-circuit-subroutines-with-multi</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="post_tag" nicename="multi"><![CDATA[multi]]></category>
  <category domain="category" nicename="subroutines"><![CDATA[Subroutines]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #19: Build reusable data types</title>
  <link>http://www.learningraku.com/2016/12/04/quick-tip-19-build-reusable-data-types/</link>
  <pubDate>Sun, 04 Dec 2016 14:59:29 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=184</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 lets you constrain variable values with types, but you don't have to limit yourself to the built-in types. Once defined, these act like the built-in types. Here are some subsets I've stolen from Brad Clawsie's <A href="https://github.com/bradclawsie/Subsets-Common">Subsets::Common</a> module: <!--more-->

<pre class="brush:plain">
my package EXPORT::DEFAULT {
	...
	subset Pos of Numeric where * > 0;
	subset Neg of Numeric where * < 0;
	subset Zero of Numeric where * == 0;
	subset UNumeric of Numeric where * >= 0;

	subset Even of Int where * % 2 == 0;
	subset Odd  of Int where * % 2;

	subset Time::Hour12 of PosInt where * ~~ 1 .. 12;
	subset Time::Hour24 of Int    where * ~~ 0 .. 23;
	subset Time::Minute of Int    where * ~~ 0 .. 59;
	subset Time::Second of Int    where * ~~ 0 .. 59;
	...
}
</pre>

The <code>subset</code> started the declaration and is followed by the name you want for the new type. This is a subset because you base it on an existing type that you declare with <code>of</code>. After that, you can use a <code>where</code> clause to refine your new type.

And, Brad put these in a package where he declared that everything is exported.

Here's one that I created for my Perl 6 version of <A href="https://github.com/briandfoy/perl6-chemistry-elements">Chemistry::Elements</a>. Don't worry so much about what's in the code; think more about the ability to have any code you need to decide if the value fits the constraint that you like. Here's the type I defined to constrain an integer to a known atomic number (typically called Z from the German word <i>Zahl</i>, as in <i>Atomzahl</i>):

<pre class="brush:plain">
	subset ZInt of Cool is export where {
		state ( $min, $max ) = %names.keys.sort( { $^a <=> $^b } ).[0,*-1];
		( $_.truncate == $_ and $min <= $_ <= $max )
			or
		note "Expected a known atomic number between $min and $max, but got $_"
			and
		False;
		};
</pre>

For my subset, I exported it by declaring it <code>is export</code> so other people using the module could use the type outside of my module. Most notably (heh), I can give a specific error message when the value doesn't match.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>184</wp:post_id>
  <wp:post_date>2016-12-04 14:59:29</wp:post_date>
  <wp:post_date_gmt>2016-12-04 14:59:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-19-build-reusable-data-types</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="types"><![CDATA[Types]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>169</wp:comment_id>
    <wp:comment_author><![CDATA[Moritz]]></wp:comment_author>
    <wp:comment_author_email>moritz.lenz@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://perlgeek.de/</wp:comment_author_url>
    <wp:comment_author_IP>2003:0086:6718:ec99:d158:b07c:a083:ffca</wp:comment_author_IP>
    <wp:comment_date>2016-12-04 16:08:58</wp:comment_date>
    <wp:comment_date_gmt>2016-12-04 16:08:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Since you can't compare Complex numbers with = and the likes, I'd recommend to use Real instead of Numeric as the nominal type for Pos, Neg and so on.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480867738.873137;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480911060.9507489;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>172</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 20:20:46</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 20:20:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Pull request sent!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>169</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480969246.4256301;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>175</wp:comment_id>
    <wp:comment_author><![CDATA[Juerd]]></wp:comment_author>
    <wp:comment_author_email>site-learningperl6.com@juerd.nl</wp:comment_author_email>
    <wp:comment_author_url>https://juerd.nl/</wp:comment_author_url>
    <wp:comment_author_IP>2a02:2308:0010:07f1:0250:b6ff:fe7d:b2dc</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 23:48:28</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 23:48:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA["where * ~~ 0..59" is redundant; since it's already being smart-matched, this can just be "where 0..59".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480981708.2185669;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481012056.3116131;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #20: Way off base</title>
  <link>http://www.learningraku.com/2016/12/05/quick-tip-20-way-off-base/</link>
  <pubDate>Mon, 05 Dec 2016 09:33:53 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=192</guid>
  <description/>
  <content:encoded><![CDATA[Want to use numbers that are represented in something other than base 10? That's no problem in Perl 6. Some languages throw you a bone with binary, octal, or hexadecimal conversions, but what if you want base 17? Or, better yet, base 36?  <!--more-->

First, for <A href="https://docs.perl6.org/type/Real">Real numbers</A> (or, non-complex numbers), I have the <a href="https://docs.perl6.org/type/Real#method_base">base</a> command:

<pre class="brush:plain">
$ perl6
> 137.base(2)
10001001
> 137.base(8)
211
> 137.base(16)
89
> 137.base(36)
3T
</pre>

I can go up to base-36 because that's how many digits and Latin letters the method uses. Those convert number types to strings.

I can go the other way too. The <code>:DIGIT(string)</code> syntax converts strings to numbers:

<pre class="brush:plain">
> :2('10001001')
137
> :8('211')
137
> :16('89')
137
</pre>

These assume that the string is a number represented that the radix after the colon. These return a Perl 6 number, which you can display in any base that you like.

From there I can make some one-liners to convert bases. <a href="http://stackoverflow.com/a/2842150/2766176">I've done this for Perl 5</a>, and now I have them for Perl 6:

<pre class="brush:plain">
alias o2b="perl6 -e 'say sprintf q/:2(%b)/, :8(@*ARGS.shift)'"
alias o2d="perl6 -e 'say sprintf q/:10(%d)/, :8(@*ARGS.shift)'"
alias o2h="perl6 -e 'say sprintf q/:16(%x)/, :8(@*ARGS.shift)'"

alias d2b="perl6 -e 'say sprintf  q/:2(%b)/, @*ARGS.shift'"
alias d2o="perl6 -e 'say sprintf  q/:8(%d)/, @*ARGS.shift'"
alias d2h="perl6 -e 'say sprintf q/:16(%x)/, @*ARGS.shift'"

alias h2b="perl6 -e 'say sprintf  q/:2(%b)/, :16(@*ARGS.shift)'"
alias h2o="perl6 -e 'say sprintf  q/:8(%o)/, :16(@*ARGS.shift)'"
alias h2d="perl6 -e 'say sprintf q/:10(%d)/, :16(@*ARGS.shift)'"
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>192</wp:post_id>
  <wp:post_date>2016-12-05 09:33:53</wp:post_date>
  <wp:post_date_gmt>2016-12-05 09:33:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-20-way-off-base</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="command-line-program"><![CDATA[Command Line Program]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>170</wp:comment_id>
    <wp:comment_author><![CDATA[Ronald Schmidt]]></wp:comment_author>
    <wp:comment_author_email>ronaldxs@software-path.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.software-path.com</wp:comment_author_url>
    <wp:comment_author_IP>69.127.134.110</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 16:53:40</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 16:53:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[If you give your aliases a parameter that is not a number, or not a number of the right base, you may get back a LTA error message which looks confusing and also seemss fixable by changing a few characters of the program.

$ alias o2b="perl6 -e 'say sprintf q/:2(%b)/, :8(@*ARGS.shift)'"
$ o2b 99
Directive b not applicable for type Failure
  in any  at /home/ron/.rakudobrew/moar-nom/install/share/perl6/runtime/CORE.setting.moarvm line 1

What appears to be happening is that :8() is returning type Failure which does not throw an exception until evaluation.

If we evaluate earlier with +:8() then:
$ alias o2b="perl6 -e 'say sprintf q/:2(%b)/, +:8(@*ARGS.shift)'"
$ o2b 99
Cannot convert string to number: base-8 number must begin with valid digits or '.' in ':8' (indicated by ⏏)
  in block  at -e line 1

Actually thrown at:
  in block  at -e line 1

$ o2b abc
Cannot convert string to number: base-8 number must begin with valid digits or '.' in ':8' (indicated by ⏏)
...

$ o2b 42
:2(100010)

Which looks like better handling with just a little extra effort.

In the case of d2[boh] one may need to use +:10(@*ARGS.shift).]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1480956820.798151;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480958158.861733;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>171</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-05 17:19:20</wp:comment_date>
    <wp:comment_date_gmt>2016-12-05 17:19:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very nice! I was wondering about that but I had to move on to another task. Thanks!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>170</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1480958360.8250401;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>187</wp:comment_id>
    <wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
    <wp:comment_author_email>example@example.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.58.77.210</wp:comment_author_IP>
    <wp:comment_date>2016-12-07 11:22:52</wp:comment_date>
    <wp:comment_date_gmt>2016-12-07 11:22:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The much simpler way to write that is as:

<pre class="brush:plain">
    @*ARGS[0].parse-base(8).base(2)
</pre>

Instead of that ugly sprintf concoction.

.parse-base also handles negative numbers, unlike the :16() radix literal syntax.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481109772.61692;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481195509.405859;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>193</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-08 18:44:18</wp:comment_date>
    <wp:comment_date_gmt>2016-12-08 18:44:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[My 2016.11 claims that <code>parse-base</code> is not a known method.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>187</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481222658.623265;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #21: The rats in the machine</title>
  <link>http://www.learningraku.com/2016/12/06/quick-tip-21-the-rats-in-the-machine/</link>
  <pubDate>Tue, 06 Dec 2016 08:17:08 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=194</guid>
  <description/>
  <content:encoded><![CDATA[Let's think about numbers. I've been inserting Kickstarter messages into my Quick Tips, but this post is <i>about</i> Kickstarter. Or, about their mistreatment of numbers. There's no scandal, just those little inconsistencies that the experienced programmer notices because they have made the same mistakes. Perl 6 has features to make this easier. <!--more-->

First, here's the current state of <A href="http://kck.st/2fYlzB2">my Kickstarter campaign</a> for the <i>Learning Perl 6</i> book. The first image is from the daily email they send me and the second is the dashboard on the website.

<div class="image center">
<div>
<img src="/images/kickstarter-email.png" width="500" height="239" />
<p class="caption">The daily email report</p>
</div>
</div>

<div class="image center">
<div>
<img src="/images/kickstarter-dashboard.png" width="500" height="169" />
<p class="caption">The website dashboard</p>
</div>
</div>

The metrics aren't from the same instant, as you see from looking at the number of backers and the funding level. But, notice that the higher amount and higher backers has the lower percentage. Most of you probably immediately recognize this as two different strategies in turning Real numbers in Integers.

<table>
<tr>
	<th>Funding</th>
	<th>Goal</th>
	<th>Decimal</th>
	<th>Reported</th>
	<th>Method</th>
</tr>
<tr>
	<td>36,254</td>
	<td>37,000</td>
	<td>0.97983783783</td>
	<td>97</td>
	<td>Truncating</td>
</tr>
<tr>
	<td>36,088</td>
	<td>37,000</td>
	<td>0.97535135135</td>
	<td>98</td>
	<td>Rounding</td>
</tr>
</table>

These differences seem small, but for the person running the campaign they can provide a moment of panic. If I see the higher percentage first then see the lower percentage, I wonder if people cancelled or adjusted their pledge. This is especially troubling when you get close to the end of a campaign because there are <A href="http://www.crowdfundinsider.com/2013/11/26152-kickstarter-backer-allegedly-scams-one-hundred-projects/">bad actors out there you like to give you that last little bit then dispute the charge later</a> (and Kickstarter then charges my credit card to pay them back). And, there are plenty of Kickstarter spammers who back your project hoping you'll back theirs, then cancel their pledge when you don't. I know, weird.

Your pledge is just that. No money changes hands until the pledge total goes over the minimum funding. I haven't captured any of that money, and I only expect to get about 90% of it through various credit card issues once Kickstarter collects in about two weeks.

But, back to programming. When you see two different ways of getting the same number, you know you have a code smell. We know that there should be a common routine that handles it. It seems simple to divide two numbers, but obviously it isn't. There are other things, like normalization, that come into play.

Let's divide some numbers in Perl 6. First, there's the division operator and it might look like it divides two numbers. If I look at the type of thingy in <code>$n</code>, I see that it's a <A href="https://docs.perl6.org/type/Rat">Rat</a> (rational number). If I look at the <code>.perl</code> representation, I see a fraction (in this case reduced):

<pre class="brush:perl">
$ perl6
To exit type 'exit' or '^D'
> my $n = 36088 / 37000
0.975351
> $n.WHAT
(Rat)
> $n.perl
&lt;4511/4625>
</pre>

That is, Perl 6 delays my decision to represent this number because it knows where I started. It doesn't lose bits or accuracy because it allows a series of inexact operations. Perl 6 knows the numerator and denominator still.

I can represent the number as a whole number percentage in two ways. Perl 6's Real class has methods to <A href="https://docs.perl6.org/type/Real#method_truncate">truncate</a> and <A href="https://docs.perl6.org/type/Real#method_round">round</a>:

<pre class="brush:perl">
> ($n * 100).truncate
97
> ($n * 100).round
98
</pre>

But, I don't want to make that decision everywhere in the code. If I were doing this, I would recognize the logical task. I want to pass in the numbers and get the same thing out every time. I can define a subroutine to do that:

<pre class="brush:perl">
> sub show_funding_percentage ( Rat $funding --> Int ) {
* ($funding * 100).round }
sub show_funding_percentage (Rat $funding --> Int) { #`(Sub+{Callable[Int]}|140349924897624) ... }
> show_funding_percentage( $n )
98
</pre>

The trick is making your programmers use the proper interface rather than thinking they know better because division is simple. Showing the funding percentage is a logical task. Other things might need to happen. I shouldn't have to think about all the steps to get there every time I want to use it.

That's within one language though. There's another issue that could be at play. Different languages or libraries might be in the path to the website and the path to email. They get the same inputs but they produce different outputs. There are different rounding strategies; it's not the simple rules you learned in grade school. In this case I don't think that's the problem because most strategies round these two numbers the same way.

As a final note, consider what else rational numbers give us. We're mostly used to inexact numbers due to the limitations of floating point numbers. With rationals, which are two integers, that isn't a problem:

<pre class="brush:perl">
$ perl5 -e 'print +(0.1+0.1+0.1)==0.3 ? "True" : "False"'
False
$ perl6 -e 'say (0.1+0.1+0.1)==0.3'
True
</pre>

Or, I should say, it's not a problem until I make it one. I can turn a rational number into a string (<code>$s</code>) and turn that string back into a number (<code>$t</code>). I've now lost some precision. When I multiply by what I think is the denominator, I don't get back the right numerator:

<pre class="brush:perl">
> my $s = ~$n
0.975351
> $s.WHAT
(Str)
> my $t = +$s;
0.975351
> $t.WHAT
(Rat)
> $t.perl
0.975351
> $t*37000
36087.987
</pre>

And, we know what that small round errors lead to bigger problems.

<div class="image center">
<div>
<a href="http://www.imdb.com/title/tt0086393/"><img src="/images/richard-pryor.jpg" width="500" height="208" /></a>
<p class="caption">Faulty rounding leads to nuclear war</p>
</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>194</wp:post_id>
  <wp:post_date>2016-12-06 08:17:08</wp:post_date>
  <wp:post_date_gmt>2016-12-06 08:17:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-21-the-rats-in-the-machine</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>177</wp:comment_id>
    <wp:comment_author><![CDATA[Simon Proctor]]></wp:comment_author>
    <wp:comment_author_email>simon.proctor@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.khanate.co.uk/</wp:comment_author_url>
    <wp:comment_author_IP>89.202.250.99</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 09:11:21</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 09:11:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I wonder if they chose the two roundings on purpose. For the Backers you get the rounded value, generally higher which makes the Kickstarter look closer to funded or more funded. I'm more likely to back something if it's close to funded and that 1% might make an emotional difference.

Whereas for the Creator a low percentage gives them a drive to advertise more and get more people in.

Or they just had two different people code those two bits :)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481015481.205941;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481016103.910234;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>178</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 09:22:47</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 09:22:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't think the half a percent would matter that much to backers, but I hadn't considered that.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>177</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481016167.277082;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>180</wp:comment_id>
    <wp:comment_author><![CDATA[mscha]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:0983:8781:0001:a402:ec2c:2d2d:09e8</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 10:07:43</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 10:07:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[It probably makes sense to use `floor` instead of `round`, actually.
You wouldn't want it to show “100% funded” when you're at $36818.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481018863.087235;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>181</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.217.92</wp:comment_author_IP>
    <wp:comment_date>2016-12-06 11:44:33</wp:comment_date>
    <wp:comment_date_gmt>2016-12-06 11:44:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think if I were to implement this, I'd have different methods depending on where you where. For the last 2%, drop down to a single decimal place until the point where you show 99.9% until it is equal to or above the goal. But then, that's my point. A central subroutine decides all that instead of the intern who has to send out the mail.

But otherwise, yeah, I wouldn't round up I don't think.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>180</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481024673.33162;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #30: Uninstall a Perl 6 module</title>
  <link>http://www.learningraku.com/2016/12/15/quick-tip-30-uninstall-a-perl-6-module/</link>
  <pubDate>Thu, 15 Dec 2016 09:23:41 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=199</guid>
  <description/>
  <content:encoded><![CDATA[You can uninstall Perl 6 modules. Many people have asked for a way to uninstall a Perl 5 module, but that toolchain didn't do the sort of tracking that Perl 6 does. Some of these are recent developments, so you should have the most recent <a href="http://www.rakudo.org">Rakudo</a> that you can use. <!--more-->

In <a href="https://github.com/ugexe/zef">zef</a>:

<pre class="brush:plain">
$ zef uninstall Some::Module
</pre>

You might like <a href="http://ugexe.com/slightly-less-basic-perl6-module-management/">Slightly less basic Perl6 module management</a>, as well as the rest of Nick's blog.

If that doesn't work, niner has <A href="https://gist.github.com/niner/b39258032f70c083e57b">a gist that reaches into the internals</A>:

<pre class="brush:plain">
#!/usr/bin/env perl6
use v6.c;

sub MAIN($short-name, :$ver = True, :$auth = True, :$api = True) {
    my $comp-unit = $*REPO.resolve(CompUnit::DependencySpecification.new(:$short-name, :$ver, :$auth, :$api));
    $comp-unit.repo.uninstall($comp-unit.distribution);
}
</pre>

This is the final <A href="https://www.learningperl6.com/category/kickstarter-tips/">Quick Tip</a>. Thanks to everyone who helped me reach my Kickstarter goal. Now I have to get down to fulfilling your rewards and writing the book!
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>199</wp:post_id>
  <wp:post_date>2016-12-15 09:23:41</wp:post_date>
  <wp:post_date_gmt>2016-12-15 09:23:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-30-uninstall-a-perl-6-module</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="modules"><![CDATA[Modules]]></category>
  <category domain="post_tag" nicename="panda"><![CDATA[panda]]></category>
  <category domain="post_tag" nicename="zef"><![CDATA[zef]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>237</wp:comment_id>
    <wp:comment_author><![CDATA[Nick Logan]]></wp:comment_author>
    <wp:comment_author_email>ugexe@cpan.org</wp:comment_author_email>
    <wp:comment_author_url>https://ugexe.com</wp:comment_author_url>
    <wp:comment_author_IP>23.113.73.149</wp:comment_author_IP>
    <wp:comment_date>2016-12-17 02:12:12</wp:comment_date>
    <wp:comment_date_gmt>2016-12-17 02:12:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is a more robust example of a small uninstall script:

https://gist.github.com/ugexe/65e5ad0a2b49cfc060e87d770d4c8325]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481940732.540669;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1482176895.4319501;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #29: Flip-flopping junctions</title>
  <link>http://www.learningraku.com/2016/12/14/quick-tip-29-flip-flopping-junctions/</link>
  <pubDate>Wed, 14 Dec 2016 13:52:13 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=201</guid>
  <description/>
  <content:encoded><![CDATA[The <a href="https://docs.perl6.org/language/operators#infix_ff">flip flop operator</a> isn't just something for politicians and nervous interface designers. It's a feature designed to turn on and off to set a window of processing. <!--more-->

Suppose I want to see all the words between two words in <i>/usr/share/dict/words</i> (your distro may place it elsewhere). I want to extract a window of lines from a big text.

The <code><a href="https://docs.perl6.org/language/operators#infix_ff">ff</a></code> operator is False until its lefthand expression is true, and then True until its righthand expression is True. After that, it's false. So, it turns on when the left side becomes true and turns off when the right side does.

Here's a program that reads lines from a file and prints the ones between the two words I specify:

<pre class="brush:plain">
sub MAIN (
	Str :$file  = '/usr/share/dict/words',
	Str :$first!,
	Str :$last!,
	) {
	my $fh = open( $file );

	for $fh.lines -> $line {
		say $line if $line ~~ $first ff $line ~~ $last; # flip-flop
		}
	}
</pre>

It's up to me to ensure that the first value is less than the last one, and I'm going to ignore matters of case for this example:

<pre class="brush:plain">
$ perl6 words.p6 --first=fox --last=hound
fox
foxbane
foxberry
foxchop
...
Houghton
hounce
hound
</pre>

I can specify the same word for the start and end. When the particular word shows up, the flip-flop evaluates the lefthand side. Since it's the same word, the flip-flop turns on.

<pre class="brush:plain">
$ perl6 words.p6 --first=fox --last=fox
fox
</pre>

I still have to read all the lines in this example, but there it is.

The flip-flop has inclusive and exclusive versions, just like the ranges and sequences I wrote about in <a href="https://www.learningperl6.com/2016/11/18/quick-tip-3-inclusive-and-exclusive/">Quick Tip #3: Inclusive and Exclusive</a>. I can exclude either endpoint with a <code>^</code>:

<pre class="brush:plain">
sub MAIN (
	Str :$file  = '/usr/share/dict/words',
	Str :$first!,
	Str :$last!,
	) {
	my $fh = open( $file );

	for $fh.lines -> $line {
		say $line if $line ~~ $first ^ff^ $line ~~ $last; # changed!
		}
	}
</pre>

Now I don't see "fox" or "hound" in the output:

<pre class="brush:plain">
$ perl6 words.p6 --first=fox --last=hound
foxbane
foxberry
foxchop
...
Houghton
hounce
</pre>

In that example I excluded both endpoints with <code>^ff^</code>, but I can exclude either side on their own with <code><a href="https://docs.perl6.org/language/operators#infix_^ff">^ff</a></code> or <code><a href="https://docs.perl6.org/language/operators#infix_ff^">ff^</a></code>.

But, I don't have to be satisfied with one window. I can put <a href="https://docs.perl6.org/type/Junction">Junctions</a> into <code>$first</code> and <code>$last</code> to make multiple windows. Any of the values in <code>$first</code> can turn it on and any of the values in <code>$last</code> can turn it off.

<pre class="brush:perl">
sub MAIN (
	Str :$file  = '/usr/share/dict/words',
	) {
	my $fh = open( $file );

	my $first = any( &lt;cat fox> );
	my $last  = any( &lt;dog hound> );

	for $fh.lines -> $line {
		say $line if $line ~~ $first ff $line ~~ $last;
		}
	}
</pre>

Now I see that it turns off at "dog" but turns on again at "fox":

<pre class="brush:perl">
cat
catabaptist
catabases
...
doffer
doftberry
dog
fox
foxbane
foxberry
...
houghmagandy
Houghton
hounce
</pre>

If you're used to the sed version of flip-flopping, there's also <code><a href="https://docs.perl6.org/language/operators#infix_fff">fff</a></code>. This one doesn't evaluate both sides for the same element.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>201</wp:post_id>
  <wp:post_date>2016-12-14 13:52:13</wp:post_date>
  <wp:post_date_gmt>2016-12-14 13:52:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-29-flip-flopping-junctions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="junctions"><![CDATA[Junctions]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #28: Perl 6's Schwartzian Transform</title>
  <link>http://www.learningraku.com/2016/12/13/quick-tip-28-perl-6s-schwartzian-transform/</link>
  <pubDate>Tue, 13 Dec 2016 15:50:00 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=205</guid>
  <description/>
  <content:encoded><![CDATA[This is a really <a href="https://www.learningperl6.com/category/kickstarter-tips/">Quick Tip</a>. It's about the Schwartzian Transform, which makes things quicker. <!--more-->

You may have seen my presentation from the <a href="http://act.yapc.eu/alpineperl2016/">Alpine Perl Workshop 2016</a>. I talked abou the <a href="http://www.slideshare.net/brian_d_foy/the-surprisingly-tense-history-of-the-schwartzian-transform">surprisingly tense history of the Schwartzian Transform</a>. I also <A href="http://perltricks.com/article/the-history-of-the-schwartzian-transform/">wrote about it for PerlTricks</a>.

In short, Randal didn't invent it but he made it popular. The popularity wasn't immediate though.

In Perl 5 that looks like this map-sort-map:

<pre class="brush:plain">
print
  map { $_->[0] }
  sort { $a->[1] <=> $b->[1] }
  map { [$_, lc] }
  &lt;>;
</pre>

The trick is to reduce the number of time you call <code>lc</code>. There's no need to call it over and over on the same string.

How would you do the same thing in Perl 6?

First, Perl 6 has a unary version of <code><a href="https://docs.perl6.org/routine/sort#(Any)_method_sort">sort</a></code>. I tell it how to make a value then it does that for each pair of elements to compare:

<pre class="brush:plain">
my @sorted_words = sort { .lc }, @words;
</pre>

It takes two elements from the list, lowercases both of them, and compares them with string equality (cmp). You don't have to type out the <code>.lc</code> twice. This doesn't transform the elements, so the output list isn't necessarily all lowercase. It's the original list but possibly re-ordered.

Not only that, sort caches the result of the operation so it doesn't have to redo it. That is, Perl 6 already does what the Schwartzian Transform was doing!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>205</wp:post_id>
  <wp:post_date>2016-12-13 15:50:00</wp:post_date>
  <wp:post_date_gmt>2016-12-13 15:50:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-28-perl-6s-schwartzian-transform</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="performance"><![CDATA[Performance]]></category>
  <category domain="post_tag" nicename="schwartzian-transform"><![CDATA[schwartzian transform]]></category>
  <category domain="category" nicename="sorting"><![CDATA[Sorting]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>227</wp:comment_id>
    <wp:comment_author><![CDATA[Elizabeth Mattijsen]]></wp:comment_author>
    <wp:comment_author_email>liz@dijkmat.nl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.100.131.131</wp:comment_author_IP>
    <wp:comment_date>2016-12-13 17:36:40</wp:comment_date>
    <wp:comment_date_gmt>2016-12-13 17:36:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Any code block or sub will do: so you don't need to make a code block *and* call .lc in there.  You can just pass the sub directly:

my @sorted_words = sort &amp;lc, @words;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481650600.516933;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #27: Read the docs locally</title>
  <link>http://www.learningraku.com/2016/12/12/quick-tip-27/</link>
  <pubDate>Mon, 12 Dec 2016 17:13:19 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=209</guid>
  <description/>
  <content:encoded><![CDATA[The <code>p6doc</code> command helps you read the Perl 6 docs. It's in the <A href="https://github.com/perl6/doc">Perl 6 documentation repo</a> (so, it doesn't come with Rakudo). <!--more-->


Check out the <A href="https://github.com/perl6/doc">repo</a> and from within that directory install it with zef:

<pre class="brush:perl">
$ zef --depsonly install . 
</pre>

From there you should have to <code>p6doc</code> command. Run it to see what it can do:

<pre class="brush:plain">
What documentation do you want to read?
Examples: p6doc Str
          p6doc Str.split
          p6doc faq

You can list some top level documents:
          p6doc -l

You can also look up specific method/routine definitions:
          p6doc -f push

You can bypass the pager and print straight to stdout:
          p6doc -n Str
</pre>

Now, a word of caution here. Perl 6 has lots of undocumented bits and not everything works yet. But, you can help by sending pull requests. The <code>-l</code> lists the top-level pages it knows about:

<pre class="brush:plain">
$ p6doc -l
5to6-nutshell
5to6-perlfunc
5to6-perlop
5to6-perlsyn
5to6-perlvar
AST
Any
Array
Associative
Attribute
Backtrace
Bag
...
unicode_entry
unicode_texas
variables
</pre>

I can read the docs from the command line:

<pre class="brush:plain">
$ p6doc Str
TITLE
class Str

SUBTITLE
String of characters

    class Str is Cool does Stringy { }

Built-in class for strings. Objects of type Str are immutable.

Methods

  routine chop

    multi sub    chop(Str:D)  returns Str:D
    multi method chop(Str:D: $chars = 1) returns Str:D

Returns the string with $chars characters removed from the end.

  routine chomp

Defined as:

    multi sub    chomp(Str:D ) returns Str:D
    multi method chomp(Str:D:) returns Str:D
</pre>


But, this is 2016. Let's read it in the browser. First, from the directory, create the HTML files. This might take awhile (a long, long time), but you can read the same docs on <a href="http://docs.perl6.org">docs.perl6.org</a>:

<pre class="brush:plain">
$ make html
</pre>


Then, run the web app to serve it all. That's a <A href="http://www.mojolicious.org">Mojolicious</a> app, so you're throwing Perl 5 a bone.

<pre class="brush:plain">
$ make run
Starting local server…
perl5.24.0 app.pl daemon
[Tue Dec  6 11:18:29 2016] [debug] Install Mojolicious::Plugin::AssetPack to enable SASS processor. You will also need CSS::Sass module or have `sass` command working
[Tue Dec  6 11:18:29 2016] [info] Listening at "http://*:3000"
Server available at http://127.0.0.1:3000
</pre>

And this is what you get:

<div class="image center">
<div>
<img src="/images/local_perl6_docs.png" width="500" height="571" />
</div>
</div>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>209</wp:post_id>
  <wp:post_date>2016-12-12 17:13:19</wp:post_date>
  <wp:post_date_gmt>2016-12-12 17:13:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-27</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #22: Use Perl 5 modules in Perl 6</title>
  <link>http://www.learningraku.com/2016/12/07/quick-tip-22-use-perl-5-modules-in-perl-6/</link>
  <pubDate>Wed, 07 Dec 2016 17:37:20 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=215</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has always had a goal of interacting with other languages. When Larry Wall announced the project in 2000, he talked about <a href="http://www.perl.com/pub/2000/10/23/soto2000.html">translate with 95-percent accuracy 95 percent of the scripts</a>. He wanted a way to run Perl 5 from Perl 6. <!--more-->


And, with <a href="https://github.com/niner/Inline-Perl5">Inline::Perl5</a>, you can do that. Most notably, you can load Perl 5 modules:

<pre class="brush:plain">
use v6;
use Inline::Perl5;
use Business::ISBN:from&lt;Perl5>;

my $isbn = Business::ISBN.new( '9781491954324' );

say $isbn.as_isbn10.as_string;
</pre>

In the authority section of the module, I specified <code>from&lt;Perl5&gt;</code>. To make this work, you need to compile <code>perl</code> as specified in the <a href="https://github.com/niner/Inline-Perl5/blob/master/README.md">Inline::Perl5 README.md</a>. You need a <code>perl</code> compiled with <code>-Duseshrplib</code>; I had to compile a new <code>perl</code> but that wasn't a big deal.

If you are using a recent Rakudo and you've already installed <a href="https://github.com/niner/Inline-Perl5">Inline::Perl5</a>, that module loads implicitly:

<pre class="brush:plain">
use v6;
use Business::ISBN:from&lt;Perl5>;

my $isbn = Business::ISBN.new( '9781491954324' );

say $isbn.as_isbn10.as_string;
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>215</wp:post_id>
  <wp:post_date>2016-12-07 17:37:20</wp:post_date>
  <wp:post_date_gmt>2016-12-07 17:37:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-22-use-perl-5-modules-in-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="modules"><![CDATA[Modules]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #23: Use prove to run Perl 6 tests</title>
  <link>http://www.learningraku.com/2016/12/08/quick-tip-23-use-prove-to-run-perl-6-tests/</link>
  <pubDate>Thu, 08 Dec 2016 17:59:23 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=219</guid>
  <description/>
  <content:encoded><![CDATA[You can run Perl 6 tests with <code><a href="http://www.metacpan.org/module/App::prove">prove</a></code>. Forget for a moment that <code>prove</code> is a Perl 5 tool. It's just some tool that's magically on your system. It's a <a href="https://testanything.org">Test Anywhere Protocol</a> consumer so anything that outputs TAP is fine with it. <!--more-->

I can tell the tool which program to use when it executes the test files by specifying it with <code>--exec</code>:

<pre class="brush:plain">
prove --exec perl6 some_test_file.t6
</pre>

A <a href="https://docs.perl6.org/language/testing">P6 test file</a> looks much like the old <a href="http://www.metacpan.org/module/">Test::More</a> stuff that you already know. However, since we've started fresh, it's just <a href="https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6">Test</a>:

<pre class="brush:plain">
use v6;

use Test;

subtest 'is' => {
	is( "4", 4, "How do the Str and Int do?" );
	is( <4>, 4, "How do the IntStr and Int do?" );
	}

subtest 'isa' => {
	isa-ok( <4>, IntStr );
	isa-ok( <4>, Int );
	isa-ok( <4>, Str );
	isa-ok( <4>, Rat );  # !!!
	}

done-testing;
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>219</wp:post_id>
  <wp:post_date>2016-12-08 17:59:23</wp:post_date>
  <wp:post_date_gmt>2016-12-08 17:59:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-23-use-prove-to-run-perl-6-tests</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="post_tag" nicename="prove"><![CDATA[prove]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>199</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Legrady]]></wp:comment_author>
    <wp:comment_author_email>tom@TomLegrady.com</wp:comment_author_email>
    <wp:comment_author_url>http://which-dwarf-are-you.blogspot.ca/</wp:comment_author_url>
    <wp:comment_author_IP>199.198.223.104</wp:comment_author_IP>
    <wp:comment_date>2016-12-09 16:34:25</wp:comment_date>
    <wp:comment_date_gmt>2016-12-09 16:34:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[102% woohoo!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481301265.8749969;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>200</wp:comment_id>
    <wp:comment_author><![CDATA[coke]]></wp:comment_author>
    <wp:comment_author_email>will@coleda.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>199.168.151.121</wp:comment_author_IP>
    <wp:comment_date>2016-12-09 20:51:48</wp:comment_date>
    <wp:comment_date_gmt>2016-12-09 20:51:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[FYI, superstitious parens on the is calls.

perl6 -e 'use Test; is "4", 4, "nope"';]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481316708.048913;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481407879.072051;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>201</wp:comment_id>
    <wp:comment_author><![CDATA[Curt]]></wp:comment_author>
    <wp:comment_author_email>curt@tilmes.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>100.16.33.137</wp:comment_author_IP>
    <wp:comment_date>2016-12-10 04:28:05</wp:comment_date>
    <wp:comment_date_gmt>2016-12-10 04:28:05</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Once you've switched permanently to Perl 6:
echo --exec perl6 &gt;&gt; ~/.proverc]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481344085.275857;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481407874.8439951;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #24: How long did that take?</title>
  <link>http://www.learningraku.com/2016/12/09/quick-tip-24-how-long-did-that-take/</link>
  <pubDate>Fri, 09 Dec 2016 20:13:38 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=223</guid>
  <description/>
  <content:encoded><![CDATA[I can use P6's <a href="/2016/11/30/quick-tip-15-phasers/">phasers</a> to track how my program moves from one phase to the next. In particular, I'm curious about how much time my program spends in the compile-phase. P6 might be a bit slow now, or at least slower than you think it should be, but that's okay. The core developers want to be correct first and fast second (but, also both). If you look at the <A href="https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog">Rakudo change logs</a>, you see lots of entries mentioning big speedups in things they got working first and are now optimizing. <!--more-->

Here I use <code>BEGIN</code> and <code>INIT</code>, although I leave off their braces. In the first <code>put</code> I concatenate a result with its label. In the second <code>put</code>, I interpolate a result into a string by placing code in braces in the string:

<pre class="brush:plain">
put "Compile to run time: " ~ INIT now - BEGIN now;
sleep 3;
put "Run time to finish: { now - INIT now }";
</pre>

I see that the compile time isn't that bad (it's not humanly noticeable in this program):

<pre class="brush:plain">
Compile to run time: 0.03161371
Run time to finish: 3.00564300
</pre>

You might think its weird that those numbers come out like that when it looks like some things happen earlier than the statement that creates them. I can expand the example to see that the phasers fire before the statements that contain them:

<pre class="brush:plain">
INIT { put "Starting run time at { now }" }
END  { put "Ending at { now }" }

put "Compile to run time: " ~
	INIT { put "INIT in run time message { now }"; now } \ # unspace!
		-
	BEGIN { put "BEGIN in run time message { now }"; now }
	;
sleep 3;
put "Run time to finish: {
	now - INIT { put "INIT in finish message { now }"; now }
	}";
</pre>

You can see that <code>now</code> creates an <a href="https://docs.perl6.org/type/Instant">Instant</a> object:

<pre class="brush:plain">
BEGIN in run time message Instant:1481307679.940645
Starting run time at Instant:1481307679.995588
INIT in run time message Instant:1481307679.996641
INIT in finish message Instant:1481307679.998188
Compile to run time: 0.0538441
Run time to finish: 3.0023635
Ending at Instant:1481307683.004673
</pre>

I wanted to check how much of a hit I take by <a href="/2016/12/07/quick-tip-22-use-perl-5-modules-in-perl-6/">loading a Perl 5 module</a>:

<pre class="brush:plain">
use Business::ISBN:from&lt;Perl5>;

my $isbn = Business::ISBN.new( '9781491954324' );
put "ISBN: ", $isbn.as_string;

put "Compile to run time: " ~ INIT now - BEGIN now;
sleep 3;
put "Run time to finish: { now - INIT now }";
</pre>

The results are much better than I thought. Even loading a file from a foreign language is quick. It's not even noticeable:

<pre class="brush:plain">
ISBN: 978-1-4919-5432-4
Compile to run time: 0.0359533
Run time to finish: 3.0084209
</pre>

If I loaded a different, more complicated module these result may be different. But, I was interested if there was a penalty for loading any module. I don't see it.

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>223</wp:post_id>
  <wp:post_date>2016-12-09 20:13:38</wp:post_date>
  <wp:post_date_gmt>2016-12-09 20:13:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-24-how-long-did-that-take</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="performance"><![CDATA[Performance]]></category>
  <category domain="category" nicename="phasers"><![CDATA[Phasers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Quick Tip #25: Very literal Quoting</title>
  <link>http://www.learningraku.com/2016/12/10/quick-tip-25-very-literal-quoting/</link>
  <pubDate>Sat, 10 Dec 2016 09:02:04 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=229</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has a basic <a href="https://docs.perl6.org/language/quoting">quoting mechanism</a> that is as literal as it can be. It doesn't escape anything and doesn't interpolate anything. The <code>Q</code> does nothing special so you get a string as close to exactly what you see: <!--more-->

<pre class="brush:plain">
$ perl6
> Q/Single quote delimiter with \/; # no escaping
Single quote delimiter with \
> Q/This is about $var./ # no interpolation
This is about $var.
> Q"This is still about $var." # still no interpolation
This is still about $var.
> Q"C:\\This\is\a\path" # no \ proliferation!
C:\\This\is\a\path
</pre>

It does have on interesting feature. It knows how to count balanced delimiters. If I use one of the paired characters, I can have the opening version in the literal string as long as the open and closing bits are balanced (so, every opener has a closer):

<pre class="brush:plain">
> Q&lt; I have some &lt;&lt; inside >> >
 I have some &lt;&lt; inside >>
</pre>

If I don't have balanced thingys, I have a problem:

<pre class="brush:plain">
> Q&lt; I have some &lt;&lt; inside  >
===SORRY!=== Error while compiling:
Couldn't find terminator > (corresponding &lt; was at line 1)
at line 2
------> &lt;BOL>⏏&lt;I EOL>
    expecting any of:
        >
</pre>

I wouldn't recommend this, though, because I can choose many other delimiters:

<pre class="brush:plain">
> Q&#x1f431;I have some >> inside&#x1f431;
I have some >> inside
</pre>

I can't use anything I like as a delimiter, though, and some of the exclusions may surprise you:

<table>
<tr>
	<th>Prohibited</th>
	<th>Reason</th>
</tr>

<tr>
	<td><code>#</code></td>
	<td>start of a comment</td>
</tr>
<tr>
	<td><code>(</code></td>
	<td>Looks like a function call</td>
</tr>
<tr>
	<td><code>:</code></td>
	<td>Starts an adverb</td>
</tr>
<tr>
	<td><code>'</code></td>
	<td>Identifier character</td>
</tr>
<tr>
	<td><code>-</code></td>
	<td>Identifier character</td>
</tr>
<tr>
	<td>word characters</td>
	<td>Because that's crazy</td>
</tr>
</table>

The rest of the quoting mechanisms build up from there. Other quoting forms have their own operators, such as <code>q//</code> for single quoting with limited escaping and qq// for double quoting with interpolation. The <Code>Q</code> can handle them will an adverb:

<pre class="brush:plain">
q/This has a backslash \n/
Q:q//This has a backslash \n/
qq/This and a newline \n/
Q:qq/This and a newline \n/
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>229</wp:post_id>
  <wp:post_date>2016-12-10 09:02:04</wp:post_date>
  <wp:post_date_gmt>2016-12-10 09:02:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-25-very-literal-quoting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <category domain="category" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>208</wp:comment_id>
    <wp:comment_author><![CDATA[samcv]]></wp:comment_author>
    <wp:comment_author_email>samantham@posteo.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2601:0646:c002:2557:41d5:071c:7908:5480</wp:comment_author_IP>
    <wp:comment_date>2016-12-11 09:17:36</wp:comment_date>
    <wp:comment_date_gmt>2016-12-11 09:17:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You actually can use `'`, `-` and `()` for quoting:
q 'message' or q (message)

But you must have a space between them for identifiers. You still can't use `q :message:`]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481447856.854893;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481494127.5597601;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>210</wp:comment_id>
    <wp:comment_author><![CDATA[duelafn]]></wp:comment_author>
    <wp:comment_author_email>dean@serenevy.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>73.50.64.207</wp:comment_author_IP>
    <wp:comment_date>2016-12-11 15:15:47</wp:comment_date>
    <wp:comment_date_gmt>2016-12-11 15:15:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[`#` is also not allowed as a delimeter.

    &gt; Q# Foo #
    ===SORRY!=== Error while compiling:
    # not allowed as delimiter]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481469347.2178569;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481493988.0139611;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>213</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>197.86.174.18</wp:comment_author_IP>
    <wp:comment_date>2016-12-11 22:10:16</wp:comment_date>
    <wp:comment_date_gmt>2016-12-11 22:10:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[By "can", do you mean the current implementation allows it or the spec allows it? The latest docs say that identifier characters are disallowed. In most cases I'm avoiding uses that the docs don't allow because I figure the interpreter will change.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>208</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481494216.0945101;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>214</wp:comment_id>
    <wp:comment_author><![CDATA[samcv]]></wp:comment_author>
    <wp:comment_author_email>samantham@posteo.net</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2601:0646:c002:2557:41d5:071c:7908:5480</wp:comment_author_IP>
    <wp:comment_date>2016-12-11 23:12:58</wp:comment_date>
    <wp:comment_date_gmt>2016-12-11 23:12:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[See this here. https://docs.perl6.org/language/quoting#Literal_strings:_Q
"Some delimiters are not allowed *immediately* after Q, q, or qq."

And see the example. I was the one who added this to the docs and I probably wouldn't have realized this if not for testing 15+ delimiters for my Atom Perl6 syntax highlighter and verifying each one was usable by Perl 6.

The synopsis doesn't specify that identifiers are not allowed, but it is not workable to have identifiers in there without a space.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>213</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481497978.2954881;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>219</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>196.215.117.107</wp:comment_author_IP>
    <wp:comment_date>2016-12-12 18:36:23</wp:comment_date>
    <wp:comment_date_gmt>2016-12-12 18:36:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[For what it's worth, your patch showed up after I'd already written this article. If I had more than my phone this week I could do major surgery. :)

And, another commenter points out that the <code>#</code> character doesn't work as a delimiter either.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>214</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481567783.0247891;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>223</wp:comment_id>
    <wp:comment_author><![CDATA[UnicodeQuotes]]></wp:comment_author>
    <wp:comment_author_email>unicode+quotes@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>85.253.178.107</wp:comment_author_IP>
    <wp:comment_date>2016-12-12 22:34:40</wp:comment_date>
    <wp:comment_date_gmt>2016-12-12 22:34:40</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Why type Q when you can use ｢ ｣ ? :)

say ｢hello world｣]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1481582081.009532;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1481732803.685509;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Quick Tip #26: Keep just the good parts</title>
  <link>http://www.learningraku.com/2016/12/11/quick-tip-26-keep-just-the-good-parts/</link>
  <pubDate>Sun, 11 Dec 2016 12:11:25 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=234</guid>
  <description/>
  <content:encoded><![CDATA[Ever wanted to break up a string based on the parts that you wanted to keep? You probably already know about <code><a href="https://docs.perl6.org/routine/split">split</a></code>; it uses a pattern to find the parts to discard. Perl 6's <code><A hre"https://docs.perl6.org/routine/comb">comb</a></code> uses a pattern to find the parts of a string it keeps. <!--more-->

Suppose you want to keep all the words, which for this example you consider that to mean groups of non-whitespace. The pattern you want to keep is <code>/ \S+ /</code> (remember that patterns have insignificant). Here's what that could look like in the REPL:

<pre class="brush:plain">
$ perl6
To exit type 'exit' or '^D'
> $_ = 'Hamadryas chloe'
Hamadryas chloe
> .comb( /\S+/ )  # operates on $_ by default
(Hamadryas chloe)
> .comb( /\S+/ ).elems
2
</pre>

That doesn't look much different than the string you started with even though it is now two elements. The REPL prints out what it considers to be a nicely formatted string, but sometimes that's confusing. You could look at it with <code>.perl</code> instead:

<pre class="brush:plain">
> .comb( /\S+/ ).perl
("Hamadryas", "chloe").Seq
</pre>

Now you see the two elements. However, there's a more interesting way to do this. You can use the <code><a href="https://docs.perl6.org/routine/fmt">fmt</a></code> method on a list. It will apply its template to each item in the list. You can easily surround each word with braces, for example:

<pre class="brush:plain">
> .comb( /\S+/ ).fmt( '{%s}' )
{Hamadryas} {chloe}
</pre>

Now you can see which parts of the string belong to which element. This feature pleases me more and more each time I use it. Even though you could do this with a <code>map</code>, this is so much easier.

Try it on this string to extract the species from these scientific names. The <code>&lt;?after ...</code> is a <A href="https://docs.perl6.org/language/regexes#Lookbehind_assertions">lookbehind assertion</a> that says that pattern has to come before the part the matches. But, it matches a condition at a particular point of the string instead of matching characters so that part is part of what <code>comb</code> keeps:

<pre class="brush:plain">
> $_ = 'Hamadryas chloe, Hamadryas epinome, Hamadryas laodamia'
Hamadryas chloe, Hamadryas epinome, Hamadryas laodamia
> .comb( /&lt;?after Hamadryas \s+> &lt;[a..z]>+/ )
(chloe epinome laodamia)
> .comb( /&lt;?after Hamadryas \s+> &lt;[a..z]>+/ ).fmt( '{%s}' )
{chloe} {epinome} {laodamia}
</pre>

Here's something a bit more complicated (and contrived even). Make a pattern to grab the items out of a list separated by commas with a final <code>and</code>:

<pre class="brush:plain">
> $_ = 'Daphnaeae, Epimeliades, Kissiae, and Meliae'
Daphnaeae, Epimeliades, Kissiae, and Meliae
> .comb( rx:i/ &lt;[a..z]>+ &lt;?before [\, \s+ [and \s+]? | $ ]> / )
(Daphnaeae Epimeliades Kissiae Meliae)
</pre>

There's a lookahead assertion that looks for a "comma whitespace with optional and" or the end of string. I'll leave it as an exercise for the reader to work this out for styles that (mistakenly) eschew the Oxford comma.

It's probably easier to split on the separators in this case, but you're playing with <code>comb</code> in this tip. You'll appreciate this more when the parts separating the good bits are more complicated to match than the other way around.

And, for a final tip, <code>comb</code> with no pattern splits into characters:

<pre class="brush:plain">
> .comb
(D a p h n a e a e ,   E p i m e l i a d e s ,   K i s s i a e ,   a n d   M e l i a e)
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>234</wp:post_id>
  <wp:post_date>2016-12-11 12:11:25</wp:post_date>
  <wp:post_date_gmt>2016-12-11 12:11:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-tip-26-keep-just-the-good-parts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="comb"><![CDATA[comb]]></category>
  <category domain="category" nicename="kickstarter-tips"><![CDATA[Kickstarter Tips]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Translating the perlfaq to Perl 6</title>
  <link>http://www.learningraku.com/2016/12/19/translating-the-perlfaq-to-perl-6/</link>
  <pubDate>Mon, 19 Dec 2016 22:30:11 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=241</guid>
  <description/>
  <content:encoded><![CDATA[I started a GitHub project to <A href="https://github.com/briandfoy/perl5faq_in_perl6">translate the Perl 5 perlfaq to Perl 6</a>. For years I maintained those documents so they are a bit special to me. Sadly, the <A href="https://github.com/tpf/perlfaq">canonical TPF repo</a> started over in 2012 with the sources current in v5.15, so most of that history has been lost. Oh well. <!--more-->

I don't want to create a new FAQ for Perl 6, because an <A href="https://docs.perl6.org/language/faq.html">official FAQ</a> already exists. If that document steals from this new project, that's fine with me. I'm doing this just because I am, and if you want to help or play with it, welcome! But, I'm just translating and adapting, not adding or deleting.

I grabbed the perlfaq questions and put them into new documents, created a repo, and filled in some of the basic meta-answers for perlfaq1. I'm curious how the rest of the perlfaq would turn out. The questions were things important to people twenty years ago. How does that hold up today?

<ul>
<li>Some things might not matter anymore in Perl 6
<li>Some things use different tools now
<li>The modules have all changed, and if they haven't, we can <a href="/2016/12/07/quick-tip-22-use-perl-5-modules-in-perl-6/">use the Perl 5 modules</a>.
</ul>

If it doesn't matter anymore, keeping the question but explaining the way Perl 6 handles it for you is something some people will appreciate. If it's a task-based question, people probably still have the question (and will have it frequently).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>241</wp:post_id>
  <wp:post_date>2016-12-19 22:30:11</wp:post_date>
  <wp:post_date_gmt>2016-12-19 22:30:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>translating-the-perlfaq-to-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="faq"><![CDATA[FAQ]]></category>
  <category domain="post_tag" nicename="perlfaq"><![CDATA[perlfaq]]></category>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A dedicated LearningPerl6 Twitter account</title>
  <link>http://www.learningraku.com/2016/12/19/a-dedicated-learningperl6-twitter-account/</link>
  <pubDate>Mon, 19 Dec 2016 22:40:49 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=243</guid>
  <description/>
  <content:encoded><![CDATA[If you only want my Perl 6 messages, I've created a new <a href="https://twitter.com/LearningPerl6">@LearningPerl6</a> Twitter account. Like my other <a href="https://twitter.com/briandfoy_perl">@briandfoy_perl</a> is mostly just Perl with some things that Perl people might like, this one will be even more restricted. If you like feeds, this blog can do that. You'll get the same articles on Twitter (through <a href="https://dlvrit.com">dlvr.it</a>), as well as other interesting things I might run across. <!--more-->

<div class="center image">
<div>
<img src="/images/twitter_profile_pic_blog.png" />
</div>
</div>

And, if there's another social media spot you'd like to get notices, let me know about those. I'll see what I can do.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>243</wp:post_id>
  <wp:post_date>2016-12-19 22:40:49</wp:post_date>
  <wp:post_date_gmt>2016-12-19 22:40:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-dedicated-learningperl6-twitter-account</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Downloads</title>
  <link>http://www.learningraku.com/downloads/</link>
  <pubDate>Thu, 22 Dec 2016 19:03:26 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=246</guid>
  <description/>
  <content:encoded><![CDATA[For the book I provide interesting content and exercise aids. Until I get this more organized, I'll keep all of that in the <a href="https://github.com/briandfoy/LearningPerl6_Downloads">LearningPerl6_Downloads</a> GitHub repo.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>246</wp:post_id>
  <wp:post_date>2016-12-22 19:03:26</wp:post_date>
  <wp:post_date_gmt>2016-12-22 19:03:26</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>downloads</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Strip leading spaces from here-docs</title>
  <link>http://www.learningraku.com/2016/12/25/strip-leading-spaces-from-here-docs/</link>
  <pubDate>Sun, 25 Dec 2016 05:37:17 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=248</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://www.effectiveperlprogramming.com/2016/12/strip-leading-spaces-from-here-docs-with-v5-26/">Perl v5.26 steals Perl 6's feature to strip leading whitespace from here-docs</a>. I wrote about that for The Effective Perler, but here's the same thing for <A href="https://docs.perl6.org/language/quoting#Heredocs:_:to">Perl 6 here-docs</a>. As with most things, the Perl 5 feature is slightly different. <!--more-->

Before v5.26, you had to start your here-doc lines at the beginning of the line. This doesn't line up with the indention, which some people find annoying:

<pre class="brush:plain">
use v5;

sub say_something {
	my $string =<<'HERE';
This line is not indented
Neither is this line
And the delimiter is not indented
HERE

	print $string;
	}

say_something();
</pre>

Perl 6 already strips leading whitespace from the lines inside a here-doc. It

<pre class="brush:plain">
use v6;

sub say_something {
	my $string = q:to/HERE/;
		This line is not indented
			But this line is indented
		And the delimiter is not indented
		HERE

	print $string;
	}

say_something();
</pre>

The whitespace before the final delimiter is stripped from each line in the string:

<pre class="brush:plain">
This line is not indented
	But this line is indented
And the delimiter is not indented
</pre>

This still works if you don't have the same whitespace before each line:

<pre class="brush:plain">
use v6;

sub say_something {
	my $string = q:to/HERE/;
		This line is not indented
			But this line is indented
And the delimiter is not indented
		HERE

	print $string;
	}

say_something();
</pre>

It works, but you get a warning (in Perl 5 this would be a compilation error). In my code I had two tabs; apparently it translates that into eight spaces:

<pre class="brush:plain">
This line is not indented
	But this line is indented
And the delimiter is not indented
Asked to remove 16 spaces, but the shortest indent is 0 spaces
  in any trim_heredoc at gen/moar/m-Perl6-Actions.nqp line 499
</pre>

It tries to strip as much whitespace as it can (up to the amount in front of the delimiter). Since it considers a tab as eight spaces, the amount of space it strips might make the string look different than your typing. This version has a mix of spaces and tabs (although something might translate this example before you get it):

<pre class="brush:plain">
use v6;

sub say_something {
	my $string = q:to/HERE/;
		This line has two tabs
			This line has three tabs
                But this one has 16 spaces
		HERE

	print $string;
	}

say_something();
</pre>

Allow it looks like the last line is indented more, when it converts tabs to eight spaces, the third line isn't indented at all:

<pre class="brush:plain">
This line has two tabs
	This line has three tabs
But this one has 16 spaces
</pre>

But, a tab isn't just eight spaces. It's the number of spaces to get to the next multiple of 8. The last line of this here-doc mixes tabs and spaces:

<pre class="brush:plain">
use v6;

sub say_something {
	my $string = q:to/HERE/;
		This line has two tabs
			This line has three tabs
    	    But this one has 4 spaces, a tab, and 4 spaces
		HERE

	print $string;
	}

say_something();
</pre>

You get a warning. This time it thinks there are 12 spaces in the last line:

<pre class="brush:plain">
This line has two tabs
	This line has three tabs
But this one has 4 spaces, a tab, and 4 spaces
Asked to remove 16 spaces, but the shortest indent is 12 spaces
  in any trim_heredoc at gen/moar/m-Perl6-Actions.nqp line 499
</prE>

It's the same thing with more leading spaces:

<pre class="brush:plain">
use v6;

sub say_something {
	my $string = q:to/HERE/;
		This line has two tabs
			This line has three tabs
       	    But this one has 7 spaces, a tab, and 4 spaces
		HERE

	print $string;
	}

say_something();
</pre>

So, be careful how you specify those leading spaces (and how you accept patches and so on).
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>248</wp:post_id>
  <wp:post_date>2016-12-25 05:37:17</wp:post_date>
  <wp:post_date_gmt>2016-12-25 05:37:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>strip-leading-spaces-from-here-docs</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Unresolved</title>
  <link>http://www.learningraku.com/unresolved/</link>
  <pubDate>Tue, 01 Nov 2016 21:31:10 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?page_id=250</guid>
  <description/>
  <content:encoded><![CDATA[As I write the book I'm documenting the areas where Perl 6 has problems (or maybe I merely think it has problems). I'm not stopping to fix these because I have the book to write. By the time the book is published, I'll merely note that the broken things are open issues.

This isn't unusual for the first tutorial book of a language. Even Perl (4) had these issues with the first Camel and Llama books. People have done a tremendous amount of work to get the framework and structure in place, but now the finish carpenters are showing up.

<h2>RT Tickets</h2>

RT is for Rakudo things. I've created <A href="https://rt.perl.org/Ticket/Display.html?id=129926">one overall ticket</a> for the stuff I want to work for <i>Learning Perl 6</i>. That links to all of the other tickets I care about.

<ul>
<li><A href="https://rt.perl.org/Ticket/Display.html?id=129926">129926</a> Make everything in Learning Perl 6 work
</ul>

<h2>GitHub issues</h3>

Documentation issues are tracked in the <a href="https://github.com/perl6/doc">perl6/docs GitHub project</a>. It might be easier to see the <a href="https://github.com/perl6/doc/issues/created_by/briandfoy">list of open issues submitted by me</a> than rely on what I list here.

<ul>
<li><A href="https://github.com/perl6/doc/issues/1082">1082</a> my only gives lexical scope to some variables, so that's not it's defining feature.
<li><a href="https://github.com/perl6/doc/issues/1085">1085</a> Contradictory sentence for temp
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>250</wp:post_id>
  <wp:post_date>2016-11-01 21:31:10</wp:post_date>
  <wp:post_date_gmt>2016-11-01 21:31:10</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>unresolved</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Perl 6 at a Glance, by Andrew Shitov</title>
  <link>http://www.learningraku.com/2016/01/03/perl-6-at-a-glance-by-andrew-shitov/</link>
  <pubDate>Sun, 03 Jan 2016 08:19:21 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=255</guid>
  <description/>
  <content:encoded><![CDATA[<br/>

<div class="image left">
<div>
<a href="http://deeptext.media/perl6-at-a-glance/"><img src="/images/perl6-at-a-glance.jpg" height="216" width="150" /></a>
</div>
</div>

Andrew Shitov's <i><a href="http://deeptext.media/perl6-at-a-glance/">Perl 6 at a Glance</a></i> is already shipping out books. I haven't had a chance to read it myself, but from the excerpts on the website this looks like a nice survey of the Perl 6 language. It's not a tutorial book like <i>Learning Perl 6</i>, but I think it's more than enough to whet your appetite for some of the cool features.

If you are daunted by the reams of pages the printed docs would be, this 130-page book may give you what you need to know with a lot less work.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>255</wp:post_id>
  <wp:post_date>2016-01-03 08:19:21</wp:post_date>
  <wp:post_date_gmt>2016-01-03 08:19:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>perl-6-at-a-glance-by-andrew-shitov</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>indir() changes the directory just for its block</title>
  <link>http://www.learningraku.com/2016/12/30/indir-changes-the-directory-just-for-its-block/</link>
  <pubDate>Fri, 30 Dec 2016 23:15:57 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=261</guid>
  <description/>
  <content:encoded><![CDATA[<i>Update for April 2017: <code>indir</code> is now a <a href="https://docs.perl6.org/routine/indir">documented part of the language</a>.</i>

How many times have I wanted to change the current working directory for just one block? It's usually such a pain because I have to remember to change it back. <!--more-->

In Perl 6, the <code>indir</code> routine does this for me:

<pre class="brush:plain">
indir $some_dir, {
    ...; # do stuff in that directory
    }
</pre>

The current working directory is changed just for that block of code. When that block is done, the value is back to whatever it was before. That this is built into the language is quite pleasing to me (and the dependency-adverse contexts I tend to work in). There's no variable to mess with (in Perl 6 that would be <code>$*CWD</code>, which has some issues at the moment) and it reads nicely as a sentence.

This isn't documented yet (it only shows up in <a href="https://raw.githubusercontent.com/perl6/specs/master/S16-io.pod">Synopsis 16</a>, last changed 10 years ago, and was <a href="https://github.com/rakudo/rakudo/blob/beec02a6fa69e3ac290b4dd24c07d87a9f248b13/docs/announce/2014.10.md">announced as part of 2014.10</a>), but it's in there and it mostly works. At the moment (Rakudo 2016.11) it only works when the target directory is readable <i>and</i> writeable, but I've filed <a href="https://rt.perl.org/Ticket/Display.html?id=130460">RT #130460</a> about that. And, I've filed <a href="https://github.com/perl6/doc/issues/1091">GitHub #1091</a> about the lack of documentation (which depends on someone declaring what it should actually do). Since it's untested and undocumented, that means it might change or disappear. Consider that before you get too excited. But, how can you not get excited about something that makes common things really easy?

I feel a little bad that I'm not stopping to fully investigate these corner cases, but if I did that I'd never get any writing done for <i>Learning Perl 6</i>! Maybe someone else has the time to make this bit of Perl 6 tested and documented.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>261</wp:post_id>
  <wp:post_date>2016-12-30 23:15:57</wp:post_date>
  <wp:post_date_gmt>2016-12-30 23:15:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>indir-changes-the-directory-just-for-its-block</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="files-directories"><![CDATA[Files &amp; Directories]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>348</wp:comment_id>
    <wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
    <wp:comment_author_email>example@example.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>216.58.77.210</wp:comment_author_IP>
    <wp:comment_date>2016-12-31 19:27:22</wp:comment_date>
    <wp:comment_date_gmt>2016-12-31 19:27:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't know why brian is writing about stuff that's not part of Perl 6 language. The invitation to document and test this routine is misleading, as the current incantation is undesirable and your PR testing or documenting it will be rejected.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1483212442.6799409;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>349</wp:comment_id>
    <wp:comment_author><![CDATA[Brock Wilcox]]></wp:comment_author>
    <wp:comment_author_email>awwaiid@thelackthereof.org</wp:comment_author_email>
    <wp:comment_author_url>https://thelackthereof.org</wp:comment_author_url>
    <wp:comment_author_IP>2607:fb90:226e:1ead:0000:0026:3240:4401</wp:comment_author_IP>
    <wp:comment_date>2017-01-01 01:55:00</wp:comment_date>
    <wp:comment_date_gmt>2017-01-01 01:55:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Because, even if it ends up being changed or living in a library instead of the language, it is cool.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>348</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1483235700.5698609;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>821</wp:comment_id>
    <wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
    <wp:comment_author_email>broto3@zoffix.com</wp:comment_author_email>
    <wp:comment_author_url>http://perl6.party</wp:comment_author_url>
    <wp:comment_author_IP>209.195.88.2</wp:comment_author_IP>
    <wp:comment_date>2017-05-05 01:21:42</wp:comment_date>
    <wp:comment_date_gmt>2017-05-05 01:21:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[An update: indir is now part of the language. Several of the features have changed this this post was posted, but the post does not talk about them, so everything described here is still valid.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>348</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493947302.1221139;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Collating my activity to @LearningPerl6</title>
  <link>http://www.learningraku.com/2017/01/03/collating-my-activity-to-learningperl6/</link>
  <pubDate>Tue, 03 Jan 2017 06:07:26 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=265</guid>
  <description/>
  <content:encoded><![CDATA[I've already told you about the <A href="/2016/12/19/a-dedicated-learningperl6-twitter-account/">@LearningPerl6</a> twitter account, and I spent today setting up some stuff to collect what I'm doing elsewhere. I'm using <a href="http://dlvr.it">Dlvr.it</a> to put the interesting things on Twitter. This way you can see what I'm working on and what I'm thinking about. <!--more-->

<ul>
<li>a feed of <a href="http://stackoverflow.com/search?q=user%3A2766176+%5Bperl6%5D">my StackOverflow Perl 6 questions</a>
<li>a feed of the tickets I add to the <a href="https://rt.perl.org/Public/">perl6 RT queue</a>
</ul>

<h3>StackOverflow</h3>

There's a <a href="https://api.stackexchange.com">StackExchange API</a>. I can get a feed of a particular user's questions, and from that, get the question text with another query. It's not so bad; you can see it in my <a href="https://gist.github.com/briandfoy/4b4025b8026e4eee26c11811ba1a7efe">stackfeed gist</a>. It's a bit hacky (and, Perl 5), but I started with something else I had. I watched as what I thought were some simple modules start to install a bunch of things I didn't need, so I switched to making XML by hand. Yeah, I did that. You'll have to excuse the flurry of tweets that showed up because I neglected to tell the feed processor to handle only the most recent so it did all of them. Oops.

If you don't want this one from Twitter, I also have it as a <a href="https://www.learningperl6.com/downloads/stackoverflow-questions.xml">regular Atom feed through this site.</a>. I'll probably mess with it a bit more, but there it is.

<h3>The Perl 6 RT queue</h3>

The RT queue is a bit trickier since you can't get a feed out of <a href="https://rt.perl.org/Public/">the public interface</a>. I can log in, do a search, then find my secret feed URL in the upper right:

<div class="center image">
<div>
<img src="/images/rt-search-feeds.png" width="500" height="260" />
<p>You only get the Feeds menu while logged in</p>
</div>
</div>

Since this is supposed to be a secret URL, I'm not supposed to give it to the public. I can give it to Dlvr.it and let it post to @LearningPerl6 though.

If you have an RT account, you can create your own search, grab the feed for that, and add it to your own aggregator.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>265</wp:post_id>
  <wp:post_date>2017-01-03 06:07:26</wp:post_date>
  <wp:post_date_gmt>2017-01-03 06:07:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>collating-my-activity-to-learningperl6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="bugs-issues"><![CDATA[Bugs &amp; Issues]]></category>
  <category domain="post_tag" nicename="rt"><![CDATA[rt]]></category>
  <category domain="category" nicename="social-media"><![CDATA[Social Media]]></category>
  <category domain="post_tag" nicename="stackoverflow"><![CDATA[stackoverflow]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Search the Perl 6 repos with Etsy's Hound</title>
  <link>http://www.learningraku.com/2017/01/03/search-the-perl-6-repos-with-etsys-hound/</link>
  <pubDate>Tue, 03 Jan 2017 22:51:05 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=270</guid>
  <description/>
  <content:encoded><![CDATA[<div class="image center">
<div>
<img src="https://c5.staticflickr.com/3/2135/2130638404_84c86b7421.jpg"
 width="500" height="375" style="margin-left:auto;margin-right: auto;border=0;">
<p><A href="https://www.flickr.com/photos/estro/2130638404/in/photolist-4fh5yU-4pLHQm-7twak7-4oxJAp-5h8irh-9oLE2R-7dQjxW-qjC7PD-4fd6Qk-4rnfnT-dFG2gm-4XwGbT-7X3gZx-nLrwqL-pqtnLg-5TN4uu-J7g8U-4szusX-9AoQfP-4RZQvi-qznvt2-8ikYRU-84dnnC-67u5aW-71XbMG-EGZvVg-4QSXQr-qpjiqS-3yTHwC-6AUnqD-7REW8b-49We4b-nugBMy-5j2Z3t-4u8LAj-88hh5t-mAn8bb-67u5Fh-bE8inF-bMQ27c-o4GKCN-9mkmaR-jwf4dB-9AmJYf-4rnd1k-ef42Vy-nAccQ2-qfNq8X-pjzKdR-Hr2Qwd">Hound photo</a> by <a href="https://www.flickr.com/photos/estro/">Jen on Flickr</a></p>
</div>
</div>

I'm working on <a href="https://www.learningperl6.org">Learning Perl 6</a> and I spend a lot of my time going between repos to suss out various things. Etsy's <A href="https://github.com/etsy/hound">Hound</a> is a tool that makes that easier, and I've made a <a href="https://github.com/briandfoy/perl6-hound">GitHub project with my setup</a>.

<!--more-->

<a href="http://www.perl6.org">Perl 6</a> development is spread over several repositories. That's a consequence that there's no <i>a priori</i> preferred implementation, and that's on purpose.

Anything that passes the <a href="https://github.com/perl6/roast">roast tests</a> is Perl 6. That has its own repo. <a href="https://github.com/rakudo/rakudo">Rakudo</a> is one such implementation. It has its own repo.

But, Perl 6 is largely written in Perl 6. There's a smaller version of the language, <a href="https://github.com/perl6/nqp">NQP</a> for <b>N</b>ot <b>Q</b>uite <b>P</b>erl6, that targets the virtual machines. A smaller feature set makes it easier to implement new virtual targets and that should encourage more backends. NQP has its own repo.

And the <A href="https://github.com/perl6/doc">docs</a> have their own directory too.

That means it's not quite as simple as grepping (acking, whatever) a repository. These are separate projects that I'd have to keep separately updated.

Etsy released a tool they call <a href="https://github.com/etsy/hound">hound</a>, written in <a href="https://golang.org">Go</a>. They have instructions, but here's a summary:

<ul>
<li><a href="https://golang.org/dl/">Install Go 1.3+</a>. I used a binary package.
<li>Run <code>go get github.com/etsy/hound/cmds/...</code>
<li>Create a directory for <i>houndd</i> to do its work
<li>Create your <a href="https://github.com/briandfoy/perl6-hound/blob/master/config.json">config.json</a> to list the repos in that directory
<li>Run <code>$GOPATH/bin/houndd</code> in that directory
<li>Go to <a href="http://localhost:6080">http://localhost:6080</a>
</ul>

I've also built most of this into the <a href="https://github.com/briandfoy/perl6-hound/blob/master/Makefile">Makefile</a>. Use the *run* target to get it going:

<pre class="brush:plain">
$ make run
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>270</wp:post_id>
  <wp:post_date>2017-01-03 22:51:05</wp:post_date>
  <wp:post_date_gmt>2017-01-03 22:51:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>search-the-perl-6-repos-with-etsys-hound</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <category domain="category" nicename="writing-process"><![CDATA[Writing Process]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Search Perl 6 repos with Marchex/github-api-tools</title>
  <link>http://www.learningraku.com/2017/01/04/search-perl-6-repos-with-marchexgithub-api-tools/</link>
  <pubDate>Wed, 04 Jan 2017 14:44:40 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=275</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://github.com/pudge">Chris Nandor</a> has been bugging me to use the <a href="https://github.com/Marchex/github-api-tools">Github tools he helped to develop for Marchex</a>, so when <a href="/2017/01/03/search-the-perl-6-repos-with-etsys-hound/">I posted about Hound</a> he showed me another way to search multiple <a href="https://github.com/">GitHub</a> repos at the same time. This version only works if everything is on GitHub (or your Enterprise version of that), but the Hound version can work with whatever mix of version control systems have, either local, remote, or both.

<!--more-->

This task is really simple, so it's not that impressive for those tools, but you can still search multiple GitHub repos. It only looks like you need a <A href="https://github.com/settings/tokens">GitHub personal access token</a> because the tools assume you'll want to do all the other stuff too. The stuff here doesn't actually use the <a href="https://developer.github.com/v3/">GitHub API</a>.

Now I put it all together. This is really the sort of thing that Perl 5 was made to do. Here's a quickie Perl 5 example (and hey, last time is was Go, so I'm getting closer). This constructs the right query, submits it to GitHub, and opens your browser to the results.

<pre class="brush:perl">
#!/Users/brian/bin/perls/perl5.14.2
use v5.10;

# You might have Enterprise, so this would be different
$ENV{GITHUB_HOST}  //= 'github.com';
$ENV{GITHUB_TOKEN} //= 'vanilla nut taps'; # can be anything, but var needs to be defined

# https://github.com/Marchex/github-api-tools
my $binary = '/Users/brian/bin/perls/github_search5.14.2';

my $repos = join ' ', map { "repo:$_" } qw(
	rakudo/rakudo
	perl6/nqp
	perl6/doc
	perl6/roast
	perl6/specs
	);

@ARGV = qw(Mayor of Dunkin) unless @ARGV;
my @command = (
	$binary,
	'-O',
	'-f',
	"'$repos'",
	@ARGV
	);

say "@command";
system { $command[0] } @command;
</pre>

To run it, I give it something to search:

<pre class="brush:plain">
$ search_perl6 encoding
<pre>

(<a href="https://github.com/search?q=encoding%20%27repo%3Arakudo%2Frakudo%20repo%3Aperl6%2Fnqp%20repo%3Aperl6%2Fdoc%20repo%3Aperl6%2Froast%20repo%3Aperl6%2Fspecs%27&ref=searchresults&type=Code">See that result</a>).

But, I don't really need any Perl 5 here. Although the Marchex tools are in Perl 5, my program merely glues together a bunch of stuff then shells out. The Perl 6 version doesn't look that much different:

<pre class="brush:plain">
#!/Applications/Rakudo/bin/perl6
use v6;

# You might have Enterprise, so this would be different
%*ENV{'GITHUB_HOST'}  //= 'github.com';
%*ENV{'GITHUB_TOKEN'} //= 'gfy'; # can be anything, but var needs to be defined

# https://github.com/Marchex/github-api-tools
my $binary = '/Users/brian/bin/perls/github_search5.14.2';

my $repos = q:w{
	rakudo/rakudo
	perl6/nqp
	perl6/doc
	perl6/roast
	perl6/specs
	}.map( { "repo:$_" } ).join( ' ' );

@*ARGS = q:w/Mayor of Dunkin/ unless @*ARGS;
my @command = (
	$binary,
	'-O',
	'-f',
	"'$repos'",
	|@*ARGS  # flatten that list with |
	);

say "{@command}";
run |@command;  # From class Proc https://docs.perl6.org/type/Proc
</pre>

Either way I see two benefits here. I can do it from the command line and it will automatically open my browser with the results. And, I don't have to remember how to type out the query. Since it doesn't use the GitHub API, it also doesn't count against my search rate limit. So, maybe two and a half benefits.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>275</wp:post_id>
  <wp:post_date>2017-01-04 14:44:40</wp:post_date>
  <wp:post_date_gmt>2017-01-04 14:44:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>search-perl-6-repos-with-marchexgithub-api-tools</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <category domain="category" nicename="writing-process"><![CDATA[Writing Process]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Andrew Shitov's Perl at a Glance</title>
  <link>http://www.learningraku.com/2017/01/10/andrew-shitovs-perl-at-a-glance/</link>
  <pubDate>Tue, 10 Jan 2017 03:09:22 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=284</guid>
  <description/>
  <content:encoded><![CDATA[<br />

<div class="image left">
<div>
<img src="/images/perl6-at-a-glance.jpg" height="216" width="150" />
</div>
</div>


Andrew Shitov has published <a href="https://deeptext.media/perl6-at-a-glance/">Perl 6 at a Glance</a>, a survey book for the new language. I haven't had a change to read it yet, but you can buy it now and read it yourself. Some people have already received their copy. Get yours and tell everyone else about it.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>284</wp:post_id>
  <wp:post_date>2017-01-10 03:09:22</wp:post_date>
  <wp:post_date_gmt>2017-01-10 03:09:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>andrew-shitovs-perl-at-a-glance</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="other-projects"><![CDATA[Other Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Buffers, hexdump, and Perl 6 Power Tools</title>
  <link>http://www.learningraku.com/2017/01/09/buffers-hexdump-and-perl-6-power-tools/</link>
  <pubDate>Mon, 09 Jan 2017 04:25:08 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=288</guid>
  <description/>
  <content:encoded><![CDATA[I was playing the <a href="https://docs.perl6.org/type/Buf">buffers</a> and reading binary data but I ended up implementing a <A href="https://github.com/briandfoy/Perl6PowerTools/blob/master/bin/hexdump">Perl 6 version of hexdump</a>. Looking for a place to put it, I figured <A href="https://github.com/briandfoy/Perl6PowerTools">Perl6PowerTools</a> might as well exist. Now it has a single program, but I figure there are people who will look at the original <A href="http://www.perlpowertools.com/">PerlPowerTools</a> and want to translate some of those to Perl 6.

<div class="image center">
<div>
<img src="/images/hexdump.png" style="border:0" width="500" height="384" />
</div>
</div>

<!--more-->

There's quite a bit going on in the program, but I'll pull out just a bit of it. 

<pre class="brush:plain">
	my @options = qw/ C c d b o x /.grep: { $::($_) };
	while my Buf $buf = $fh.read( octets_to_read( $counter, $n ) ) {
		# You can select more than one option at a time
		# change the option order to change the output order
		# These correspond to the named Bool parameters in the signature
		for @options -> $option {
			put $counter.fmt( '%08x  ' ), &::("show_$option")($buf);
			}
		$counter += $buf.elems;
		last if $n && $counter >= $n;
		}
</pre>

I implemented the <code>-C</code>, <code>-c</code>, <code>-d</code>, <code>-b</code>, <code>-o</code>, and <code>-x</code> switches. Each of these present the data in a different way, making all the combinations of octet or words with octal, decimal, or hexadecimal. 

Surprisingly, the hexdump I have on my Mac will happily do all of these at once. That means I have it a bit easier since I don't have to create an option processing hierarchy to exclude others. I figured that Perl 6's <a href="https://docs.perl6.org/routine/multi">multi methods</a> would be good for that, which is one of the reasons I started writing the program. Even when I found out I didn't need that I kept going.

So, on each group of octets that I read, I have the opportunity to print several lines. I need to check which options are set to True. I could do that with a lot of repeated code:

<pre class="brush:plain">
		put $counter.fmt( '%08x  ' ), show_C($buf) if $C;
		put $counter.fmt( '%08x  ' ), show_c($buf) if $c;
		put $counter.fmt( '%08x  ' ), show_d($buf) if $d;
		...
</pre>

Instead, I use a variable to decide the variable name with <code>$::($some_variable)</code>. I filter out all the ones that are False:

<pre class="brush:plain">
	my @options = qw/ C c d b o x /.grep: { $::($_) };
</pre>

When it's time to output something, I go through the options that I have left. Each one has an associated subroutine, which I lookup in the same way:

<pre class="brush:plain">
		for @options -> $option {
			put $counter.fmt( '%08x  ' ), &::("show_$option")($buf);
			}
</pre>

I also thought of translating those subroutine lookups beforehand but I didn't get that far. I don't really need to keep constructing the subroutine name. That's something I can fix later.

There's something that's probably surprising to Perl 5 people. This little trick isn't limited to a particular set of variables. It works with lexicals too:

<pre class="brush:plain">
my $foo = "Some value";

put "The value of \$foo is ", $::('foo'); # works just fine.
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>288</wp:post_id>
  <wp:post_date>2017-01-09 04:25:08</wp:post_date>
  <wp:post_date_gmt>2017-01-09 04:25:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>buffers-hexdump-and-perl-6-power-tools</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="files-directories"><![CDATA[Files &amp; Directories]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6 Things About 6, at NY.pm</title>
  <link>http://www.learningraku.com/2016/12/09/6-things-about-6-at-ny-pm/</link>
  <pubDate>Fri, 09 Dec 2016 06:15:53 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=293</guid>
  <description/>
  <content:encoded><![CDATA[I gave a short talk to the <a href="https://www.meetup.com/The-New-York-Perl-Meetup-Group/">New York Perl mongers</a> about six things I like at Perl 6. I wouldn't label these as the most groundbreaking, novel, or exciting features. They are just six things I picked out from what I was thinking about this week. Sometimes it's the little touches that matter. <!--more-->

<div class="image center">
<div>
<a href="http://www.slideshare.net/brian_d_foy/6-things-about-perl-6"><img src="/images/6things.png" height="366" width="482" style="border:0"/></a>
</div>
</div>

If you'd like me to give a presentation to your group, let me know (brian.d.foy@gmail.com). I'd like to do a bunch more of these talks to get a feel for the Perl 6 audience and how I can incorporate that into the book.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>293</wp:post_id>
  <wp:post_date>2016-12-09 06:15:53</wp:post_date>
  <wp:post_date_gmt>2016-12-09 06:15:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6-things-about-6-at-ny-pm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="new-york"><![CDATA[New York]]></category>
  <category domain="post_tag" nicename="ny-pm"><![CDATA[NY.pm]]></category>
  <category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>6 More Things About 6, at Boston Perl mongers</title>
  <link>http://www.learningraku.com/2017/01/11/6-more-things-about-6-at-boston-perl-mongers/</link>
  <pubDate>Wed, 11 Jan 2017 14:22:40 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=295</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://www.theperlshop.com">The Perl Shop</a> sponsored me to present a <a href="http://www.slideshare.net/brian_d_foy/6-more-things-about-perl-6">Perl 6 talk</a> to the <a href="https://www.meetup.com/Boston-pm/">Boston Perl mongers</a> last night. I pulled out six thing that I didn't <a href="/2016/12/09/6-things-about-6-at-ny-pm/">talk about at the New York Perl mongers last month</a>. As before, these aren't really the big ideas or most exciting features. They are sometimes small corners that lead to other ideas.

<div class="image center">
<div>
<a href="http://www.slideshare.net/brian_d_foy/6-more-things-about-perl-6"><img src="/images/6more-cover.png" width="484" height="376" style="border:0"/></a>
</div>
</div>

I'm lining up some Perl mongers groups I want to visit this spring. If you'd like me to give a presentation to your group, let me know (brian.d.foy@gmail.com).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>295</wp:post_id>
  <wp:post_date>2017-01-11 14:22:40</wp:post_date>
  <wp:post_date_gmt>2017-01-11 14:22:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>6-more-things-about-6-at-boston-perl-mongers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="presentations"><![CDATA[Presentations]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>BBEdit Text Filters in Perl 6</title>
  <link>http://www.learningraku.com/2017/01/17/bbedit-text-filters-in-perl-6/</link>
  <pubDate>Tue, 17 Jan 2017 14:26:26 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=305</guid>
  <description/>
  <content:encoded><![CDATA[I've been writing BBEdit <q href="http://bbeditextras.org/wiki/index.php?title=Text_Filters">Text Filters</a> in Perl 6. This isn't revolutionary and I've made no great hack. It's not a hidden part of the BBEdit docs, and it's not a feature unique to my favorite editor. You don't even need to use Perl 6; any unix interpreter will do. Your editor can probably do the same thing, and maybe even with the same programs.

<div class="image center">
<div>
<img src="/images/text_filters.png" height="430" width="500" style="border:0"/>
</div>
</div>


<!--more-->

In your <i>.../Application Support/BBEdit/Text Filters</i>, drop in any sort of Unix script you like (mine is actually in my Dropbox folder and thus shared across my network, a feature from <a href="http://www.barebones.com/products/bbedit/bbedit10.html">BBEdit 10</A>). It uses the shebang line to run the program just as it does if you run it from the command line. This text filter gets the text you selected in the editor. Whatever you print to standard output replaces the selected text.

I wanted to turn a string into the codepoint numbers and names that represent their characters. Here's that in Perl 6:

<pre class="brush:plain">
#!/Applications/Rakudo/bin/perl6

$*IN
	.lines
	.map: {
		eager ($_.ords Z, $_.uninames).map: {
			printf "%04x %s\n", $_.list
			}
		}
</pre>

This turns text such as "Hamadryas" into this:

<pre class="brush:plain">
0048 LATIN CAPITAL LETTER H
0061 LATIN SMALL LETTER A
006d LATIN SMALL LETTER M
0061 LATIN SMALL LETTER A
0064 LATIN SMALL LETTER D
0072 LATIN SMALL LETTER R
0079 LATIN SMALL LETTER Y
0061 LATIN SMALL LETTER A
0073 LATIN SMALL LETTER S
</pre>

There's another text filter I like. I use it to align <code>=</code> and <code>=&gt;</code> (or anything that starts with <code>=</code> in code:

<pre class="brush:plain">
my $longest = 0;
my @lines;

for $*IN.lines -> $line {
	my @columns = $line.split( / \s+ '=' \S+ \s+ /, 2 );
	$longest max= @columns.[0].chars;
	push @lines, @columns;
	}

for @lines -> $line {
	printf "%-{$longest}s => %s\n", $line.list;
	}
</pre>

Notice that <code>max=</code>. That's a binary assignment with the <a href="https://docs.perl6.org/language/operators#infix_max">max</a> operator. That's like <code>$longest = $longest max @columns.[0].chars</code>.

Now I need to figure out why BBEdit won't allow me to assign a keyboard shortcut to it.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>305</wp:post_id>
  <wp:post_date>2017-01-17 14:26:26</wp:post_date>
  <wp:post_date_gmt>2017-01-17 14:26:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bbedit-text-filters-in-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>434</wp:comment_id>
    <wp:comment_author><![CDATA[Robert]]></wp:comment_author>
    <wp:comment_author_email>rlhicks@wehicks.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>134.223.116.158</wp:comment_author_IP>
    <wp:comment_date>2017-01-18 18:08:03</wp:comment_date>
    <wp:comment_date_gmt>2017-01-18 18:08:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's cool. I forgot you use BBEdit too. I've used it since the "original" Mac days.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1484762883.1181099;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1485416246.820734;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>467</wp:comment_id>
    <wp:comment_author><![CDATA[Brad Gilbert]]></wp:comment_author>
    <wp:comment_author_email>b2gills@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>64.191.7.0</wp:comment_author_IP>
    <wp:comment_date>2017-01-24 05:07:25</wp:comment_date>
    <wp:comment_date_gmt>2017-01-24 05:07:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I prefer

<pre>
my @lines = $*IN.lines».split: / \s+ '=' \S+ \s+/, 2;
my $longest = max @lines[*;0]».chars;
printf "%-{$longest}s =&gt; %s\n", |$_ for @lines
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1485234445.4321091;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1485416248.5302849;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Three ways to pretty print Perl 6</title>
  <link>http://www.learningraku.com/2017/01/26/three-ways-to-pretty-print-perl-6/</link>
  <pubDate>Thu, 26 Jan 2017 07:39:56 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=309</guid>
  <description/>
  <content:encoded><![CDATA[I've had my head down working on the "Grammars" chapter, and along
the way I've been using <code>dd</code> to look at things. It's better than nothing, but it's also very compact and unwrapped. I really wanted a pretty printer, and I was even prepared to write my own. But, I don't have to. Here are three modules that can do it for you. <!--more-->

But Jeff Goff has already written <a href="https://github.com/drforr/perl6-pp">Pretty::Printer</a>. I wasn't able to install it with panda or zef (and it's not listed on <a href="http://modules.perl6.org">modules.perl6.org</a>). But, you can get it from the <a href="https://github.com/drforr/perl6-pp">perl6-pp GitHub repo</a>.

Here's a structure that I want to inspect. It includes a <A href="https://docs.perl6.org/type/Match">Match</a> object with a named capture:

<pre class="brush:plain">
use v6;
use lib qw/lib/;

my $match = ('123456789' ~~ m:g/$&lt;digit>=(\d+:)/);

my %hash =
	dog => 'Nikki',
	cat => 'Buster',
	butterfly => 'Hamadryas',
	array => [ 5 .. 10 ],
	complex => {
		one => 37,
		two => "Buster",
		three => [ 3..7 ],
		four => {
			array => [ 4..7 ],
			hash  => {
				dog => 'Newfie',
				}
			},
		},
	match => $match;
	;
</pre>

I can use the built-in <code>dd</code> to get this very compact representation that just needs whitespace in the right places:

<pre class="brush:plain">
Hash %hash = {:array($[5, 6, 7, 8, 9, 10]), :butterfly("Hamadryas"), :cat("Buster"), :complex(${:four(${:array($[4, 5, 6, 7]), :hash(${:dog("Newfie")})}), :one(37), :three($[3, 4, 5, 6, 7]), :two("Buster")}), :dog("Nikki"), :match($(Match.new(ast => Any, list => (), hash => Map.new((:digit(Match.new(ast => Any, list => (), hash => Map.new(()), orig => "123456789", to => 9, from => 0)))), orig => "123456789", to => 9, from => 0),))}
</pre>

With <a href="https://github.com/drforr/perl6-pp/pull/2">Pretty::Printer</a> (using the <a href="https://github.com/drforr/perl6-pp/pull/2">pull request I just sent</a>), I can choose some formatting options:

<pre class="brush:plain">
use Pretty::Printer;

my $pp = Pretty::Printer.new(
	pre-item-spacing       => "\n",
	post-item-spacing      => "\n",

	intra-group-spacing    => "",

	pre-separator-spacing  => '',
	post-separator-spacing => "\n",

	indent-style           => "   ",
	);

say $pp.pp( %hash );
</pre>

The output is a bit rough, but it's much easier for me to read, especially with the match stuff:

<pre class="brush:plain">
${
   :array($[
      5,
      6,
      7,
      8,
      9,
      10
   ]),
   :butterfly("Hamadryas"),
   :cat("Buster"),
   :complex(${
      :four(${
         :array($[
            4,
            5,
            6,
            7
         ]),
         :hash(${
            :dog("Newfie")
         })
      }),
      :one(37),
      :three($[
         3,
         4,
         5,
         6,
         7
      ]),
      :two("Buster")
   }),
   :dog("Nikki"),
   :match($(
         Match.new(${
                    :ast(Any),
                    :from(0),
                    :hash(Map.new(
                       :digit(Match.new(${
                              :ast(Any),
                              :from(0),
                              :hash(Map.new()),
                              :list($()),
                              :orig("123456789"),
                              :to(9)
                       })))),
                    :list($()),
                    :orig("123456789"),
                    :to(9)
         })
   ))
}
</pre>

There's also <a href="https://github.com/tony-o/perl6-data-dump">Data::Dump</a> (which you can install with <i>panda</i>:

<pre class="brush:plain">
use Data::Dump;
say Dump %hash;
</pre>

I find the output is a bit too detailed for most of my needs, but does fine with the <A href="https://docs.perl6.org/type/Match">Match</a> object. Although you can't see it here, the output can be colored if your terminal supports that:

<pre class="brush:plain">
{
  array     => [
    5.Int,
    6.Int,
    7.Int,
    8.Int,
    9.Int,
    10.Int,
  ],
  butterfly => "Hamadryas".Str,
  cat       => "Buster".Str,
  complex   => {
    four  => {
      array => [
        4.Int,
        5.Int,
        6.Int,
        7.Int,
      ],
      hash  => {
        dog => "Newfie".Str,
      },
    },
    one   => 37.Int,
    three => [
      3.Int,
      4.Int,
      5.Int,
      6.Int,
      7.Int,
    ],
    two   => "Buster".Str,
  },
  dog       => "Nikki".Str,
  match     => [
    Match :: (
      $!CURSOR => undefined,
      $!from  => 0.Int,
      $!made  => (Any),
      $!orig  => "123456789".Str,
      $!to    => 9.Int,
      %!hash  => {
        digit => Match :: (
          $!CURSOR => undefined,
          $!from  => 0.Int,
          $!made  => (Any),
          $!orig  => "123456789".Str,
          $!to    => 9.Int,
          %!hash  => { },
          @!list  => [ ],

          method ACCEPTS () returns Mu {...},
          method BUILD (:@list, :%hash) returns Nil {...},
          method Bool () returns Mu {...},
          method Bool () returns Mu {...},
          method CURSOR () returns Mu {...},
          method Capture () returns Mu {...},
          method FLATTENABLE_HASH () returns Mu {...},
          method FLATTENABLE_LIST () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Method+{<anon|140185815714976>}.new () returns Mu {...},
          method Numeric () returns Mu {...},
          method Numeric () returns Mu {...},
          method Str () returns Mu {...},
          method Str () returns Mu {...},
          method WHICH () returns Mu {...},
          method ast () returns Mu {...},
          method caps () returns Mu {...},
          method chunks () returns Mu {...},
          method elems () returns Mu {...},
          method from () returns Mu {...},
          method from-args () returns Mu {...},
          method gist () returns Mu {...},
          method gist () returns Mu {...},
          method hash () returns Mu {...},
          method list () returns Mu {...},
          method made () returns Mu {...},
          method make (Mu \made) returns Mu {...},
          method new (:$orig, :$from, :$to, :$CURSOR, :$made) returns Mu {...},
          method new (:@list, :%hash) returns Mu {...},
          method orig () returns Mu {...},
          method perl () returns Mu {...},
          method perl () returns Mu {...},
          method postmatch () returns Mu {...},
          method prematch () returns Mu {...},
          method to () returns Mu {...},
        ),
      },
      @!list  => [ ],

      method ACCEPTS () returns Mu {...},
      method BUILD (:@list, :%hash) returns Nil {...},
      method Bool () returns Mu {...},
      method Bool () returns Mu {...},
      method CURSOR () returns Mu {...},
      method Capture () returns Mu {...},
      method FLATTENABLE_HASH () returns Mu {...},
      method FLATTENABLE_LIST () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Method+{&lt;anon|140185815714976>}.new () returns Mu {...},
      method Numeric () returns Mu {...},
      method Numeric () returns Mu {...},
      method Str () returns Mu {...},
      method Str () returns Mu {...},
      method WHICH () returns Mu {...},
      method ast () returns Mu {...},
      method caps () returns Mu {...},
      method chunks () returns Mu {...},
      method elems () returns Mu {...},
      method from () returns Mu {...},
      method from-args () returns Mu {...},
      method gist () returns Mu {...},
      method gist () returns Mu {...},
      method hash () returns Mu {...},
      method list () returns Mu {...},
      method made () returns Mu {...},
      method make (Mu \made) returns Mu {...},
      method new (:$orig, :$from, :$to, :$CURSOR, :$made) returns Mu {...},
      method new (:@list, :%hash) returns Mu {...},
      method orig () returns Mu {...},
      method perl () returns Mu {...},
      method perl () returns Mu {...},
      method postmatch () returns Mu {...},
      method prematch () returns Mu {...},
      method to () returns Mu {...},
    ),
  ],
}
</pre>

And, there's <a href="https://github.com/nkh/P6-Data-Dump-Tree">Data::Dump::Tree</a>, which is also colorized. 

<pre class="brush:plain">
use Data::Dump::Tree;
say dump %hash;
</pre>

It might be more comfortable for people used to the Microsoft hierarchical interfaces, but notice how it's not that interesting for <A href="https://docs.perl6.org/type/Match">Match</a> objects:

<pre class="brush:plain">
{6} @0
├ array => [6] @1
│ ├ 0 = 5.Int
│ ├ 1 = 6.Int
│ ├ 2 = 7.Int
│ ├ 3 = 8.Int
│ ├ 4 = 9.Int
│ └ 5 = 10.Int
├ butterfly => Hamadryas.Str
├ cat => Buster.Str
├ complex => {4} @2
│ ├ four => {2} @3
│ │ ├ array => [4] @4
│ │ │ ├ 0 = 4.Int
│ │ │ ├ 1 = 5.Int
│ │ │ ├ 2 = 6.Int
│ │ │ └ 3 = 7.Int
│ │ └ hash => {1} @5
│ │   └ dog => Newfie.Str
│ ├ one => 37.Int
│ ├ three => [5] @6
│ │ ├ 0 = 3.Int
│ │ ├ 1 = 4.Int
│ │ ├ 2 = 5.Int
│ │ ├ 3 = 6.Int
│ │ └ 4 = 7.Int
│ └ two => Buster.Str
├ dog => Nikki.Str
└ match => (1) @7
  └ 0 = 123456789[0..9|
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>309</wp:post_id>
  <wp:post_date>2017-01-26 07:39:56</wp:post_date>
  <wp:post_date_gmt>2017-01-26 07:39:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>three-ways-to-pretty-print-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>802</wp:comment_id>
    <wp:comment_author><![CDATA[nadim]]></wp:comment_author>
    <wp:comment_author_email>nadim.khemir@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.15.214.188</wp:comment_author_IP>
    <wp:comment_date>2017-04-26 13:41:22</wp:comment_date>
    <wp:comment_date_gmt>2017-04-26 13:41:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Well, It's interesting to read that Data::Dump::Tree is more interesting for users that like Microsoft type of display(at least I had a good laugh :) ).

If you want Match object details use the right role, as described in the documentation. The idea is to not have the match objects when you do not want them.

a lighter introduction in this advent entry https://perl6advent.wordpress.com/2016/12/21/ with a good example of how matches are handled compared to other dumpers

or the full documentation here: https://github.com/nkh/P6-Data-Dump-Tree]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493214082.5369921;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493679369.6178601;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>803</wp:comment_id>
    <wp:comment_author><![CDATA[nadim]]></wp:comment_author>
    <wp:comment_author_email>nadim.khemir@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>193.15.214.188</wp:comment_author_IP>
    <wp:comment_date>2017-04-26 13:44:19</wp:comment_date>
    <wp:comment_date_gmt>2017-04-26 13:44:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Also note that the glyphs can be removed by using role DDTR::FixedGlyphs]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493214259.8370509;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1493679371.259686;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>814</wp:comment_id>
    <wp:comment_author><![CDATA[Tom Legrady]]></wp:comment_author>
    <wp:comment_author_email>tom@tomlegrady.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>199.198.251.107</wp:comment_author_IP>
    <wp:comment_date>2017-05-01 16:40:00</wp:comment_date>
    <wp:comment_date_gmt>2017-05-01 16:40:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[About the very last line of the article: 
    match =&gt; (1) @7
      └ 0 = 123456789[0..9|

Surely that should be [0..8]  or [0..^9]. According to https://docs.perl6.org/type/Range, "1 .. 5;  # 1 &lt;= $x &lt;= 5&quot;, and 123456789 only has nine elements, with indices &#039;0&#039; .. &#039;8&#039;.

I realize it&#039;s the Data:;Dump::Tree writer&#039;s problem, not yours, but you published it :-)

Tom]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493656800.426626;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>816</wp:comment_id>
    <wp:comment_author><![CDATA[nadim]]></wp:comment_author>
    <wp:comment_author_email>nadim.khemir@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>41.230.79.11</wp:comment_author_IP>
    <wp:comment_date>2017-05-02 08:09:42</wp:comment_date>
    <wp:comment_date_gmt>2017-05-02 08:09:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Tom,

the final glyph is '|', not ']', the pipe symbol. it is the same as what .gistl uses and means 'excluding' or 'up to'; so the above dump is correct.

I also find that disturbing so it was changed in Data::Dump::Tree a five weeks ago and now it is displayed 'inclusive' with matching square brackets and no '..' if the range contains only one element.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>814</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1493712582.6075289;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Testing JSON grammars</title>
  <link>http://www.learningraku.com/2017/02/24/testing-json-grammars/</link>
  <pubDate>Fri, 24 Feb 2017 22:53:01 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=317</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 grammars make it easy to parse JSON and it's a favorite example to show off the feature. This post is about testing the grammar; you don't need another example here. I list several at the end of this post.

<br clear="all"/>

<div class="image center">
<div>
<a data-flickr-embed="true"  href="https://www.flickr.com/photos/biologycorner/7674804806/in/photolist-cGco5N-jDPx7o-D7jsPJ-jDPwZE-eNyQL4-jDQipJ-jDNgFV-jDNhrx-jDMmj6-4p4okm-5CZWUC-7EbF4x-7j2sZG-eam9bC-4bC8DR-jDPuqw-kxeLJR-dhba9j-4ofgYx-7egWrQ-jDQfRs-asN4p6-4ewqCq-pFwsom-h9rU23-7egWgb-r64D7q-7egWwE-92k3pn-Dbp2c-7ed45P-7egWaq-7egWv5-7ed42r-7egWmy-7ed4aK-yrFwd3-7egW5j-7egW7A-7ed3Za-4Mx1Ux-nDY6UG-5zgnYt-pXJZeH-6n88Ux-pXURYe-jhG7qm-6CUhCp-jMgN-nqnDK9" title="Standardized Test Close-Up"><img src="https://c1.staticflickr.com/9/8017/7674804806_7bd5ff8688.jpg" width="500" height="375" alt="Standardized Test Close-Up"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script>
</div>
</div>

<!--more-->

I went looking for some sort of official test corpus to throw at parsers. Googling gave me some internal links to json.org for a tool called <a href="http://www.json.org/JSON_checker/">JSON_Checker</a> that has some test files.  As I created my own JSON grammar (which looks just like all the examples I list at the end of this post, really), I used JSON_Checker files as the tests. I fixed some tests and put my versions in it my <a href="https://github.com/briandfoy/json-acceptance-tests">json-acceptance-tests GitHub repo</a>.

<pre class="brush:plain">
use Terminal::ANSIColor;

# https://github.com/briandfoy/json-acceptance-tests
my $pass_fail_directory = @*ARGS[0]; # wherever you put them
my @files = dir( $pass_fail_directory, test => rx/ '.json' $ / );

# two grammars I created, which aren't important here.
my @grammars = &lt;Grammar::JSON Grammar::RFC7159>;

for @grammars -> $grammar {
	put "Trying grammar $grammar";
	require ::($grammar);
	try-grammar( $grammar, @files );
	put "\n";
	}

sub try-grammar ( $grammar-class, @files ) {
	state @tag = (
		colored( 'NOT OK', 'white on_red'   ),
		colored( '  OK  ', 'white on_green' ),
		);
	state %expected = (
		'pass' => 0,
		'fail' => 1,
		);

	for @files -> $file {
		$file.IO.basename ~~ m/ ^ $&lt;result> = [ pass | 'fail' ] $&lt;number> = \d+/;
		my ( $expected, $number ) = $&lt;result>, $&lt;number>;
		my $result = ::($grammar-class).parsefile( $file );

		say @tag[ (%expected{$expected} + $result.so) % 2 ] ~ " { $file.IO.basename }";
		}
	}
</pre>

Here's the output, which I've labeled nicely with <a href="https://github.com/tadzik/Terminal-ANSIColor">Terminal::ANSIColor</A>. Those failures aren't real. One doesn't believe that anything other than an object or array can be a top-level value and the other thinks you should stop parsing at a certain depth.

<div class="image center">
<div>
<img src="/images/json-tests.png"/>
<p></p>
</div>
</div>

There's a <a href="https://jsonplaceholder.typicode.com">fake REST service</a> and some <a href="https://www.sitepoint.com/10-example-json-files/">canned files for popular services</A> I could test against too. I do wish the RFCs came with test suites and sample data though. If you know of other useful collections of valid and invalid files, tell me about them.

If you want some grammar examples, here are some JSON parsers:

<ul>
<li><A href="https://github.com/moritz/json">JSON::Tiny</A> from Moritz Lenz, with <a href="https://bryanstamour.com/2016/09/28/parsing-json-with-perl-6.html">a Weather Underground example</a> from Bryan Stamour.
<li><a href="https://www.codementor.io/perl/tutorial/how-to-use-json-in-perl-6">How to Use JSON in Perl 6</a> from Rudolf Olah
<li><A href="https://github.com/timo/json_fast">JSON::Fast</a>, created as a optimization test for <A href="https://github.com/moritz/json">JSON::Tiny</A>.
<li><a href="https://github.com/FROGGS/p6-JSON-Pretty">JSON::Pretty</a> from Tobias Leich.
<li>There's a JSON parser built into Rakudo, although <a href="https://github.com/rakudo/rakudo/blob/beec02a6fa69e3ac290b4dd24c07d87a9f248b13/src/core/JSON/Pretty.pm">it's  deprecated</a> in favor of modules now. 
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>317</wp:post_id>
  <wp:post_date>2017-02-24 22:53:01</wp:post_date>
  <wp:post_date_gmt>2017-02-24 22:53:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>testing-json-grammars</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="grammars"><![CDATA[Grammars]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Close enough</title>
  <link>http://www.learningraku.com/2017/03/23/close-enough/</link>
  <pubDate>Thu, 23 Mar 2017 21:36:19 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=323</guid>
  <description/>
  <content:encoded><![CDATA[[mathjax]

Perl 6 has some amazing numerical features, including builtin <A href="https://docs.perl6.org/type/Complex">complex number</a> computations. You might never need these, but they permit a bit of math geekry that I find quite pleasing. That pleasure is especially strong in Euler's Formula: <!--more-->

$$
e^{i\pi} = -1
$$

It's even more pleasing when I move everything to one side (and this will become important to Perl 6 later):

$$
e^{i\pi} + 1 = 0
$$

This tiny formula has everything you need to know about everything (almost). There's the natural base, the imaginary unit, the ratio of a circle's circumference to its diameter, and the multiplicative and additive identities. Curiously how all of that works out.

When I try this in the Perl 6 REPL I almost got the right answer, but not quite:

<pre class="brush:plain">
$ perl6
> e**(i*pi)
-1+1.22464679914735e-16i
> e**(i*pi) == -1
False
</pre>

That's right. I <i>almost</i> get the right answer. Most of you are probably used to these minor imprecisions and the practical programming considerations that come with them.

That's not a problem because Perl 6 anticipates these situations with the <code>=~=</code>, or the <a href="https://docs.perl6.org/language/operators#infix_=~=">approximately-equal operator</a>:

<pre class="brush:plain">
> e**(i*pi) =~= -1
True
</pre>

So, close enough is good enough for horseshoes, hand grenades, and now Perl 6.

I can also use <code>≅</code> (U+2245, ᴀᴘᴘʀᴏxɪᴍᴀᴛᴇʟʏ ᴇqᴜᴀʟ ᴛᴏ) version of the operator:

<pre class="brush:plain">
> e**(i*pi) ≅ -1
True
</pre>

The <code>$*TOLERANCE</code> variable controls how almost "almost" is. By default it's 1e-15. That's really small but its still larger than the <code>1.22464679914735e-16i</code> extra bit I saw.

I need to be careful though. The <code>=~=</code> looks at the <i>relative</i> difference instead of the <i>absolute</i> difference. Here's something you might not expect to be approximately equal since the values differ by 1 (which you think is much larger than 1e-15):

<pre class="brush:plain">
> 9999999999999999 =~= 9999999999999998
True
</pre>

It's their relative difference that matters though. That's the absolute value of their difference divided by the least absolute value of the two:

$$
\frac{| x - y |}{ min( |x|, |y| ) }
$$

Turn that into Perl 6 (I really like that infix <a href="https://docs.perl6.org/language/operators#infix_min"><code>min</code></a> operator):

<pre class="brush:plain">
> sub relative-difference ( $x, $y ) { abs( $x - $y ) / ( abs($x) min abs($y) ) }
> relative-difference( 999999999999999, 999999999999998 ).fmt('%e')
1.000000e-15
> relative-difference( 999999999999999, 999999999999997 ).fmt('%e')
2.000000e-15
</pre>

This works because very small differences in the large numbers might be less significant as very small differences in small numbers?

Huh?

It sounds like double talk, but this takes into account the size of the numbers when looking at the tolerance. Consider the case at the small end. Any value smaller than 1e-15 is within 1e-15 of 1e-15, but that isn't very helpful. The relative difference takes the sizes of the values into account. Thus, this is false because the relative difference is almost an order of magnitude:

<pre class="brush:plain">
> 1e-15 =~= 1e-16
False
> relative-difference( 1e-15, 1e-16 ).fmt('%e')
9.000000e+00
</pre>

This way, the tolerance value doesn't overwhelm the comparison as you get close to the tolerance itself.

That's not the end of the story, though. Why is this one different? These are the same values with one moved over to the other side of the comparison:

<pre class="brush:plain">
> 1e-15 - 1e-16 =~= 0
True
</pre>

There's a problem with relative difference. As the smaller value gets much closer to zero, the relative difference goes to infinity:

<pre class="brush:plain">
> relative-difference( 1e-15, 1e-17 ).fmt('%e')
9.900000e+01
> relative-difference( 1e-15, 1e-18 ).fmt('%e')
9.990000e+02
> relative-difference( 1e-15, 1e-19 ).fmt('%e')
9.999000e+03
> relative-difference( 1e-15, 1e-21 ).fmt('%e')
9.999990e+05
</pre>

The absolute difference in all of those are less than 1e-15, but the relative difference are very high. So, when one side of my comparison is exactly 0, the <code>=~=</code> switches to the absolute difference. That's why <code>1e-15 - 1e-16 =~= 0</code> is <code>True</code>.

This means you can get different answers depending on the structure of the comparison:

<pre class="brush:plain">
> 9999999999999999 - 9999999999999998 =~= 0 # absolute
False
> 9999999999999999 =~= 9999999999999998     # relative
True
</pre>

If I check that the difference is close to zero, I compare the absolute difference. If I compare two non-zero values to each other, I compare their relative difference.

Although it doesn't matter in this case, that's one of the pleasures of moving the 1 to the right:

<pre class="brush:plain">
> e**(i*pi) + 1 =~= 0
True
</pre>

And, here's one final tidbit. You can change the tolerance. If you want two and two to be five, select the right tolerance level:

<pre class="brush:plain">
> my $*TOLERANCE = 0.21; 2 + 2 =~= 5      # relative
True
> my $*TOLERANCE = 0.21; 2 + 2 - 5 =~= 0  # absolute
False
> my $*TOLERANCE = 1.1; 2 + 2 - 5 =~= 0   # absolute
True
</pre>

Now I want the string version of this.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>323</wp:post_id>
  <wp:post_date>2017-03-23 21:36:19</wp:post_date>
  <wp:post_date_gmt>2017-03-23 21:36:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>close-enough</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>As many digits as you like</title>
  <link>http://www.learningraku.com/2017/04/24/as-many-digits-as-you-like/</link>
  <pubDate>Mon, 24 Apr 2017 01:11:27 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=333</guid>
  <description/>
  <content:encoded><![CDATA[[mathjax]

I was playing with arbitrary precision rational numbers in Perl 6, irrationally perhaps by playing with the natural base, <i>e</i>, also known as Euler's Number. That's a builtin value in Perl 6 but with limited precision (that's probably good enough for most people): <!--more-->

<pre class="brush:plain">
$ perl6
> e
2.71828182845905
</pre>

I want more digits so I calculate them myself. One approximation of <i>e</i> is an infinite series:

$$
e = \sum\limits_{n=0}^{\infty}\frac{1}{n!}
$$

I can turn that into Perl 6 as a program that specifies the number of digits past the decimal place I'd like to calculate. In this code, you don't see a factorial explicitly. There's no need for a function (recursive or otherwise) because I can keep the result of the factorial in one iteration for the next:

<pre class="brush:plain">
sub MAIN ( Int $precision = 30 ) {
	loop {
		state $sum       = FatRat.new( 0, 1 );

		# the term in the sequence
		state $i         = 0;

		# The factorial, remembered for the next iteration
		state $last      = 1;

		$sum += FatRat.new( 1, $last );
		$last *= ++$i;

		put "$i: ({$sum.nude})\n\t   " ~ $sum;
		last if $sum.Str.chars > $precision + 2; # +2 for the 2 and the .
		}
	}
</pre>

I use the <code>.nude</code> method to get the numerator and denominator of the fraction that Perl 6 tracks. I output that with the iteration number. Under that, I output part of the stringified version of the <a href="https://docs.perl6.org/type/FatRat">FatRat</a>:

<pre class="brush:plain">
$ perl6 euler.p6 20
1: (1 1)
	   1
2: (2 1)
	   2
3: (5 2)
	   2.5
4: (8 3)
	   2.666667
5: (65 24)
	   2.708333
6: (163 60)
	   2.716667
7: (1957 720)
	   2.718056
8: (685 252)
	   2.718254
9: (109601 40320)
	   2.718279
10: (98641 36288)
	   2.718282
11: (9864101 3628800)
	   2.71828180
12: (13563139 4989600)
	   2.71828183
13: (260412269 95800320)
	   2.718281828
14: (8463398743 3113510400)
	   2.71828182845
15: (47395032961 17435658240)
	   2.718281828458
16: (888656868019 326918592000)
	   2.7182818284590
17: (56874039553217 20922789888000)
	   2.718281828459042
18: (7437374403113 2736057139200)
	   2.71828182845905
19: (17403456103284421 6402373705728000)
	   2.71828182845904523
20: (82666416490601 30411275102208)
	   2.718281828459045
21: (6613313319248080001 2432902008176640000)
	   2.71828182845904523534
22: (69439789852104840011 25545471085854720000)
	   2.718281828459045235359
</pre>

Look at iterations 19 and 20. Each iteration should make the approximation larger because it only adds a positive value to the previous value. But, the value goes from 2.71828182845904523 to the slightly less 2.718281828459045. This isn't a rounding error because one is two digits shorter:

<pre class="brush:plain">
19: (17403456103284421 6402373705728000)
	   2.71828182845904523
20: (82666416490601 30411275102208)
	   2.718281828459045
</pre>

Notice what happened to the fraction in iteration 20. There are fewer digits in the denominator for that iteration. Perl 6 uses the number of digits in the denominator to decide how many digits to put into the stringification. You can see this in the <a href="https://github.com/rakudo/rakudo/blob/nom/src/core/Rational.pm">Rational.Str method in Rakudo</a>. It's a minimum of 6 digits, but otherwise one more than the number of denominator digits.

But, the fraction can change. Perl 6 normalizes that numerator and denominator to be co-prime. They share no common factors. This normalization is still the same number. If I make a <a href="https://docs.perl6.org/type/Rat">Rat</a> with 2 and 4, Perl 6 reduces that to 1 and 2:

<pre class="brush:plain">
$ perl6
To exit type 'exit' or '^D'
> Rat.new( 2, 4 )
0.5
> Rat.new( 2, 4 ).nude
(1 2)
</pre>

When this happens in my Euler example, some iterations seem to backtrack in digits because of the digit length of the normalized fraction. No big whoop.

There's another way to write this program, though. Often we do these sorts of things because we pretend that we don't already know the answers. I could simply put the answer in the program and output the parts of it that I want. Maybe I don't need 10,000 digits but they are there if I want them:

<pre class="brush:plain">
#!/Applications/Rakudo/bin/perl6

# https://www.math.utah.edu/~pa/math/e.html
my $digits = q/
71828 18284 59045 23536 02874 71352 66249 77572 47093 69995 95749 66967 62772 40766 30353 54759 45713 82178 52516 64274 27466 39193 20030 59921 81741 35966 29043 57290 03342 95260 59563 07381 32328 62794 34907 63233 82988 07531 95251 01901 15738 34187 93070 21540 89149 93488 41675 09244 76146 06680 82264 80016 84774 11853 74234 54424 37107 53907 77449 92069 55170 27618 38606 26133 13845 83000 75204 49338 26560 29760 67371 13200 70932 87091 27443 74704 72306 96977 20931 01416 92836 81902 55151 08657 46377 21112 52389 78442 50569 53696 77078 54499 69967 94686 44549 05987 93163 68892 30098 79312 77361 78215 42499 92295 76351 48220 82698 95193 66803 31825 28869 39849 64651 05820 93923 98294 88793 32036 25094 43117 30123 81970 68416 14039 70198 37679 32068 32823 76464 80429 53118 02328 78250 98194 55815 30175 67173 61332 06981 12509 96181 88159 30416 90351 59888 85193 45807 27386 67385 89422 87922 84998 92086 80582 57492 79610 48419 84443 63463 24496 84875 60233 62482 70419 78623 20900 21609 90235 30436 99418 49146 31409 34317 38143 64054 62531 52096 18369 08887 07016 76839 64243 78140 59271 45635 49061 30310 72085 10383 75051 01157 47704 17189 86106 87396 96552 12671 54688 95703 50354 02123 40784 98193 34321 06817 01210 05627 88023 51930 33224 74501 58539 04730 41995 77770 93503 66041 69973 29725 08868 76966 40355 57071 62268 44716 25607 98826 51787 13419 51246 65201 03059 21236 67719 43252 78675 39855 89448 96970 96409 75459 18569 56380 23637 01621 12047 74272 28364 89613 42251 64450 78182 44235 29486 36372 14174 02388 93441 24796 35743 70263 75529 44483 37998 01612 54922 78509 25778 25620 92622 64832 62779 33386 56648 16277 25164 01910 59004 91644 99828 93150 56604 72580 27786 31864 15519 56532 44258 69829 46959 30801 91529 87211 72556 34754 63964 47910 14590 40905 86298 49679 12874 06870 50489 58586 71747 98546 67757 57320 56812 88459 20541 33405 39220 00113 78630 09455 60688 16674 00169 84205 58040 33637 95376 45203 04024 32256 61352 78369 51177 88386 38744 39662 53224 98506 54995 88623 42818 99707 73327 61717 83928 03494 65014 34558 89707 19425 86398 77275 47109 62953 74152 11151 36835 06275 26023 26484 72870 39207 64310 05958 41166 12054 52970 30236 47254 92966 69381 15137 32275 36450 98889 03136 02057 24817 65851 18063 03644 28123 14965 50704 75102 54465 01172 72115 55194 86685 08003 68532 28183 15219 60037 35625 27944 95158 28418 82947 87610 85263 98139 55990 06737 64829 22443 75287 18462 45780 36192 98197 13991 47564 48826 26039 03381 44182 32625 15097 48279 87779 96437 30899 70388 86778 22713 83605 77297 88241 25611 90717 66394 65070 63304 52795 46618 55096 66618 56647 09711 34447 40160 70462 62156 80717 48187 78443 71436 98821 85596 70959 10259 68620 02353 71858 87485 69652 20005 03117 34392 07321 13908 03293 63447 97273 55955 27734 90717 83793 42163 70120 50054 51326 38354 40001 86323 99149 07054 79778 05669 78533 58048 96690 62951 19432 47309 95876 55236 81285 90413 83241 16072 26029 98330 53537 08761 38939 63917 79574 54016 13722 36187 89365 26053 81558 41587 18692 55386 06164 77983 40254 35128 43961 29460 35291 33259 42794 90433 72990 85731 58029 09586 31382 68329 14771 16396 33709 24003 16894 58636 06064 58459 25126 99465 57248 39186 56420 97526 85082 30754 42545 99376 91704 19777 80085 36273 09417 10163 43490 76964 23722 29435 23661 25572 50881 47792 23151 97477 80605 69672 53801 71807 76360 34624 59278 77846 58506 56050 78084 42115 29697 52189 08740 19660 90665 18035 16501 79250 46195 01366 58543 66327 12549 63990 85491 44200 01457 47608 19302 21206 60243 30096 41270 48943 90397 17719 51806 99086 99860 66365 83232 27870 93765 02260 14929 10115 17177 63594 46020 23249 30028 04018 67723 91028 80978 66605 65118 32600 43688 50881 71572 38669 84224 22010 24950 55188 16948 03221 00251 54264 94639 81287 36776 58927 68816 35983 12477 88652 01411 74110 91360 11649 95076 62907 79436 46005 85194 19985 60162 64790 76153 21038 72755 71269 92518 27568 79893 02761 76114 61625 49356 49590 37980 45838 18232 33686 12016 24373 65698 46703 78585 33052 75833 33793 99075 21660 69238 05336 98879 56513 72855 93883 49989 47074 16181 55012 53970 64648 17194 67083 48197 21448 88987 90676 50379 59036 69672 49499 25452 79033 72963 61626 58976 03949 85767 41397 35944 10237 44329 70935 54779 82629 61459 14429 36451 42861 71585 87339 74679 18975 71211 95618 73857 83644 75844 84235 55581 05002 56114 92391 51889 30994 63428 41393 60803 83091 66281 88115 03715 28496 70597 41625 62823 60921 68075 15017 77253 87402 56425 34708 79089 13729 17228 28611 51591 56837 25241 63077 22544 06337 87593 10598 26760 94420 32619 24285 31701 87817 72960 23541 30606 72136 04600 03896 61093 64709 51414 17185 77701 41806 06443 63681 54644 40053 31608 77831 43174 44081 19494 22975 59931 40118 88683 31483 28027 06553 83300 46932 90115 74414 75631 39997 22170 38046 17092 89457 90962 71662 26074 07187 49975 35921 27560 84414 73782 33032 70330 16823 71936 48002 17328 57349 35947 56433 41299 43024 85023 57322 14597 84328 26414 21684 87872 16733 67010 61509 42434 56984 40187 33128 10107 94512 72237 37886 12605 81656 68053 71439 61278 88732 52737 38903 92890 50686 53241 38062 79602 59303 87727 69778 37928 68409 32536 58807 33988 45721 87460 21005 31148 33513 23850 04782 71693 76218 00490 47955 97959 29059 16554 70505 77751 43081 75112 69898 51884 08718 56402 60353 05583 73783 24229 24185 62564 42550 22672 15598 02740 12617 97192 80471 39600 68916 38286 65277 00975 27670 69777 03643 92602 24372 84184 08832 51848 77047 26384 40379 53016 69054 65937 46161 93238 40363 89313 13643 27137 68884 10268 11219 89127 52230 56256 75625 47017 25086 34976 53672 88605 96675 27408 68627 40791 28565 76996 31378 97530 34660 61666 98042 18267 72456 05306 60773 89962 42183 40859 88207 18646 82623 21508 02882 86359 74683 96543 58856 68550 37731 31296 58797 58105 01214 91620 76567 69950 65971 53447 63470 32085 32156 03674 82860 83786 56803 07306 26576 33469 77429 56346 43716 70939 71930 60876 96349 53288 46833 61303 88294 31040 80029 68738 69117 06666 61468 00015 12114 34422 56023 87447 43252 50769 38707 77751 93299 94213 72772 11258 84360 87158 34835 62696 16619 80572 52661 22067 97540 62106 20806 49882 91845 43953 01529 98209 25030 05498 25704 33905 53570 16865 31205 26495 61485 72492 57386 20691 74036 95213 53373 25316 66345 46658 85972 86659 45113 64413 70331 39367 21185 69553 95210 84584 07244 32383 55860 63106 80696 49248 51232 63269 95146 03596 03729 72531 98368 42336 39046 32136 71011 61928 21711 15028 28016 04488 05880 23820 31981 49309 63695 96735 83274 20249 88245 68494 12738 60566 49135 25267 06046 23445 05492 27581 15170 93149 21879 59271 80019 40968 86698 68370 37302 20047 53143 38181 09270 80300 17205 93553 05207 00706 07223 39994 63990 57131 15870 99635 77735 90271 96285 06114 65148 37526 20956 53467 13290 02599 43976 63114 54590 26858 98979 11583 70934 19370 44115 51219 20117 16488 05669 45938 13118 38437 65620 62784 63104 90346 29395 00294 58341 16482 41149 69758 32601 18007 31699 43739 35069 66295 71241 02732 39138 74175 49230 71862 45454 32220 39552 73529 52402 45903 80574 45028 92246 88628 53365 42213 81572 21311 63288 11205 21464 89805 18009 20247 19391 71055 53901 13943 31668 15158 28843 68760 69611 02505 17100 73927 62385 55338 62725 53538 83096 06716 44662 37092 26468 09671 25406 18695 02143 17621 16681 40097 59528 14939 07222 60111 26811 53108 38731 76173 23235 26360 58381 73151 03459 57365 38223 53499 29358 22836 85100 78108 84634 34998 35184 04451 70427 01893 81994 24341 00905 75376 25776 75711 18090 08816 41833 19201 96262 34162 88166 52137 47173 25477 72778 34887 74366 51882 87521 56685 71950 63719 36565 39038 94493 66421 76400 31215 27870 22236 64636 35755 50356 55769 48886 54950 02708 53923 61710 55021 31147 41374 41061 34445 54419 21013 36172 99628 56948 99193 36918 47294 78580 72915 60885 10396 78195 94298 33186 48075 60836 79551 49663 64489 65592 94818 78517 84038 77332 62470 51945 05041 98477 42014 18394 77312 02815 88684 57072 90544 05751 06012 85258 05659 47030 46836 34459 26525 52137 00806 87520 09593 45360 73162 26118 72817 39280 74623 09468 53678 23106 09792 15993 60019 94623 79934 34210 68781 34973 46959 24646 97525 06246 95861 69091 78573 97659 51993 92993 99556 75427 14654 91045 68607 02099 01260 68187 04984 17807 91739 24071 94599 63230 60254 70790 17745 27513 18680 99822 84730 86076 65368 66855 51646 77029 11336 82756 31072 23346 72611 37054 90795 36583 45386 37196 23585 63126 18387 15677 41187 38527 72292 25947 43373 78569 55384 56246 80101 39057 27871 01651 29666 36764 45187 24656 53730 40244 36841 40814 48873 29578 47348 49000 30194 77888 02046 03246 60842 87535 18483 64959 19508 28883 23206 52212 81041 90448 04724 79492 91342 28495 19700 22601 31043 00624 10717 97150 27934 33263 40799 59605 31446 05323 04885 28972 91765 98760 16667 81193 79323 72453 85720 96075 82277 17848 33616 13582 61289 62261 18129 45592 74627 67137 79448 75867 53657 54486 14076 11931 12595 85126 55759 73457 30153 33642 63076 79854 43385 76171 53334 62325 27057 20053 03988 28949 90342 59566 23297 57824 88735 02925 91668 25894 45689 46559 92658 45476 26945 28780 51650 17206 74785 41788 79822 76806 53665 06419 10973 43452 88783 38621 72615 62695 82654 47820 56729 87756 42632 53215 94294 41803 99432 17000 09054 26507 63095 58846 58951 71709 14760 74371 36893 31946 90909 81904 50129 03070 99566 22662 03031 82649 36573 36984 19555 77696 37876 24918 85286 56866 07600 56602 56054 45711 33728 68402 05574 41603 08370 52312 24258 72234 38854 12317 94813 88550 07568 93811 24935 38631 86352 87083 79984 56926 19981 79452 33640 87429 59118 07474 53419 55142 03517 26184 20084 55091 70845 68236 82008 97739 45584 26792 14273 47756 08796 44279 20270 83121 50156 40634 13416 17166 44806 98154 83764 49157 39001 21217 04154 78725 91998 94382 53649 50514 77137 93991 47205 21952 90793 96137 62110 72384 94290 61635 76045 96231 25350 60685 37651 42311 53496 65683 71511 66042 20796 39446 66211 63255 15772 90709 78473 15627 82775 98788 13649 19512 57483 32879 37715 71459 09106 48416 42678 30994 97236 74420 17586 22694 02159 40792 44805 41255 36043 13179 92696 73915 75424 19296 60731 23937 63542 13923 06178 76753 95871 14361 04089 40996 60894 71418 34069 83629 93675 36262 15452 47298 46421 37528 91079 88438 13060 95552 62272 08375 18629 83706 67872 24430 19579 37937 86072 10725 42772 89071 73285 48743 74355 78196 65117 16618 33088 11291 20245 20404 86822 00072 34403 50254 48202 83425 41878 84653 60259 15064 45271 65770 00445 21097 73558 58976 22655 48494 16217 14989 53238 34216 00114 06295 07184 90427 78925 85527 43035 22139 68356 79018 07640 60421 38307 30877 44601 70842 68827 22611 77180 84266 43336 51780 00217 19034 49234 26426 62922 61456 00433 73838 68335 55534 34530 04264 81847 39892 15627 08609 56506 29340 40526 49432 44261 44566 59212 91225 64889 35696 55009 15430 64261 34252 66847 25949 14314 23939 88454 32486 32746 18428 46655 98533 23122 10466 25989 01417 12103 44608 42716 16619 00125 71958 70793 21756 96985 44013 39762 20967 49454 18540 71184 46433 94699 01626 98351 60784 89245 14058 94094 63952 67807 35457 97003 07051 16368 25194 87701 18976 40028 27648 41416 05872 06184 18529 71891 54019 68825 32893 09149 66534 57535 71427 31848 20163 84644 83249 90378 86069 00807 27093 27673 12758 19665 63941 14896 17168 32980 45513 97295 06687 60474 09154 20428 42999 35410 25829 11350 22416 90769 43166 85742 42522 50902 69390 34814 85645 13030 69925 19959 04363 84028 42926 74125 73422 44776 55841 77886 17173 72654 62085 49829 44989 46787 35092 95816 52632 07225 89923 68768 45701 78230 38096 56788 31122 89305 80914 05726 10865 88484 58731 01658 15116 75333 27674 88701 48291 67419 70151 25597 82572 70740 64318 08601 42814 90241 46780 47232 75976 84269 63393 57735 42930 18673 94397 16388 61176 42090 04068 66339 88568 41681 00387 23892 14483 17607 01166 84503 88721 23643 67043 31409 11557 33280 18297 79887 36590 91665 96124 02021 77855 88548 76176 16198 93707 94380 05666 33648 84365 08914 48055 71039 76521 46960 27662 58359 90519 87042 30017 94655 3679
/;

$digits.subst-mutate( /\s+/, '', :g );

sub MAIN ( $places = 15 ) { # could constrain further
	my $fractional = substr $digits, 0, $places;
	put 2 + FatRat.new( +$fractional, 10**($fractional.chars) );
	}
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>333</wp:post_id>
  <wp:post_date>2017-04-24 01:11:27</wp:post_date>
  <wp:post_date_gmt>2017-04-24 01:11:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>as-many-digits-as-you-like</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Rakudo Star on AppVeyor</title>
  <link>http://www.learningraku.com/2017/04/02/rakudo-star-on-appveyor/</link>
  <pubDate>Sun, 02 Apr 2017 00:48:29 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=342</guid>
  <description/>
  <content:encoded><![CDATA[<i><b>UPDATE</b> - <a href="/2017/05/01/rakudo-in-chocolatey-makes-appveyor-easier/">Rakudo is now in Chocolatey</a> so most of this is really easy now.</i>

<a href="https://www.appveyor.com">AppVeyor</a> provides continuous testing on Windows. I wanted to try it with Perl 6 since I don't want to ignore Windows in <i>Learning Perl 6</i>. I found a some configuration examples, but none of them satisfied me. I spent a bit too much time messing around with PowerShell to produce <a href="https://github.com/briandfoy/perl6_appveyor_test/blob/master/.appveyor.yml">my own AppVeyor configuration</a>. <!--more-->

<div class="image center">
<div>
<img src="/images/appveyor.png" height="682" width="500" />
</div>
</div>

I had my own simple requirements:

<ul>
<li>I want to use the latest Rakudo Star, like most people will for everyday work
<li>I want the build to be fast. 
	<ul>
	<li>Don't build Rakudo every time
	<li>Cache whatever I can
	</ul>
</ul>

Along the way I ran into several inadequacies in PowerShell and various other Microsoft tools. These things provide a challenge to the non-interactive programmer.

But, I have something that works. The first time around I install <a href="https://www.strawberryperl.com">Strawberry Perl</a> and <a href="">Rakudo Star</a>. If everything in the build goes well, AppVeyor caches these installations so I don't need to do them again. I've also setup the config with a kludey way to invalidate that cache (which <a href="http://help.appveyor.com/discussions/questions/1310-delete-cache">AppVeyor still declines to provide as a button on the website</a>). 

I install <a href="https://www.strawberryperl.com">Strawberry Perl</a> to get <a href="http://perltricks.com/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse/">prove</a>. That's easy because it has a <a href="http://perltricks.com/article/177/2015/6/9/Get-to-grips-with-Prove--Perl-s-test-workhorse/">chocolately</a> package that AppVeyor can figure out on its own. 

Rakudo is a bit tougher. There's an old chocolately package (I'm figuring out how to fix that). I download the latest Rakudo, but I wasting a lot of time wondering if the installer was doing anything. That installer works in the background in another process, so <A href="https://blogs.msdn.microsoft.com/heaths/2005/11/15/waiting-for-msiexec-exe-to-finish/">Powershell doesn't know how to wait for it to finish</a>. All of that research made me miss Perl (of either flavor) where it's easy to get answers to even difficult questions. Many communities can't get answers to simple questions. But, that's life.

After that, everything is easy and looks like the basic continuous integration testing.

I'm done working on it until I have another problem, but there are <a href="https://github.com/briandfoy/perl6_appveyor_test/issues">some other things I'd like my config to do</a>:

<ul>
<li>Report code coverage
<li>Send reports to some sort of CPAN Testers thing
<li>Allow people to build against different versions of Rakudo ("hey, it worked last month!")
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>342</wp:post_id>
  <wp:post_date>2017-04-02 00:48:29</wp:post_date>
  <wp:post_date_gmt>2017-04-02 00:48:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rakudo-star-on-appveyor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[appveyor]]></category>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>All things being equal, not all things are eqv</title>
  <link>http://www.learningraku.com/2017/04/07/a-wealth-of-comparison-operators/</link>
  <pubDate>Fri, 07 Apr 2017 12:12:12 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=346</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 has a wealth of comparison operators so I don't have to do a lot of work to test complex data structures. Consider the case where I want to test two lists. I might reach for the <a href="https://docs.perl6.org/language/operators#infix_eq"><code>eq</code></a> and think that it works. Here's a demonstration of that in the REPL: <!--more-->

<pre class="brush:plain">
$ perl6
> ( 1, 2, 3 ) eq ( 1, 2, 4 )
False
> ( 1, 2, 3 ) eq ( 1, 2, 3 )
True
</pre>

That looks like it works. The list that has different elements returns <code>False</code> and the one that looks like it has the same elements returns <code>True</code>. But, this is a quirk of my choice of test cases. Had I read the docs (and, admit it, many of us only do that when something expected happens), I would have known that <code>eq</code> coerces its arguments to strings and compares those. It is, after all, a string comparison operator (although in a multi-dispatch language you (and I) might guess such operators would multi-dispatch).

Using <code>eq</code> breaks if lists with different values stringify the same way, like these. Since the string coercion joins the elements with a space, spaces at the start or end of elements make it impossible to distinguish the separator from the values:

<pre class="brush:plain">
> ( 1, '2 ', 3 ) eq ( 1, 2, ' 3' )
True
</pre>

That's no good. But, this is why Perl 6 has more comparison operators. The <a href="https://docs.perl6.org/language/operators#infix_eq"><code>eqv</code></a> tests that two things have the same values:

<pre class="brush:plain">
> ( 1, '2 ', 3 ) eqv ( 1, 2, ' 3' )
False
</pre>

This extends to deeper levels even. The values and the structure must be the same. Even if the ultimate scalar values are the same, they have show up in the structure in the same way:

<pre class="brush:plain">
> ( 1, 2, (4,5) ) eqv ( 1, (2,4), 5 )
False
</pre>

And even to the object identity. And Array may hold the same values, but it is not the same thing:

<pre class="brush:plain">
> ( 1, 2, (4,5) ) eqv ( 1, 2, [4,5] )
False
</pre>

Besides <code>eq</code> and <code>eqv</code>, Perl 6 has the <A href="https://docs.perl6.org/language/operators#infix_==="><code>===</code></a> that tests for object identity. This was the start of my thinking on this post, but more about that in a moment. Even if the two lists have the same values and structure, they aren't the same object:

<pre class="brush:plain">
> ( 1, 2, 3 ) === ( 1, 2, 3 )
False
</pre>

But, I might have the same object stored differently. This Array and Scalar are the same because they store the same object:

<pre class="brush:plain">
> my @array = ( 1, 2, 3 )
[1 2 3]
> my $scalar = @array
[1 2 3]
> @array === $scalar
True
</pre>

A change in one shows up in the other, which is almost a non-sensical thing to say because there is no "other". It's the same thing:

<pre class="brush:plain">
> $scalar[*-1] = 'Hamadryas'
Hamadryas
> @array
[1 2 Hamadryas]
</pre>

And here where this came up for me. I need the permutations of a list (which, as you know, if the <i>ordered</i> structure that allows the same value to show up multiple times). Consider permutations of <code>(1, 3, 3)</code>:

<pre class="brush:plain">
> (1,3,3).permutations
((1 3 3) (1 3 3) (3 1 3) (3 3 1) (3 1 3) (3 3 1))
</pre>

I might not care that two permutations are <code>(1, 3, 3)</code> show up twice as long as I process one of them. Suppose I want the list of all the values of the sum of the first two items multiplied by the third:

<pre class="brush:plain">
> (1,3,3).permutations.map: { ($_[0] + $_[1])*$_[2] }
(12 12 12 6 12 6)
</pre>

I've done that operation six times, but if I only care about the unique values, I've done a lot more work than I needed to do to get two value:

<pre class="brush:plain">
> (1,3,3).permutations.map( { ($_[0] + $_[1])*$_[2] } ).unique
(12 6)
</pre>

In this example it's not a big deal, but imagine much larger lists and more complicated operations. Consider how that makes <a href="https://docs.perl6.org/type/Junction">junctions</a> much larger:

<pre class="brush:plain">
> any( (1,3,3).permutations.map( { ($_[0] + $_[1])*$_[2] } ) ) > 13
any(False, False, False, False, False, False)
</pre>

Curiously, this gives a Junction back instead of a Boolean, but I've asked about that in the <A href="https://github.com/perl6/doc/issues/1269">docs repo</a> and on <A href="https://rt.perl.org/Public/Bug/Display.html?id=131114">RT</a>.

So, I might try <a href="https://docs.perl6.org/type/List#routine_unique"><code>.unique</code></a>:

<pre class="brush:plain">
> (1,3,3).permutations.unique
((1 3 3) (1 3 3) (3 1 3) (3 3 1) (3 1 3) (3 3 1))
</pre>

That didn't reduce the list, though. That method checks pairs of items with <code>===</code>. That's the check for object identity. The duplicated permutations look the same because they have the same values in the same order, but they are different objects.

No matter. I can tell <code>.unique</code> to compare elements any way that I like by using the <code>:with</code> adverb. If I use <code>eqv</code>, I end up with only the permutations I can distinguish:

<pre class="brush:plain">
> (1,3,3).permutations.unique( :with(&[eqv]) )
((1 3 3) (3 1 3) (3 3 1))
</pre>

Now I process half the number of elements:

<pre class="brush:plain">
> any( (1,3,3).permutations.unique( :with(&[eqv]) ).map( { ($_[0] + $_[1])*$_[2] } ) ) > 13
any(False, False, False)
</pre>

There are many other <a href="https://docs.perl6.org/language/operators#infix_eqv">comparison operations</a>.  Some of them might not give you a "wrong" answer, but you might end up doing more processing than you need to do.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>346</wp:post_id>
  <wp:post_date>2017-04-07 12:12:12</wp:post_date>
  <wp:post_date_gmt>2017-04-07 12:12:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-wealth-of-comparison-operators</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="identity"><![CDATA[identity]]></category>
  <category domain="category" nicename="lists"><![CDATA[Lists]]></category>
  <category domain="post_tag" nicename="permutations"><![CDATA[permutations]]></category>
  <category domain="post_tag" nicename="unique"><![CDATA[unique]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The 24 Puzzle, in Perl 6, using Channels and Promises</title>
  <link>http://www.learningraku.com/2017/04/18/the-24-puzzle-in-perl-6-using-channels-and-promises/</link>
  <pubDate>Tue, 18 Apr 2017 14:10:25 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=350</guid>
  <description/>
  <content:encoded><![CDATA[<A href="http://blog.plover.com/math/24-puzzle.html">Mark Jason Dominus solved the 24 Puzzle in Perl</a>, then explicated some non-Perl solutions other people sent him. <A href="https://rjbs.manxome.org/rubric/entry/2102">RJBS tried it in Forth</a>. I've been meaning to try it in Perl 6. I bumbled around as I stubbornly tried to include language features I didn't really need, but that's part of the fun. <!--more-->

<A href="http://blog.plover.com/math/17-puzzle.html">Here's the problem</a>:

<blockquote>
Given 6,6,5,2, make 17 using the operators +, -, *, and /.
</blockquote>

The trick with these puzzles is to not read mjd's solution before struggling with it yourself. Also, I wanted to do this with Perl 6 features that I wouldn't be able to use in Perl or C. If the program looks the same in a different language, who cares? It's done. A mere translation is not that interesting.

I started with the idea that I wanted to use the cross and hyper operations to make the lists of things I'd want to process, and I wanted to use a <a href="https://docs.perl6.org/type/Channel">Channel</a> to hold the list of candidate solutions that various <a href="https://docs.perl6.org/type/Promise">Promises</a> would try to solve. Something would fill the channel, and a set of promises running in other threads would grab candidates. Perl 6 has asynchronous support builtin and I wanted to play with that.

I want my program's invocation to take a list of numbers where the last number was the goal:

<pre class="brush:plain">
$ perl6 24-problems.p6 [digits] [goal]
</pre>

To solve this problem, I'd run it as:

<pre class="brush:plain">
$ perl6 24-problems.p6 6 6 5 2 17
</pre>

Here's my solution, which is still a bit messy. For any list of <i>N</i> digits, I need <i>N - 1</i> operators to insert between the digits. I use the <a href="https://docs.perl6.org/language/operators#infix_X">cross operator</a> in the <a href="https://docs.perl6.org/language/operators#Reduction_Operators">reduction operator</a>, <code>[X]</code>, with a list of <i>N - 1</i> copies of <code>@operations</code>. That <code>xx</code> operator is the <a href="https://docs.perl6.org/routine/xx">list replication operator</a>. That's a lot of work for a single statement (and isn't that great?).

Ignore the middle of <code>MAIN</code> for a moment. In that <code>for</code> loop I cross all the permutations of digits with all the combinations of the operators. These are all of the candidate solutions. I end up with a bunch of two element lists; the first element is the digits in some order and the second is the list of operators. Perl 6 maintains that structure, so I send a two element thing into the channel.

Now, back up. I have another <code>for</code> that creates a bunch of promises with <A href="https://docs.perl6.org/routine/start"><code>start</code>. These will run in separate threads in the background. The <a href="https://docs.perl6.org/language/concurrency#index-entry-whenever"><code>whenever</code></a> in <code>react</code> grabs an item from the channel and does some work. An item in a channel is guaranteed to be handled only once so the promises do their work then fight it out to get another candidate to try.

So, this has the Perl 6 structure I want:

<pre class="brush:plain">
sub MAIN (*@) {
	my $goal       = @*ARGS.pop;
	my @numbers    = @*ARGS.clone.flat;
	my @operations = < + - * / >;

	# I need N - 1 operators, with repeats (so, + + + is fine)
	my @cross = [X] @operations xx (@numbers.elems - 1);
	my @perms = @numbers.permutations.unique( :with(&[eqv]) );

	put "Total candidates: " ~ ( @cross.elems * @perms.elems );

	my $channel = Channel.new;

	my @p;
	my $total = 0;
	for 1 .. 1 {
		@p.push: start {
			react  {
				whenever $channel -> $item {
					state $count = 0; $count++;
					my $result = evaluate( $item );
					put "SOLUTION! $result[*-1] = $goal" if $result[0] == $goal;
					LAST {
						$total += $count;
						put "Thread {$*THREAD.id} handled $count candidates"
						}
					}
				}
			};
		}

	my $start = now;
	put "Starting to send to channels";
	for @perms X @cross -> $i {
		$channel.send( $i )
		}
	put "Done sending to channels: " ~ (now - $start) ~ " seconds";

	$channel.close;

	await |@p;

	put "Total handled was $total";
	}

sub evaluate ( $item ) {
	my @digits  = $item[0].flat;
	my @ops     = $item[1].flat;

	my @ops2 = ( |@ops, '' );

	my $string = @digits >>~<< @ops2;

	while @ops.elems > 0 {
		splice(
			@digits, 0, 2,
			op( @ops.shift, |@digits[0,1] )
			);
		}

	return [ @digits[0], $string ];
	}

multi op ( '+', $m, $n ) { $m + $n }
multi op ( '-', $m, $n ) { $m - $n }
multi op ( '/', $m, $n ) { $m / $n }
multi op ( '*', $m, $n ) { $m * $n }
</pre>

I struggled for a bit to figure out what I wanted to do in <code>evaluate</code>. For a long time I tried to force a situation where I'd use the <A href="https://docs.perl6.org/routine/Z">zip meta operator</a>, <code>Z</code>, to merge the digits and the operators. If I could do that, I could stringify and EVAL that. Yeah, that's disgusting and requires a secret pragma, but I got stuck on that idea. The problem was the ugliness of operator list having one less item than the digits list. The <code>Z</code> wants to use the same number of elements from both sides and will cycle back to the beginning of the shorter list. For awhile I'd mutate the operator list to add the empty string at the end. I never liked this and it made everything harder than it needed to be.

While I was goofing around with that, I had the idea that I could zip the lists myself. As long as there was something in <code>@ops</code>, take one item from that list and two items from <code>@digits</code> and push them onto a new array:

<pre class="brush:plain">
@temp-array.push: @digits[0], @ops[0], @digits[1];
</pre>

It took me much longer that it should have to realize that I didn't need the temporary array. I'll grab the same elements, figure out the result, and replace those two numbers with the single number I just computed. When <code>@ops</code> was empty, I should have the answer in <code>@digits</code>. Boom. But, I still did the zip thing to make a string that represented the operation so I know how I got it.

To compute the intermediate results I created some <code>multi</code> subs with similar signatures, but I used a literal string as the first thing in the signature. This is how I'd translate the strings representing the operators into actual operations. I could have done the same thing with <code>given</code>, but I didn't:

<pre class="brush:plain">
my $result = do {
	given $o {
		when '+' { $m + $n }
		when '-' { $m - $n }
		when '*' { $m * $n }
		when '/' { $m / $n }
		}
	};
</pre>

When I run this, I get output like this:

<pre class="brush:plain">
Total candidates: 768
Starting to send to channels
SOLUTION! 5/ 6+ 2* 6 = 17
Done sending to channels: 1.5209437 seconds
Thread 13 handled 55 candidates
Thread 6 handled 57 candidates
Thread 3 handled 656 candidates
Total handled was 768
</pre>

<h2>A digression of threading</h2>

Notice that one of the threads handled many more candidates. This isn't true for every run. More often, all threads handle close to the same number of candidates. But, whenever that happened the program was much slower by about half a second. That probably means I'm using too many threads. If I changed the code to create only one promise, it's very fast:

<pre class="brush:plain">
Total candidates: 768
Starting to send to channels
Done sending to channels: 0.24503289 seconds
SOLUTION! 5/ 6+ 2* 6 = 17
Thread 4 handled 768 candidates
Total handled was 768
</pre>

This sniffs of a synchronization problem. If threads compete for the same physical processor, they have to cooperate (and something has to help them do that). I wasn't concerned about making this fast because I wanted to play with the features, but its something to think about for production programming.

Here's the overall timing for three promises. Notice the user time is about two times the real time because multiple threads are working at the same time:

<pre class="brush:plain">
$ time perl6 pick-* 6 6 5 2 17
Total candidates: 768
Starting to send to channels
Done sending to channels: 2.0787578 seconds
Thread 6 handled 50 candidates
SOLUTION! 5/ 6+ 2* 6 = 17
Thread 4 handled 344 candidates
Thread 3 handled 374 candidates
Total handled was 768

real	0m3.294s
user	0m7.836s
sys	0m0.843s
</pre>

And for one promise, the user time and real time are about the same, and both are lower than using three threads:

<pre class="brush:plain">
$ time perl6 pick-* 6 6 5 2 17
Total candidates: 768
Starting to send to channels
Done sending to channels: 0.2340613 seconds
SOLUTION! 5/ 6+ 2* 6 = 17
Thread 4 handled 768 candidates
Total handled was 768

real	0m2.088s
user	0m2.148s
sys	0m0.276s
</pre>

If there's a lot of lag in the processing (like fetching a resource or waiting), slicing operations into threads can have them wait together. Since those threads don't need to use the processor to wait, they aren't competing and getting in each other's way.

Here's a stripped down version of my previous program where most of the processing of each item isn't actual work:

<pre class="brush:plain">
my $channel = Channel.new;

my $threads = @*ARGS[0] // 1;
put "Using $threads threads";

my @promises;
for 0 ... ^$threads {
	@promises.push: start {
		react  {
			whenever $channel -> $item {
				put "Thread {$*THREAD.id} handing $item";
				sleep $item % 3
				}
			}
		};
	}

for ^37 {
	$channel.send( $_ )
	}

$channel.close;

await |@promises;
</pre>

With one thread, it takes about 37 seconds on the wallclock, but notice the user time is really low:

<pre class="brush:plain">
$ time perl6 wait.p6
Using 1 threads
Thread 3 handing 0
...
Thread 3 handing 34
Thread 3 handing 35
Thread 3 handing 36

real	0m36.359s
user	0m0.278s
sys	0m0.067s
</pre>

Three threads can sleep simultaneously and can be much faster. The user time is about the same, but the wallclock time is less than half what it was before:

<pre class="brush:plain">
$ time perl6 wait.p6 3
Using 3 threads
Thread 4 handing 0
Thread 3 handing 1
...
Thread 3 handing 33
Thread 3 handing 36

real	0m15.637s
user	0m0.281s
sys	0m0.112s
</pre>

<h3>A slight digression on EVAL</h3>

As part of my initial idea, I tried to create a string version of the solution and <code>EVAL</code> the whole thing. That's expedient if not prudent, but sometimes you want the answer any way you can get it and don't care about the purity or cleverness. I can easily make a list of all of the combinations of three operators (one less than the number of digits):

<pre>
$ perl6
> my @a = &lt; + - / * >

> [X] @a xx 3

</pre>

If I wanted to make a string like <code>6+6+5-2</code> with the <code>Z</code> operator, I'd need something at the end to come after the <code>2</code>. It can't be another operator though. I wanted something like this:

<pre class="brush:plain">
my @digits = 6, 6, 5, 2;
my @ops    = < + - / * >;
my @perms  = @digits.permutations.unique( :with(&[eqv]) );

my @cross = [X] @ops xx ( @digits.elems - 1 );

my @results = ( @perms X @cross )
	.map(  { my @d= (|.[1], ''); .[0] >>~>> @d } )
	.map(  { say "$_ = " ~ EVAL ~$_; $_  } )
	.grep( { 17 == EVAL $_ } )
</pre>

Even when I solved that, another problem came up. When I <code>EVAL</code> the statement, Perl 6 has a particular order of operations where the problem actually goes from left to right without precedence. That's not explicitly stated in the problem, but it's part of the problem. It took me a bit to figure out why I wasn't seeing any solutions this way.

Besides, I was trying to avoid the <a href="/2016/12/01/quick-tip-16-explosive-combinatorials/">combinatorial explosion</a> and the time to create the giant list only to go through it to tear it apart when I can do it in fewer steps.

I'd later discover that although I'd found a candidate for the the <code>6 6 5 2</code> situation, I hadn't actually solved the puzzle correctly. Besides the combinations of digits and operators, there was a third set of permutations. I needed all the orders of operations. But, let's think about Mark Jason's solution now.

<h3>Back to Mark Jason's solution</h3>

After I'd figured out what I wanted to do, I looked back to see what Mark Jason had done. I won't re-explicate <a href="http://blog.plover.com/math/24-puzzle.html">his approach</a>, but I do want to see how similar we were.

He also used a queue. I had mine in a channel and he maintained a list. I'd say that was about the same idea with different phenotypes.

He created a way to process two numbers at a time and replace them with their result. His added to a history string each time whereas I made the history string ahead of time. His solution was different because each combination of digits and operators represented a tree of solutions. You can do the first pair of digits first, or the last pair first, or the middle pair first. Then, you go through that for what's left. I'd accidentally found a solution to the particular digits because those worked in left to right order. But, I couldn't find a solution to <code>8 8 3 3 == 24</code> because there isn't one that evaluates left to right. I hadn't handled the situation where I do the operations in other orders, like this:

<pre class="brush:plain">
8 ÷ (3 - (8÷3)) = 24
</pre>

There are actually six paths through the possible combinations of four digits and three operators. There were various ways that I could handle this. I could make all of those candidates and add them to the channel, or I could have the thing that takes the existing candidates generate sub problems and add those to the channel. This would mess up my tidy and apparently unclever solution to getting the history.

And, here's a good place to back up for a moment. Had I thought about this problem more and paid attention to his note about <code>8 8 3 3 == 24</code>, I would have made a test case for that and noticed I couldn't solve it. I do that when I'm doing production programming and am very careful about the specification, but I wasn't fastidious here. I think my hubris got in the way. However, I did notice my omission as I was double-checking my work. It's a bit heart stopping to realize such a thing right before you were about to push to master though. ;)

After playing with this much longer than I should have, I came up with something close to what Mark Jason did. I took longer because I was trying quite hard to avoid his solution and I was trying to be clever in Perl 6. He created nodes for each computation (with the starting trivial case of the result being the starting digit). As he carried those along, he combined two nodes to create a new node with the new result but also a new string version of the combined history of those two nodes. While I was trying to avoid this, I was doing the same idea with a differen't implementation. I didn't have a fresh idea (other that creating an RPN calculator class, until I realized that it was still the same idea).

I've adjusted a few things from my previous program and explained some
of the trickier accounting to get the history. There's plenty more I don't like about my implementation, but it's good enough that I can move on to other problems:

<pre class="brush:plain">
sub MAIN (*@) {
	my $goal       = @*ARGS.pop;
	my @numbers    = @*ARGS.clone.flat;
	my @operations = < + - * / >;

	my @cross = [X] @operations xx (@numbers.elems - 1);
	my @perms = @numbers.permutations.unique( :with(&[eqv]) );
	my @orders = ( 0 .. (@numbers.elems - 2) ).permutations;

	put "Total candidates: " ~
		( @cross.elems * @perms.elems * @orders.elems );

	my $channel = Channel.new;

	my @promises;
	my $total = 0;
	#`(
		probably need to make fewer threads since this is
		computation heavy, but here's where you can adjust
		that.
		)
	my $max_promises = 1;  # 1 seems to be the right number
	for 1 ..  $max_promises {
		@promises.push: start {
			react  {
				whenever $channel -> $item {
					state $count = 0; $count++;
					my $result = evaluate( $item );
					next unless defined $result[0];
					put "SOLUTION! $result[1] = $goal"
						if $result[0] == $goal;
					}
				}
			};
		}

	my $start = now;
	put "Starting to send to channels";
	#`(
		Don't really need the double X here, but it saves a
		hardcoded series of next loops. With 4 digits, the
		maximum list size is under 10,000. The nested loop
		version ran in about the same time
		)
	for @perms X @cross X @orders -> $i {
		$channel.send( $i )
		}
	put "Done sending to channels: "
		~ (now - $start) ~ " seconds";

	$channel.close;

	await |@promises;

	put "Total handled was $total";
	}

sub evaluate ( $item ) {
	#`(
		Each entry in digits is a tuple that represents a
		sub computation. The first item in there is a number
		and the second is a string that represents the
		history of the prior computations. At the start, the
		history is simply the digit for that tuple
		)
	my @digits  = |$item[0].map: { [ $_, $_ ] };
	#`(
		Ops is a list of mathematical operators, and should
		have one fewer elements that @digits since every
		operator needs two operands
		)
	my @ops     = |$item[1];
	#`(
		The orders represents the order of operations. Think
		of this as implementing implied parens around
		operations. With this, you aren't stuck with issues
		of precedence or left-to-right evaluation.
		)
	my @orders  = |$item[2];
	#`(
		@orders_offset tracks and adjusts positions in the
		operation. It's important with you want to do the
		3rd operation last, for instance, but doing the 1st
		and 2nd operations has removed elements from
		@digits. Later operations need to adjust their
		offsets when they look for operands in @digits.

		The indices in @orders_offset correspond to the
		values @orders. Use the value from @orders as the
		index into @orders_offset to get the offset.
		)
	my @orders_offset = 0 xx @orders.elems;


	#`(
		Go through all the values in @orders, which
		correspond to the index to look up the operation in
		@ops and the index for the offsets in @digits (which
		reduces as we do work).
		)

	for ^@orders {
		my ( $real_order ) = @orders[$_];
		my ( $order )      = $real_order -
			@orders_offset[$real_order];
		my ( $op )         = @ops[$real_order];

		my $result = op( $op, @digits[$order], @digits[$order+1] );
		return [ NaN, Str ] unless defined $result;

		my $string =
			"({@digits[$order][1]} $op {@digits[$order+1][1]})";

		# splice is slurpy, so do extra work to maintain the tuple
		@digits.splice: $order, 2, [ $[ $result, $string ] ];

		#`(
			if this step combined elements, adjust offsets for
			later operations. That is, when the list shrinks,
			increase offsets after that point so the offsets
			still refer to the same items.
			)
		for ^@orders_offset {@orders_offset[$_]++ if $order < $_ }
		}

	return @digits[0];
	}

# all of these get a tuple from @digits
multi op ( '+', $m, $n ) { $m[0] + $n[0] }
multi op ( '-', $m, $n ) { $m[0] - $n[0] }
multi op ( '/', $m, $n ) { $n[0] == 0 ?? fail() !! $m[0] / $n[0] }
multi op ( '*', $m, $n ) { $m[0] * $n[0] }
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>350</wp:post_id>
  <wp:post_date>2017-04-18 14:10:25</wp:post_date>
  <wp:post_date_gmt>2017-04-18 14:10:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-24-puzzle-in-perl-6-using-channels-and-promises</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asynchronous"><![CDATA[Asynchronous]]></category>
  <category domain="category" nicename="cross-operators"><![CDATA[Cross Operators]]></category>
  <category domain="category" nicename="examples"><![CDATA[Examples]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>780</wp:comment_id>
    <wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
    <wp:comment_author_email>broto3@zoffix.com</wp:comment_author_email>
    <wp:comment_author_url>http://perl6.party</wp:comment_author_url>
    <wp:comment_author_IP>209.195.88.2</wp:comment_author_IP>
    <wp:comment_date>2017-04-19 11:04:52</wp:comment_date>
    <wp:comment_date_gmt>2017-04-19 11:04:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[FWIW: .unique's `:with` has complexity of something around O(n²/2) and you should try to avoid it whenever you can and use `:as` arg instead. In this case, since all lists have the same number of elements, `:as(*.Str)` can be used:

     m: my @p = 1..2000; @ = @p.unique: :with(&amp;[eqv]); say now - INIT now
     rakudo-moar 6f3de6: OUTPUT: «7.468134␤»
     m: my @p = 1..2000; @ = @p.unique: :as(*.Str); say now - INIT now
     rakudo-moar 6f3de6: OUTPUT: «0.00771542␤»]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492599892.4308989;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1492952333.8959579;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>791</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.73.109.159</wp:comment_author_IP>
    <wp:comment_date>2017-04-23 13:00:41</wp:comment_date>
    <wp:comment_date_gmt>2017-04-23 13:00:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When stringifying lists, you can get the same string from lists with different elements. That would potentially discard some lists that should be kept.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>780</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1492952441.136091;s:5:"event";s:9:"check-ham";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1113</wp:comment_id>
    <wp:comment_author><![CDATA[JJ Merelo]]></wp:comment_author>
    <wp:comment_author_email>jjmerelo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://jj.github.io</wp:comment_author_url>
    <wp:comment_author_IP>2.138.40.108</wp:comment_author_IP>
    <wp:comment_date>2018-03-30 15:57:17</wp:comment_date>
    <wp:comment_date_gmt>2018-03-30 15:57:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[No matter what I do, it always get handled by a single thread. This is perl6 2018.13:

---
perl6 puzzle.p6  6 6 5 2 17
Total candidates: 768
Starting to send to channels
Done sending to channels: 0.057440 seconds
SOLUTION! 5/ 6+ 2* 6 = 17
Thread 4 handled 768 candidates
Total handled was 768
---]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Quick Trick: Longest string using the reduction operator</title>
  <link>http://www.learningraku.com/2017/04/16/quick-trick-longest-string-using-the-reduction-operator/</link>
  <pubDate>Sun, 16 Apr 2017 15:51:33 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=354</guid>
  <description/>
  <content:encoded><![CDATA[I had a problem where I wanted the longest string from a list. I didn't want to sort because I wanted to do it with a single pass. (The comments show sorting through <code>max</code>, which I was also avoiding). <!--more-->

<pre class="brush:plain">
# quote words, but with quote protection!
my @strings = qww/
	"This is a line"
	short
	"A very very long string maybe, certainly the longest"
	other
	not
	this
	a
	one
	or
	even
	1
	/;

# If you give one thing to sort, it does that to both things and
# compares with camp
my ($longest) = @strings.sort( *.chars ).[*-1];
</pre>

Instead, I decided to use the <A href="https://docs.perl6.org/language/operators#Reduction_Operators">reduction operator</a> with an operator that I make up (and limit to the lexical scope). The infix <code>longest</code> takes two strings and returns the longest. I let the reduction take care of the rest:

<pre class="brush:plain">
my sub infix:<longest> { $^a.chars > $^b.chars ?? $^a !! $^b }
my $longest = [longest] @strings;

say "Longest is ｢$longest｣";
</pre>

Some commenters point out that calling <code>.max</code> does the same thing. Looking in the <a href="https://github.com/rakudo/rakudo/blob/8bf67298c7bac51790e924efc125e4f8f7600013/src/core/Any-iterable-methods.pm">Rakudo source for max</code>, you see that it's single pass too:

<pre class="brush:plain">
my $longest = @strings.max: *.chars;
say "Longest is ｢$longest｣";
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>354</wp:post_id>
  <wp:post_date>2017-04-16 15:51:33</wp:post_date>
  <wp:post_date_gmt>2017-04-16 15:51:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-trick-longest-string-using-the-reduction-operator</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="infix"><![CDATA[infix]]></category>
  <category domain="category" nicename="quick-tricks"><![CDATA[Quick Tricks]]></category>
  <category domain="post_tag" nicename="reduction-operator"><![CDATA[reduction operator]]></category>
  <category domain="category" nicename="sorting"><![CDATA[Sorting]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>772</wp:comment_id>
    <wp:comment_author><![CDATA[wamba]]></wp:comment_author>
    <wp:comment_author_email>wamba@centrum.cz</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>95.173.194.193</wp:comment_author_IP>
    <wp:comment_date>2017-04-16 16:37:09</wp:comment_date>
    <wp:comment_date_gmt>2017-04-16 16:37:09</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<code>my $longest = @strings.max: *.chars ;</code>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492360629.0632319;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1492411238.060605;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>774</wp:comment_id>
    <wp:comment_author><![CDATA[Ronald Schmidt]]></wp:comment_author>
    <wp:comment_author_email>ronaldxs@software-path.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.software-path.com</wp:comment_author_url>
    <wp:comment_author_IP>69.127.134.110</wp:comment_author_IP>
    <wp:comment_date>2017-04-16 16:55:17</wp:comment_date>
    <wp:comment_date_gmt>2017-04-16 16:55:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[my ($longest) = max :by{$^a.chars &lt;=&gt; $^b.chars}, @strings;]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1492361717.67383;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Rakudo in Chocolatey makes AppVeyor easier</title>
  <link>http://www.learningraku.com/2017/05/01/rakudo-in-chocolatey-makes-appveyor-easier/</link>
  <pubDate>Mon, 01 May 2017 23:59:04 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=364</guid>
  <description/>
  <content:encoded><![CDATA[Rakudo is now easier to install on Windows. <a href="https://chocolatey.org/packages/rakudostar">Rakudo Star is now in Chocolatey</a> (with 2017.04 awaiting moderation as I write this). This makes it much easier to automatically deploy Rakudo Star in Windows environments.

<div class="image center">
<div>
<img src="/images/chocolatey.png" height="216" width="500" />
</div>
</div>

<!--more-->

Earlier this month I spent too much time getting <A href="/2017/04/02/rakudo-star-on-appveyor/">Rakudo to install on AppVeyor</a>, and, having spent too much time on that, I spent a bunch more getting co-maintainer permissions on the chocolatey package. I updated the original package created by Jake Russo back in 2015, including all the new chocolatey requirements. I have all of that in GitHub as <a href="https://github.com/briandfoy/rakudo-star-chocolatey">rakudo-star-chocolatey</a>. After the semi-manual approval process, I have a fresh Rakudo available. Two days later 2017.04 came out. I've updated the package again and it's in moderation (should clear in a couple days).

Using a package manager that other services already support makes it a cinch to deploy Rakudo there. For example, Windows 10 has <a href="https://github.com/OneGet/oneget/blob/master/readme.md">OneGet</a>, a manager of package managers. You can install several package manager and ask OneGet to install something. Somehow it figures out who can provide it and does the magic:

<div class="image center">
<div>
<img src="/images/oneget-powershell.png" height="369" width="500" style="border:1" />
</div>
</div>

That looks complicated, but it's really two commands with some confirmations:

<pre class="brush:plain">
PS C:\> Get-PackageProvider -name chocolatey

PS C:\> Install-Package rakudostar
</pre>

You probably have to answer a couple of questions in this process. The rakudostar package isn't trusted, but the chocolatey package has the SHA256 of the MSI from <a href="http://rakudo.org/">rakudo.org</a>. But, chocolatey also trusts me to use the right URL. I could put anything in there. I'll have to work on the trusted part some other time (unless you want to figure it out).

Now my AppVeyor config in the <a href="https://github.com/briandfoy/perl6_appveyor_test"> perl6_appveyor_test</a> test project is now much simpler. The Rakudo installation is a couple of lines instead of the tricky PowerShell I had before:

<pre class="plain">
  - if not exist "C:\Rakudo" cinst rakudostar
  - SET PATH=C:\rakudo\bin;C:\rakudo\share\perl6\site\bin;%PATH%
  - ps: refreshenv
  - perl6 -v
</pre>
 ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>364</wp:post_id>
  <wp:post_date>2017-05-01 23:59:04</wp:post_date>
  <wp:post_date_gmt>2017-05-01 23:59:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rakudo-in-chocolatey-makes-appveyor-easier</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[appveyor]]></category>
  <category domain="post_tag" nicename="chocolatey"><![CDATA[chocolatey]]></category>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Don't use &lt; in programming</title>
  <link>http://www.learningraku.com/2017/05/21/dont-use-in-programming/</link>
  <pubDate>Sun, 21 May 2017 16:48:17 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=374</guid>
  <description/>
  <content:encoded><![CDATA[I don't actually mean that you shouldn't use <code>&lt;</code>, but I'm playing off <a href="http://llewellynfalco.blogspot.hu/2016/02/dont-use-greater-than-sign-in.html">Don't use the greater than sign in programming</a>. That post from Lewellyn Falco reminded me of a trick for a conditional that checks if a number is inside or outside of a range. A C programmer pointed this out to me years and years ago. It's not an uncommon trick, but it's not one I think about much. And, in Perl 6, there's another way to do the same thing.

<!--more-->

To convey intent, he constructed his comparisons so both uses of the variable were either on the inside or on the outside. That way, the position of the variable in the comparisons showed where he intended its value to be. Here's that expressed in C:
<pre class="brush:c">/* x between 5 and 10 */
if( 5 &lt; x &amp;&amp; x &lt; 10 ) { ... }

/* x not between 5 and 10 */
if( x &lt;= 5 &amp;&amp; 10 &lt;= x ) { ... }
</pre>
The lowest value is left-most and the greatest value is right-most. Those might be literals or variables. For this to work, the comparators have to be the same. Flip one of them and it might never work because the combined conditions don't mean what they superficially appear to mean:
<pre class="brush:c">if( 5 &lt; x &amp;&amp; 10 &lt; x ) { ... }  /* Just x &gt; 10 really */
</pre>
Even with this trick of placing the variable in the literal code, thi still annoys me because I have to specify the variable twice.

Python 2 lets you do it with a <i>chained comparison</i>:
<pre class="brush:python">#!/usr/bin/python

x = 6

if 5 &lt; x &lt; 10 :
	print "It's between 5 and 10"
else:
	print "It's outside the range"
</pre>
Python didn't invent this feature. <a href="http://rigaux.org/language-study/concepts-history.html">Various resources that credit BCPL curiously link to a Perl 6 RFC</a>. Odd. I think they are all pulling from the same source. You can do it in Ruby if you <a href="https://gist.github.com/padde/2429814">redefine some operators</a>. CoffeeScript has it. Other languages have it.

But, this is a blog about Perl 6, which can do this too. This is one of the more pleasing small changes that I really like:
<pre class="brush:plain">my $x = 6;

if 5 &lt; $x &lt; 10 {
	put "x is between 5 and 10";
	}
else {
	put "x is not in range";
	}
</pre>
But, Perl 6 goes one better. If you want to test that something is within a range, test that it's in a <a href="https://docs.perl6.org/type/Range">Range</a>. To exclude the endpoints, you need the <code>^</code> characters around the <code>..</code>:
<pre class="brush:plain">if $x ~~ 5^..^10 {
	put "x is between 5 and 10";
	}
else {
	put "x is not in range";
	}
</pre>
This comparison really is the same thing. Instead of checking that <code>$x</code> is in the set <i>6,7,8,9</i> (as you might expect from turning the Range into a list) it tests that the value of <code>$x</code> as a <a href="https://docs.perl6.org/type/Real">Real</a> is between the endpoints. So, 5.5 and 9.999 are within that Range. That's the same behavior as the previous examples.

Perl 6 doesn't stop there. You can make the chain as long as you like:
<pre class="brush:plain">if 1 &lt; 2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 {
	say "That's a long chain!";
	}
</pre>
But, you don't need the chain. The <a href="/2020/03/17/reducing-comparison-operators/">reduction operator works with the comparison operators too</a>:
<pre class="brush:plain">if [&lt;] 1, 2, 3, 4, 5, 6, 7 {
	say "That's a not long chain!";
	}
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>374</wp:post_id>
  <wp:post_date>2017-05-21 16:48:17</wp:post_date>
  <wp:post_date_gmt>2017-05-21 16:48:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dont-use-in-programming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <category domain="category" nicename="ranges"><![CDATA[Ranges]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>888</wp:comment_id>
    <wp:comment_author><![CDATA[Tanktalus]]></wp:comment_author>
    <wp:comment_author_email>tanktalus@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>174.3.95.21</wp:comment_author_IP>
    <wp:comment_date>2017-06-12 14:58:46</wp:comment_date>
    <wp:comment_date_gmt>2017-06-12 14:58:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[/* x not between 5 and 10 */
if( x &lt;= 5 &amp;&amp; 10 &lt;= x ) { ... }

I&#039;m thinking you may have meant || instead of &amp;&amp;.  I&#039;m wondering, also, what the p6 idiom is for &quot;outside of this range.&quot;  If &quot;5 &lt;= x  x &gt; 10" means "x is outside 5 and 10".  I'm assuming that this example quoted above would be done something like "! ( $x ~~ 5..10 )" as one of the more concise / idiomatic methods available?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1497279526.8315771;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1499644041.5235021;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>How you average numbers doesn't matter</title>
  <link>http://www.learningraku.com/2017/06/17/how-you-average-numbers-doesnt-matter/</link>
  <pubDate>Sat, 17 Jun 2017 08:54:09 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=383</guid>
  <description/>
  <content:encoded><![CDATA[Perl 6 averages "floating point" numbers correctly. That's an interesting statement because it seems like it should be obvious and expected. However, people around computers long enough are used to round-off error. Sinan Ünür wrote <A href="https://www.nu42.com/2015/03/how-you-average-numbers.html">How you average numbers matters</a> to show the curious compounding of small effects. He shows some Perl 5 code:

<!--more-->

<pre class="brush:perl">
my @data = (1_000_000_000.1, 1.1) x 50_000;
printf "Naive mean:                  %f\n", (sum @data) / @data;
</pre>

This outputs the wrong answer instead of 500,000,000.6:

<pre class="brush:plain">
Naive mean:                  500000000.600916
</pre>

I wanted to try this in Perl 6 and had been putting it off thinking I might have to do a work to see what's going on.

<pre class="brush:perl">
my @data = slip(1_000_000_000.1, 1.1) xx 50_000;
printf "Naive mean: %f\n", ([+] @data) / @data.elems;
</pre>

But no, Perl 6 give the right answer:

<pre class="brush:plain">
Naive mean: 500000000.600000
</pre>

You can expand the example to show the identity of the first object in the list. The <code>.^name</code> meta method will tell you that:

<pre class="brush:perl">
my @data = slip(1_000_000_000.1, 1.1) xx 50_000;
put @data[0].^name;
printf "Naive mean: %f\n", ([+] @data) / @data.elems;
</pre>

You see that the first thing (and all the other things) is a <A href="https://doc.perl6.org/type/Rat">Rat</a>, Perl 6's builtin rational number type:

<pre class="brush:plain">
Rat
Naive mean: 500000000.600000
</pre>

Perl 6 stored the number as a ratio instead of a floating point number. It stays as an exact value. You can add a <A href="https://doc.perl6.org/type/Rat">Rat</a> and another <A href="https://doc.perl6.org/type/Rat">Rat</a> and get another exact value in the resultant <A href="https://doc.perl6.org/type/Rat">Rat</a>. You can keep doing that almost as long as you like as long as Perl 6 can represent the numerator and denominator (and it reduces the fraction as it goes along). Beyond that there's a <A href="https://doc.perl6.org/type/FatRat">FatRat</a> that can take you even further.

You can sort it ascending or descending, like Sinan did. In his examples, each order got a different answer in the end. You can try that in the Perl 6 version:

<pre class="brush:plain">
my @data = slip(1_000_000_000.1, 1.1) xx 5;
printf "Naive mean: %f\n", ([+] @data) / @data.elems;

my @asc  = @data.sort: &infix:«<=>»;
printf "Naive mean: %f\n", ([+] @asc) / @asc.elems;

my @desc = @asc.reverse;
printf "Naive mean: %f\n", ([+] @desc) / @desc.elems;
</pre>

But, every mean gives the same answer:

<pre class="brush:plain">
Naive mean: 500000000.600000
Naive mean: 500000000.600000
Naive mean: 500000000.600000
</pre>

So, there's nothing to see here. At least it's off my to-do list. Many of the things Sinan sends me requires long reads and working out math by hand, but this was easy.

You can still have some small effects in the final operation to turn the rational number into a floating point, but that's something unrelated to the averaging.

<hr />

There are a few other interesting things in the simple code which I'll cover quickly:

The <a href="https://docs.perl6.org/routine/reduce">reduction operator</a>, <code>[+]</code> is a quick way to type that you want to apply that operation between every item in the list. You don't have to use the addition operator. You can put almost anything in there.

<hr />

The <code>xx</code> is the <a href="https://docs.perl6.org/routine/xx">list repetition operator</a>. But, I want each list to combine into a flatten larger list. The <Code><a href="https://docs.perl6.org/type/Slip#sub_slip">slip</a></code> causes an inner list to lose its list structure and become separate items in the larger list. Without the <code><a href="https://docs.perl6.org/type/Slip#sub_slip">slip</a></code> you'd get a list of 50,000 sublists. Try it with only five sublists:

<pre class="brush:plain">
my @data = (1_000_000_000.1, 1.1) xx 5;
say @data;
</pre>

The <code>@data</code> array has five items, all of which are lists:

<pre class="brush:plain">
[(1000000000.1 1.1) (1000000000.1 1.1) (1000000000.1 1.1) (1000000000.1 1.1) (1000000000.1 1.1)]
</pre>

Now add the <code><a href="https://docs.perl6.org/type/Slip#sub_slip">slip</a></code>:

<pre class="brush:plain">
my @data = slip(1_000_000_000.1, 1.1) xx 5;
say @data;
</pre>

The array now has is flat. The sublist inserted their items into the larger list without the structure:

<pre class="brush:plain">
[1000000000.1 1.1 1000000000.1 1.1 1000000000.1 1.1 1000000000.1 1.1 1000000000.1 1.1]
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>383</wp:post_id>
  <wp:post_date>2017-06-17 08:54:09</wp:post_date>
  <wp:post_date_gmt>2017-06-17 08:54:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-you-average-numbers-doesnt-matter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <category domain="post_tag" nicename="sinan"><![CDATA[sinan]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Two ways to change multiple hash values at the same time</title>
  <link>http://www.learningraku.com/2017/07/10/two-ways-to-change-multiple-hash-values-at-the-same-time/</link>
  <pubDate>Mon, 10 Jul 2017 00:36:11 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=391</guid>
  <description/>
  <content:encoded><![CDATA[Somehow I ended up a binary assignment with the <A href="https://docs.perl6.org/routine/Z#(Operators)_infix_Z">zip operator</a>:

<pre class="brush:plain">
$giver&lt;wallet given> Z+= (-$amount, $amount)
</pre>

<!--more-->

I was playing around with a <a href="http://www.decisionsciencenews.com/2017/06/19/counterintuitive-problem-everyone-room-keeps-giving-dollars-random-others-youll-never-guess-happens-next/">simulation problem from Uri Wilensky</a> (R's <code>gganimate</code> is pretty cool, and pretty and cool). 

That's the same thing as writing out both sides:

<pre class="brush:plain">
$giver&lt;wallet given> = $giver&lt;wallet given> Z+ ( -$amount, $amount )
</pre>

But, I also could have used a hyper here:

<pre class="brush:plain">
$giver&lt;wallet given> >>+=&lt;&lt; ( -$amount, $amount )
</pre>

I've longed wished for this sort of thing in Perl 5, and I think I've strained various unmaintainable kludges to get it. Even these Perl 6 expressions might be too mind bending for the work-a-day maintainer.

And, for what it's worth, the results are pretty much what I expected despite the those Ph.D.s guessing incorrectly. But then, I also have a <a target="_blank" href="https://www.amazon.com/gp/product/0716710889/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0716710889&linkCode=as2&tag=hashbang09-20&linkId=d67a7004d58db1f05afe368c4421e067">statistical thermodynamics</a> book with arm's reach of my keyboard. A closed system with a fixed number of particles and a fixed amount of energy where particles can transfer energy to other particles is a type of <a target="_blank" href="https://www.amazon.com/gp/product/093570258X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=093570258X&linkCode=as2&tag=hashbang09-20&linkId=2bba09bd19d4454e380924f053b57929">Spherical Cow</a>. The system can exist in any of its microstates. Particle identity aside, some distributions of energy are more probable. The one that everyone might guess, that all particles will have the close to the same energy, just isn't that likely. But, this isn't a physics blog.   ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>391</wp:post_id>
  <wp:post_date>2017-07-10 00:36:11</wp:post_date>
  <wp:post_date_gmt>2017-07-10 00:36:11</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>two-ways-to-change-multiple-hash-values-at-the-same-time</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="hyperoperators"><![CDATA[Hyperoperators]]></category>
  <category domain="category" nicename="zip-operators"><![CDATA[Zip operators]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>909</wp:comment_id>
    <wp:comment_author><![CDATA[Demayl]]></wp:comment_author>
    <wp:comment_author_email>ghost8901@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>46.47.82.241</wp:comment_author_IP>
    <wp:comment_date>2017-07-11 06:43:39</wp:comment_date>
    <wp:comment_date_gmt>2017-07-11 06:43:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[In Perl 5 you can do that. Just use hash slices. Here is an example:

<pre class="brush:perl">
use Data::Dumper;
my %a = 1..10;
@a{1,3} = ( 666,666 );
warn Dumper \%a;
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value><![CDATA[false]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:2:{s:4:"time";d:1499755419.540736;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:3:{s:4:"time";d:1500936621.423039;s:5:"event";s:15:"status-approved";s:4:"user";s:5:"brian";}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>926</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.73.109.159</wp:comment_author_IP>
    <wp:comment_date>2017-07-24 22:51:55</wp:comment_date>
    <wp:comment_date_gmt>2017-07-24 22:51:55</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's not the same thing though. It's not adding to values that are already there. You are merely replacing values.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>909</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value><![CDATA[a:4:{s:4:"time";d:1500936715.8678069;s:5:"event";s:11:"check-error";s:4:"user";s:5:"brian";s:4:"meta";a:1:{s:8:"response";s:0:"";}}]]></wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Turning strings into fake positionals</title>
  <link>http://www.learningraku.com/2018/01/11/turning-strings-into-fake-positionals/</link>
  <pubDate>Thu, 11 Jan 2018 07:25:56 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=397</guid>
  <description/>
  <content:encoded><![CDATA[While playing with some strings I realized that I really wanted strings to do the <a href="https://docs.perl6.org/type/Positional">Positional</a> role. When I'm inspecting or modifying strings I'm often doing things based on positions so the <code>Positional</code> interface seems interesting. Just for fun I can adapt the <code>[ ]</code> to be the interface to <code>substr</code>: <!--more-->

<pre class="brush:plain">
multi postcircumfix:<[ ]> ( Str:D $s, Int:D $n --> Str ) {
	$s.substr: $n, 1
	}
multi postcircumfix:<[ ]> ( Str:D $s, Range:D $r --> Str ) {
	$s.substr: $r.min, $r.max - $r.min + 1
	}
multi postcircumfix:<[ ]> ( Str:D $s, List:D $i --> List ) {
	map( { $s.substr: $_, 1 }, @$i ).List
	}

my $string = 'The quick, purple butterfly';

{ # Works
my $single = $string[0];
say $single;
}

{ # Works
my $substring = $string[5..9];
say $substring;
}

{ # Works
my $substring = $string[1,3,5,7];
say $substring;
}
</pre>

This outputs:

<pre class="brush:plain">
T
uick,
(h   u c)
</pre>

I don't want to make a habit of this though even if it is interesting.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>397</wp:post_id>
  <wp:post_date>2018-01-11 07:25:56</wp:post_date>
  <wp:post_date_gmt>2018-01-11 07:25:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>turning-strings-into-fake-positionals</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Playing with Heap's Algorithm</title>
  <link>http://www.learningraku.com/2017/12/31/playing-with-heaps-algorithm/</link>
  <pubDate>Sun, 31 Dec 2017 06:14:32 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=400</guid>
  <description/>
  <content:encoded><![CDATA[I implemented Heap's algorithm, which generates all permutations of a list, in Perl 6. It's the end of the year and I'm cleaning out all the things I marked to read later. Sometimes I'll take something simple, such as a famous algorithm, and try to do it on my own. It's good practice for language skills but it's also a good education on languages. <!--more-->

I was reading David M.Bradford's <a href="http://tinypig2.blogspot.co.za/2016/12/heaps-algorithm-and-generating-perl.html">Heap's Algorithm and Generating Perl Code From Pseudocode</a>, which referenced the Wikipedia entry for <a href="https://en.wikipedia.org/wiki/Heap's_algorithm">Heap's Algorithm</a>.

There's already a method that does this, but I'm not going to let that stand in my way:

<pre class="brush:plain">
> my @array = &lt;a b c>
[a b c]
> @array.permutations
((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))
</pre>

The structure of my solution is mostly the same (<i>mutatis mutandi</i>) that I'd read on either of those pages:

<pre class="brush:plain">
my @array = &lt;a b c>;

for heaps-algorithm( @array, ) -> $permutation {
	put $permutation;
	}

sub heaps-algorithm ( *@array ) {
	state $i = 0;
	state @permutations = [ @array.clone, ];
	state @A = |@permutations.[0].clone;
	state @c = (0) xx @A.elems;

	loop {
		if @c[$i] &lt; $i {
			my $swap-index = $i %% 2 ?? 0 !! @c[$i];
			@A[$swap-index, $i] = @A[$i, $swap-index];
			@permutations.push: @A.clone;
			@c[$i]++;
			$i = 0;
			}
		else {
			@c[$i] = 0;
			$i++;
			}
		
		last unless $i &lt; @array.elems;
		}

	return @permutations;
	}
</pre>

There are a few interesting bits of Perl 6 syntax. It's the end of the year and I have many other things to use or lose so I'll merely point out a few things:

<h3>The single argument rule</h3>

I wanted to build up an array of permutations. For the first item I store the original array. I have a significant trailing comma there:

<pre class="brush:plain">
	state @permutations = [ @array.clone, ];
</pre>

If I only use a single array argument (the single argument), the array is automatically flattened. The comma means that it's not a single argument even though there isn't a second argument. That isn't flattened. Notice the extra structure:

<pre class="brush:perl">
% perl 6
> my @array = &lt;a b c>
[a b c]
> my @p = [ @array ]
[a b c]
> my @p = [ @array, ]
[[a b c]]
</pre> 

When I initialize <code>@A</code>, which is the structure that I want to change, I flatten the first element with the <code>|</code>. 

<h3>In-place swapping</h3>

Many other places I looked followed the pseudocode that checked the cursor and then called one of two swap operations:

<pre class="brush:perl">
			if i is even then
				swap(A[0], A[i])
			else
				swap(A[c[i]], A[i])
			end if
</pre> 

I'll choose the right index and put that into the slices:

<pre class="brush:perl">
			my $swap-index = $i %% 2 ?? 0 !! @c[$i];
			@A[$swap-index, $i] = @A[$i, $swap-index];
</pre> 

<h3>Cloning</h3>

Each time I create a new permutation I add it to <code>@permutations</code>. But, I don't want to keep adding the same object because that object will keep moving it's elements around. I want to preserve the order each time so I call <code>clone</code>. I probably overuse that method.

<pre class="brush:perl">
@permutations.push: @A.clone;
</pre> 

I could have done something different, such as using <code>.List</code> to make a new list out of the current state of the array. I wasn't thinking too hard about what I wanted on the other side but it's unlikely that I'd want something mutable.

<pre class="brush:perl">
@permutations.push: @A.List;
</pre> 

<h2>Make it a sequence, part 1</h2>

The solution that I translated created all the permutations. That's okay for small lists but not so good for bigger ones. Perl 6 has user-defined sequences. These are lazy and don't create the next item until it needs to. Could I make this a sequence using the <code>...</code> operator? Mostly I'm doing this to see if it would work because I've been playing with other weird sequences. I certainly don't encourage this.

I can use a code reference to decide the next thingy. If that code reference takes arguments, it gets that number of the prior elements in the sequence. I'd like to get the first element to initialize the <code>@A</code>. After that I just ignore the argument.

I have to adjust the code a bit to end with the right thing. I can't <code>return</code> because this is not a routine. It's just a <code>Block</code>. I'll use <code>$next</code> for that.

I don't particularly like my solution but this is where I ran out of steam:

<pre class="brush:plain">
my $array = [ 1, 2, 3 ];

my $code-ref = -> ( *@a ) { 
	state $i = 0;
	state @A = @a.clone;
	state @c = (0) xx @A.elems;

	my $next;
	
	loop {
		if @c[$i] &lt; $i {
			my $swap-index = $i %% 2 ?? 0 !! @c[$i];
			@A[$swap-index, $i] = @A[$i, $swap-index];
			$next = @A.clone;
			@c[$i]++;
			$i = 0;
			last;
			}
		else {
			@c[$i] = 0;
			$i++;
			}

		last unless $i &lt; @A.elems; 
		}

	$next;
	}

sub make-sequence ( $a --> Seq ) { $a, $code-ref ...^ !*.defined }

my $seq = make-sequence( $array );

for @$seq -> $next { 
	put $next;
	}
</pre>

<h2>Make it a sequence, part 2</h2>

The <code>...</code> worked but is pretty ugly. As Michael mentioned in the comments I should have used <code>gather</code> for this. This generates a <code>Seq</code> (similar to Python's <code>yield</code>). The <code>gather</code> block is the sequence and every <code>take</code> can generate one or more elements for the sequence. The code only runs to the point that it gets another element; when you want another element the code resumes where it left off. If the code finishes without encountering another <code>take</code> (like when this <code>while</code> is done) the sequence is exhausted:

<pre class="brush:plain">
sub heaps-sequence ( *@a --> Seq:D ) {
	gather {
		state $i = 0;
		state @c = (0) xx @a.elems;
		take @a.List;

		while $i <  @a.elems {
			if @c[$i] < $i {
				my $swap-index = $i %% 2 ?? 0 !! @c[$i];
				@a[$swap-index, $i] = @a[$i, $swap-index];
				take @a.List;
				@c[$i]++;
				$i = 0;
				}
			else {
				@c[$i] = 0;
				$i++
				}
			}
		}
	}

my $seq = heaps-sequence( <1 2 3> );

for @$seq -> $next {
	put $next;
	last if $next > 10;
	}
</pre>

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>400</wp:post_id>
  <wp:post_date>2017-12-31 06:14:32</wp:post_date>
  <wp:post_date_gmt>2017-12-31 06:14:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>playing-with-heaps-algorithm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="permutations"><![CDATA[permutations]]></category>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1089</wp:comment_id>
    <wp:comment_author><![CDATA[Michael]]></wp:comment_author>
    <wp:comment_author_email>blogcomments@mscha.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2001:983:8781:1:a9a5:954c:25de:d27f</wp:comment_author_IP>
    <wp:comment_date>2018-01-01 21:17:37</wp:comment_date>
    <wp:comment_date_gmt>2018-01-01 21:17:37</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How about using gather/take for the latter solution?  Much cleaner.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1091</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.66.237.133</wp:comment_author_IP>
    <wp:comment_date>2018-01-02 19:23:42</wp:comment_date>
    <wp:comment_date_gmt>2018-01-02 19:23:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I didn't use <code>gather</code> because I was playing with the ... operator. I'll see about adding another example.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1089</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Converting numbers to strings the hard way</title>
  <link>http://www.learningraku.com/2018/01/09/converting-numbers-to-strings-the-hard-way/</link>
  <pubDate>Tue, 09 Jan 2018 06:02:00 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=412</guid>
  <description/>
  <content:encoded><![CDATA[Turning numbers into strings can be a big waste of time and money.  Paul Khuong wrote about this in <a href="//www.pvk.ca/Blog/2017/12/22/appnexus-common-framework-its-out-also-how-to-print-integers-faster/">How to Print Integers Really Fast (With Open Source AppNexus Code!)</a>. If you've bought into the JSON mania you're probably serializing numbers as strings quite a bit without even thinking about it. Much of his discussion is special to C or C++ where you (think) you directly control the hardware. Since this is also a typical interview problem I thought I'd work on it in Perl 6 with a few extras. <!--more-->

The solutions I found convert everything to decimal numbers. There are probably some hexadecimal converters out there. That's not so interesting. How about a converter for arbitrary bases with arbitrary digits? And, I can't use any of the builtin stuff to make this work (and so far I haven't peeked to see how Rakudo does it).

The solution is to decompose a number into parts and convert that  partto a string with a lookup table. Put together all your string parts to get the full number. Optimizing that lookup table is most of the problem but I don't worry about that right away.

I create a factory that takes a single string where each character represents a digit; the number of digits is the base. I don't care which characters are in the string. Maybe they aren't in order of their codepoints, or they are repeated, or some other weird thing. Specify a stupid string and get stupid number serializations. If I don't specify a string I'll default to the decimal digits. From that I get the base that I'll use to decompose the number and I'll break up the string into characters in an array so I can use the numeric value as the index to map it onto its string value. I'll collect the string values then join them:

<pre class="brush:plain">
sub int-to-str-factory (
		Str:D $digit-str = '0123456789'
		--> Callable:D ) {
	my Int:D $base  = $digit-str.chars;
	my Str:D @table = $digit-str.comb;

	sub ( Int:D $i is copy where * >= 0 --> Str:D ) {
		my Str:D @temp = ();

		return @table.[0] if $i == 0;

		while $i > 0 {
			my Int:D $digit = $i % $base;
			$i div= $base;
			@temp.unshift: @table.[ $digit ];
			}

		@temp.join: '';
		}
	}
</pre>

This doesn't convert numbers to strings. It creates code that converts numbers to strings and returns that anonymous subroutine. That's what a factory does. I've also limited this to zero and positive integers but handling sign is not a big deal if I need it.

The <code>div</code> operator for integer division is quite a handy complement to the <code>%</code> modulus to get the remainder. I thought briefly about defining my own operator to return the remainder and reduce the starting number in one step, but maybe I'll come back to that in some other post.

If I were doing this in C++ I'd care about that because the bits in physical storage probably care about them. The original posts were using binary-coded decimal that used four bits per digit. Add the same nybble to each of those and you get the ASCII character for that digit. Clever. Since Perl 6 doesn't let me look at the physical representation I can skip that part of the problem (although I could connect to external libraries). That also means that I don't have to allocate any memory for my final string. I don't get to make those choices although the C++ program thinks hard about that.

Now I can create something to turn numbers into decimal strings:

<pre class="brush:plain">
my $decimal-stringifier = int-to-str-factory();
put $decimal-stringifier.( 0xDEADBEEF );
</pre>

Remember that my use of a literal hexadecimal number there is a red herring. The parser converts that into an internal integer and doesn't care how it started. I'm converting internal numbers to strings.

So let's make some fancy strings. I'll make a hash with labels for the representation as keys and their code as the value (<a href="//gist.github.com/briandfoy/b648b4c88580d18ecc789b3e3e966c61">it's all in a gist</a>), but that might diverge from the code in this article):

<pre class="brush:plain">
#`(
Create a bunch of anonymous subroutines to create different representations of an integer. The label is the key of the 
hash and the sub is the value.
)
my %representations = map { $_.[0] => int-to-str-factory( $_.[1] ) }, (
	( 'Decimal','0123456789' ),
	( 'Binary', '&#x1f44e;&#x1f44d;' ),
	( 'Base3', '012' ),
	( 'Octal', '01234567' ),
	( 'Hex', '0123456789abcdef' ),
	( 'Base36', '0123456789abcdefghijklmnopqrstuvwxyz' ),
	( 'Braille', '⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚' ),
	( 'Arabic', @(
		'ARABIC-INDIC DIGIT ZERO'.parse-names
				..
		'ARABIC-INDIC DIGIT NINE'.parse-names
		).join: '' ),
	);


sub MAIN ( Int:D $n = 100_000_000.rand.Int ) {
	put "number is $n";

	for %representations.kv -> $label, $sub {
		put "$label: ", $sub.( $n );
		}
	}
</pre>

Here's a run of that:

<pre class="brush:plain">
$ perl6 int-to-str.pl 137
number is 137
Base36: 3t
Binary: &#x1f44d;&#x1f44e;&#x1f44e;&#x1f44e;&#x1f44d;&#x1f44e;&#x1f44e;&#x1f44d;
Base3: 1202
Decimal: 137
Octal: 211
Arabic: ١٣٧
Braille: ⠃⠙⠓
Hex: 89
</pre>

As I mentioned earlier I don't get to think as hard in Perl 6 as C++. I'm much farther away from the iron so choosing registers wisely and other things that hardware cares about. Andrei Alexandrescu writes about this in <a href="//www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920">Three Optimization Tips for C++</a> where he solves the same problem.

Part of these C++ solutions involve decomposing the number into larger chunks (powers of the base) and translating chunks with a longer lookup table. In C++ they wanted to minimize division operations, which probably makes less sense in a much higher level language like Perl 6. Instead of decomposing 8936 into 8, 9, 3, 6 I can decompose it into 89 and 36 and translate those numbers directly without more math. There's a trick; if I break up the number 1307 into 13 and 07, I can't translate 07 to 7. That zero needs to stay there.

<pre class="brush:plain">
sub int-to-str-factory (
		Str:D $digit-str = '0123456789'
		--> Callable:D ) {
	my Int:D $base   = $digit-str.chars;
	my Int:D $base2  = $base ** 2;

	# expand lookup to all one digit strings. These don't
	# have leading zeros
	my Str:D @digits = $digit-str.comb;

	# expand lookup to all two digit strings
	# leading zeros matter!
	my Str:D @digits2 = @digits X~ @digits;

	sub ( Int:D $i is copy where * >= 0 --> Str:D ) {
		my Str:D @temp = ();

		return @digits.[0] if $i == 0;

		while $i > 0 {
			if $i >= $base2 {
				my Int:D $digit = $i % $base2;
				@temp.unshift: @digits2.[ $digit ];
				$i div= $base2
				}
			else {
				my Int:D $digit = $i % $base;
				@temp.unshift: @digits.[ $digit ];
				$i div= $base
				}
			}

		return @temp.join: '';
		}
	}
</pre>

How big that lookup table is depends on many things including the typical size of your numbers. A smaller table requires you to do more divisions but a larger table might involve more searching. I used an array but I could have used a hash. No optimization is probably best for any situation. You have to know something about your numbers. If you always have numbers that take up all 256 bits (a SHA perhaps) you have a different optimization than numbers mostly under 100.

But now here's another thing I can do. I can break up a really big number into much larger chunks and provide those smaller numbers as a sequence. I then format those separately (perhaps in parallel) by calling <code>.hyper</code> on that sequence. The <code>.hyper</code> allows parallelism (where available) and keeps everything in order (unlike <code>.race</code> which doesn't). I reässemble the chunks at the end.

The <code>big-chunks-sequence</code> sequences makes the smaller numbers and I've moved the factories into a module to get them out of the way (<a href="//gist.github.com/briandfoy/bc5b47efb30af6d84135a91bd5c44b2e">gist</a>).

<pre class="brush:plain">
use lib <.>;
use IntToStrFactories;

# some commit id
my $int = :16&gta86288ce3bb62879a0c7169ee4ea89ba77577be7>;
say $int;
say $int.fmt: '%x';

my $chunk_size = 10 ** 8;

my $digits    = '0123456789abcdef';
my $formatter = int-to-str-factory-v2( $digits );
my $sequence := big-chunks-sequence( $int, 8, $digits.chars );

sub big-chunks-sequence (
	Int:D $i is copy,
	Int:D $order = 4,
	Int:D $base = 10 ) {
	state $divisor = $base**$order;
	gather {
		take 0 if $i == 0;

		while $i > 0 {
			take $i % $divisor;
			$i div= $divisor;
			}
		}
	}

$sequence.hyper.map( { $formatter.( $_ ) } ).reverse.join( '|' ).say;
</pre>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>412</wp:post_id>
  <wp:post_date>2018-01-09 06:02:00</wp:post_date>
  <wp:post_date_gmt>2018-01-09 06:02:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>converting-numbers-to-strings-the-hard-way</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="asynchronous"><![CDATA[Asynchronous]]></category>
  <category domain="category" nicename="numbers"><![CDATA[Numbers]]></category>
  <category domain="category" nicename="strings"><![CDATA[Strings]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1092</wp:comment_id>
    <wp:comment_author><![CDATA[Camelia]]></wp:comment_author>
    <wp:comment_author_email>perl6@perl6.org</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2600:3c03:0:0:f03c:91ff:fee4:bcd8</wp:comment_author_IP>
    <wp:comment_date>2018-01-09 17:23:27</wp:comment_date>
    <wp:comment_date_gmt>2018-01-09 17:23:27</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[FWIW `Int:D $i is copy where * &gt;= 0` can be written as `UInt:D $i is copy`

It's a core subset: https://docs.perl6.org/type/UInt]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1093</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>74.66.237.133</wp:comment_author_IP>
    <wp:comment_date>2018-01-09 22:26:38</wp:comment_date>
    <wp:comment_date_gmt>2018-01-09 22:26:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Indeed I could but I also figured I'd come back to make that work with negative numbers too.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1092</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Quick Trick: Catching a Perl 6 warning</title>
  <link>http://www.learningraku.com/2018/01/10/quick-trick-catching-a-perl-6-warning/</link>
  <pubDate>Wed, 10 Jan 2018 11:17:32 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=419</guid>
  <description/>
  <content:encoded><![CDATA[While testing <A href="https://github.com/briandfoy/perl6-file-find">a module</a> I wanted to check that a deprecation warning shows up. <A href="https://docs.perl6.org/routine/warn">Warnings are a special sort of exception</a> that you can catch in a <code>CONTROL</code> block. <!--more-->

<div class="image center">
<div>
<a data-flickr-embed="true"  href="https://www.flickr.com/photos/melystu/37292580974/in/photolist-YPqe53-nUC4oD-evv5mJ-Htsmd-H6opx-pyKgLb-aA77Ex-7FGuyD-5a1w8K-NZQ4C-RovuiA-6Pf16K-BDnfpU-qiwpvR-4WCtFb-dJ5pDe-b1Ejyk-TCH4WL-7mupFc-2T7pK-aNbbmk-vZbnP-9xsTYB-4SpkrJ-AWPMt-sAAcT-rdRWP5-a2p3MT-ouoRCq-qkS83i-6mZr18-aXtfkT-Two3N9-a2p41c-jJzAYb-71pDf-HFx1uf-Krr1E-cisdqw-9fH8E1-jWWBuX-8HrBUk-oGUeeR-SYSxjh-VV8NrT-8hGBuL-6qxFCb-eys5Ps-neD4M6-YBaPJK" title="Warning!"><img src="https://farm5.staticflickr.com/4483/37292580974_e11f1d4b14.jpg" width="500" height="347" alt="Warning!"></a>
</div>
</div>

In my test file I add a <A href="https://docs.perl6.org/language/phasers#CONTROL">CONTROL phaser</a>. This catches the action of block exiting things including <code>return</code>, <code>fail</code>, <code>redo</code>, <code>next</code>, <code>last</code>, <code>take</code>, and in this case, <code>warn</code>:

<pre class="brush:plain">
{ # with forced find to Not work recursive
CONTROL {
	my $label = ':recursive warns about deprecation';
	when CX::Warn { like $_.message, /deprecated/, $label; }
	default       { fail( $label ); }
	}
my $res = find(:dir&lt;t/dir1>, :name&lt;file.bar>, recursive => False);
is $res.elems, 1, 'name with a string';
}
</pre>

You won't catch these in a normal <code>CATCH</code> block:

<pre class="brush:plain">
sub foow { warn "This is a warning" }
sub food { die  "This is a death" }

{
CONTROL {
	when CX::Warn { put "Caught warning in CONTROL" }
	}
foow();
}


try {
CATCH {
	when CX::Warn  { put "Caught warning in CATCH" }
	when  X::AdHoc { put "Caught death in CATCH" }
	default { put "Caught {$_.^name} with {$_.message}" }
	}
foow();
food();
}
</pre>

The output shows that the <code>CONTROL</code> caught the warning from the first call but the <code>CATCH</code> let it pass through in the second:

<pre class="brush:plain">
Caught warning in CONTROL
Caught death in CATCH
This is a warning
  in sub foow at /Users/brian/Desktop/test.p6 line 5
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>419</wp:post_id>
  <wp:post_date>2018-01-10 11:17:32</wp:post_date>
  <wp:post_date_gmt>2018-01-10 11:17:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>quick-trick-catching-a-perl-6-warning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="quick-tricks"><![CDATA[Quick Tricks]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>De-duping iTunes</title>
  <link>http://www.learningraku.com/2018/01/16/de-duping-itunes/</link>
  <pubDate>Tue, 16 Jan 2018 07:43:22 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=434</guid>
  <description/>
  <content:encoded><![CDATA[Every so often I notice that my iTunes library has a lot of duplicate items and I need to get rid of things. It's mostly a task for finding an audio file that has the same name as another audio file but with a space and digit added right before the extension. <i>Song.mp3</i> and <i>Song 1.mp3</i> are examples of this problem. They'll be in the same directory; duplicates in different directories are a different matter and I've done that too by comparing file digests. That's not this problem.

Here's what I did. It's not pretty because I didn't care to make it so. It's not exciting because I wasn't researching anything or exploring an idea. It's just getting rid of files. I solved the problem and moved on. 

I develop these little tools incrementally. Can I get all the files? Can I find the files that have the name without the space and digit. I program a step and check the result. Then I add the next step. The process drives the procedural structure. 

And during this process I forked then completely rewrote a <a href="https://github.com/briandfoy/perl6-file-find">File::Find</a> module. You don't need my version for this though. The one <code>zef install File::Find</code> gives you should be fine.

A few quick notes:

<ul>
<li>I really like the <code>#`( ... )</code> comments
<li>An array interpolated into a pattern is an alternation of the elements
<li><code>.IO</code> objects know how to make or tear apart paths.
</ul>

<pre class="brush:plain">
#!/Applications/Rakudo/bin/perl6

use File::Find:auth&lt;bdfoy>; # https://github.com/briandfoy/perl6-file-find

#`( iTunes loves screwing up files. I get a file imported multiple
times instead of realizing it's already in there.

	some song.mp3
	some song 1.mp3

Let's find these pairs where the names differ by the addition of
a space and a single digit (although I've had problems like this with
as high as 4.
)
my $dir = '/Users/brian/Dropbox/iTunes/Music';
my $target = '/Users/brian/BackupMusic';

#`(
I actually used this module to count extensions and these are the
one I want to focus on. An array in a regex is an alternation.
)
my @extensions = &lt;mp3 m4a="" m4p="">;
my $sequence := find(
	dir  => $dir,
	name => / \h '1' '.' @extensions $ /,
	);

my $count = 0;
my $dry-run = True; # try it before we move any files
for $sequence -> $file {

	#`(
	other = the file of the same name without a numbered copy
	if that file doesn't exist we don't have a problem
	)
	my $other = $file.subst:
		/ \h '1' '.' (@extensions) $ /,
		".$0";
	my $exists = $other.IO.e;
	next unless $exists;
	$count++;

	put '-' x 50;
	put "file: $file";
	put "other: $other ($exists)";

	#`(
	We need the part after the starting directory because we'll add
	that to the new target directory. We might have to make a subdir
	tree
	)
	my $rel = $file.IO.relative: $dir;

	my $new = $rel.IO.absolute: $target;
	my $new-dir = $new.IO.parent.IO;
	$new-dir.mkdir unless $new-dir.e;
	$other.IO.rename( $new ) unless $dry-run;
	}

say "Found $count files";
</pre>

Here's the program I used to survey the file extensions I used to populate <code>@extensions</code>:

<pre class="brush:plain">
use File::Find:auth&lt;BDFOY>; # https://github.com/briandfoy/perl6-file-find
use PrettyDump; 

my $list := find( dir => $*HOME.child( 'Dropbox/iTunes/Music' ) );

my %extensions;
for $list -> $item {
	next if $item.d;
	%extensions{ $item.extension }++
	}

pd %extensions;
</pre>

And here's what I had done the last time I had this problem. It's Perl 5 interpreting the results of an external <code>find</code>. I think last time I ended up throwing an <code>unlink</code> in there at some point:

<pre class="brush:plain">
use v5.14;
open my $fh, 'find . -name "* [1234].m[p4][ap3]" |';

while( <$fh> ) {
	chomp;
	my $other = s/\s+(\d+)(?=\.[^.]+\z)//r;
	next unless -e $other;
	print "$_\n\t$other\n";
	}

close $fh or die "Error in Find!"
</pre>

I'll probably lose my Perl 6 program, forget I wrote this, and recreate this in nine months. I might even post about it again.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>434</wp:post_id>
  <wp:post_date>2018-01-16 07:43:22</wp:post_date>
  <wp:post_date_gmt>2018-01-16 07:43:22</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>de-duping-itunes</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="itunes"><![CDATA[iTunes]]></category>
  <category domain="category" nicename="stuff-im-playing-with"><![CDATA[Stuff I'm playing with]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1095</wp:comment_id>
    <wp:comment_author><![CDATA[patrickz]]></wp:comment_author>
    <wp:comment_author_email>beasley@web.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.86.190.28</wp:comment_author_IP>
    <wp:comment_date>2018-01-23 08:03:00</wp:comment_date>
    <wp:comment_date_gmt>2018-01-23 08:03:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[As stated here  one should not use $*SPEC directly.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1096</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>107.77.231.96</wp:comment_author_IP>
    <wp:comment_date>2018-01-27 00:15:01</wp:comment_date>
    <wp:comment_date_gmt>2018-01-27 00:15:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You're right. <code>$*SPEC</code> is deprecated in 6.d and is scheduled for removal in 6.e. I already have bad habits in Perl 6!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1095</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Test a module version</title>
  <link>http://www.learningraku.com/2018/01/17/test-a-module-version/</link>
  <pubDate>Wed, 17 Jan 2018 09:55:39 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=443</guid>
  <description/>
  <content:encoded><![CDATA[The <i>META6.json</i> file has metadata for a Perl 6 module. But I like to also put things in the module file. I'd rather have some of that stuff with the code in case the metadata file goes missing as it might if you throw a <i>.pm</i> file in a directory rather than installing with <code>zef</code>. That means I forget to update one of them (it's usually the <i>META6.json</i>). <!--more-->

I created a test file to check that the versions in <i>META6.json</i>. I'd been meaning to do this since I <a href="https://stackoverflow.com/q/44883887/2766176">asked about it on Stackoverflow</a> a long time ago:

<pre class="brush:plain">
use v6;

use Test;
use META6;

use File::Find;
constant package-name = 'File::Find';

my $module-version = File::Find.^ver;
ok $module-version.defined, 'Module specifies a version';
diag "Module version is $module-version";

my $meta-file = 'META6.json';
my $meta = META6.new: file => $meta-file;

my $meta-version = $meta.version;
ok $meta-version.defined, 'META6 specifies a version';
diag "META6 version is $meta-version";

is $meta-version, $module-version, 'META6 version matches module version';

done-testing();
</pre>

The obvious next step is to make a program to update <i>META6.json</i> for me but so far this way is a lot less work. I have no plans to make this a module but someone else can if they like. If you do, gfldex's <a href="https://gfldex.wordpress.com/2016/10/25/you-have-to-take-what-you-an-get/">You have to take what you can get</a> might be helpful.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>443</wp:post_id>
  <wp:post_date>2018-01-17 09:55:39</wp:post_date>
  <wp:post_date_gmt>2018-01-17 09:55:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-a-module-version</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="meta6-json"><![CDATA[META6.json]]></category>
  <category domain="category" nicename="modules"><![CDATA[Modules]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1114</wp:comment_id>
    <wp:comment_author><![CDATA[JJ Merelo]]></wp:comment_author>
    <wp:comment_author_email>jjmerelo@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>https://jj.github.io</wp:comment_author_url>
    <wp:comment_author_IP>81.32.66.50</wp:comment_author_IP>
    <wp:comment_date>2018-04-09 05:34:28</wp:comment_date>
    <wp:comment_date_gmt>2018-04-09 05:34:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[App::Mi6 can now update the version for you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Online Perl 6 runners</title>
  <link>http://www.learningraku.com/?p=524</link>
  <pubDate/>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=524</guid>
  <description/>
  <content:encoded><![CDATA[There are various browser tools that allow you to run and interact with Perl 6 

<h2>Glot.io</h2>


<h2></h2>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>524</wp:post_id>
  <wp:post_date>2018-01-11 10:58:24</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Custom operators for Knuth's Arrow</title>
  <link>http://www.learningraku.com/2018/01/18/525/</link>
  <pubDate>Thu, 18 Jan 2018 09:28:15 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=525</guid>
  <description/>
  <content:encoded><![CDATA[[mathjax]

The <A href="https://en.wikipedia.org/wiki/Knuth%27s_up-arrow_notation">Wikipedia page for Knuth's up arrow notation</a> makes some claims about superscripts:

<blockquote>
But many environments — such as programming languages and plain-text e-mail — do not support superscript typesetting.
</blockquote>

<!--more-->

I'll ignore the claim that plain text (<A href="https://en.wikipedia.org/wiki/Plain_text">their parochial definition</a>) is the same thing as 7-bit text ASCII.

The first claim, however, isn't strictly true for Perl 6 and probably many other more esoteric languages (let me know if you know which ones you know about). It got me thinking about what I could do in Perl 6.

Perl 6 uses superscripts as operators defined in the core language. I found this out between the time they were implemented and later documented when <A href="https://stackoverflow.com/q/34689850/2766176">I tried to use them in variable names</a>. Now I can write some exponentiations with superscripts:

<pre class="brush:plain">
my $square = $n²;  # valid Perl 6, same as $n ** 2
</pre>

I can't superscript superscripts or superscript superscripts of superscripts though and that's what most of that claim is about. Adding a character that is already a superscript isn't the point. We typically don't type something like these <A href="http://mathworld.wolfram.com/PowerTower.html">power towers</a> directly without some sort of being-the-scenes formatting instructions (so, not plain text). I do this with \(\LaTeX\):

$$x^{2^{2^2}}$$

$$a^{b^{b^b}}$$

$$a^{some^{other^{terms}}}$$

But Perl 6 also provides builtin features that it fully expects people to use to extend the language. I can create these operators myself. (Note that in mathematics, the up arrow is an example of a hyperoperator but that has a completely different meaning from the Perl 6 <A href="https://docs.perl6.org/language/operators#Hyper_Operators">hyperoperators</a> that apply an operation to corresponding elements of two lists.)

I can create an up-arrow operator, <code>↑</code>. Had I googled first I would have found that it's already been done in <a href="https://github.com/ajs/perl6-Math-Arrow/blob/master/lib/Math/Arrow.pm">Math::Arrow</a>.

A single up arrow is the same as exponentiation but without a superscript. The operand on the left is raised to the power on the right. It's in the progression of <code>+</code> for addition, <code>*</code> for multiplication, and then <code>↑</code> for exponentation. This is the basis for higher orders later.

It's a binary infix operator (takes two operands and goes in the middle) so I add my symbols in the angle brackets after the <code>infix:</code>. I specify that it's right associative (as is exponentiation) and that it has the same precedence as exponentiation:

<pre class="brush:plain">
sub infix:&lt;↑> ( Int:D \n, Int:D \m  --> Int:D )
	is equiv(&infix:&lt;**>)
	is assoc&lt;right>
	{ n ** m }

put 2 ↑  3;  # 2  * 2  * 2 =  8
</pre>

That's only the starting point. With this notation I can define higher orders of repetition. The double up arrow, <code>↑↑</code>, is repeated exponentiation just like multiplication is repeated addition. The number on the right is one more than the number of exponentiations in the power tower (the other one is the base):

$$2↑↑4 = 2^{2^{2^2}}$$

I make a couple of subroutine definitions here to handle the special cases where the second operand is <code>0</code> or <code>1</code> since the reduction operator won't deal with those cases. Since these subroutines have the same name I use <code>multi</code> to define the candidates. The dispatcher figures out which one fits best and use that:

<pre class="brush:plain">
proto infix:&lt;↑↑> ( Int:D \n, Int:D \m  --> Int:D )
	is tighter(&infix:&lt;↑>)
	is assoc&lt;right>
	{ * }
multi infix:&lt;↑↑> ( \n, 0  ) { 1 }
multi infix:&lt;↑↑> ( \n, 0  ) { \n }
multi infix:&lt;↑↑> ( \n, \m ) { [↑] n xx m }

put 2 ↑  3;  # 2  * 2  * 2 =  8
put 2 ↑↑ 3;  # 2 ** 2 ** 2 = 16
</pre>

The <code>proto</code> defines the basic template for all candidates with the same name. That's where I can constrain the types of values and set the associativity and precedence. It's the gatekeeper; once I annotate the types and set the traits I don't need to annotate them in the candidates (and in some cases can't re-define them).

I make the double arrow version tighter than the single arrow one I just defined. The <code>*</code> in the <code>proto</code> block dispatches to the best candidate of the same name. The two <code>multis</code> can then assume everything that needs to be checked was already handled.

Now I can extend that to the triple up arrow <code>↑↑↑</code>. It's the same thing with an additional up arrow:

<pre class="brush:plain">
proto infix:&lt;↑↑↑> ( Int:D \n, Int:D \m  --> Int:D )
	is assoc&lt;right>
	is tighter(&infix:&lt;↑↑>)  { * }
multi infix:&lt;↑↑↑> ( \n,  0 ) { 1 }
multi infix:&lt;↑↑↑> ( \n, \m ) { [↑↑] n xx m }

put 2 ↑   3;  # 2  *  2  * 2  =  8
put 2 ↑↑  3;  # 2 ↑   2 ↑  2  = 16
put 2 ↑↑↑ 3;  # 2 ↑↑ (2 ↑↑ 2) = 256
</pre>

But there's an alternate notation that goes back further than Knuth's up arrow. I can define prefix superscripts that denote particular up arrow versions. These use superscripts:

<pre class="brush:plain">
multi prefix:&lt;⁰>  ( Int:D $m ) { 1 }
multi prefix:&lt;²>  ( Int:D $m ) { $m ↑↑ 2 }
multi prefix:&lt;³>  ( Int:D $m ) { $m ↑↑ 3 }
multi prefix:&lt;³>  ( Int:D $m ) { $m ↑↑ 4 }

put ²2;
put ⁴2;
put ²3;
put ³3;
</pre>

There's yet another notation that doesn't use repeated arrows. It uses a superscript on the arrow to specify how many arrows there are:

<pre class="brush:plain">
multi infix:&lt;↑²> ( Int:D \n, 0        --> Int:D )
	is equiv(&infix:&lt;↑↑>)
	is assoc&lt;right> { 1 }
multi infix:&lt;↑²> ( Int:D \n, 1        --> Int:D )
	is equiv(&infix:&lt;↑↑>)
	is assoc&lt;right> { n }
multi infix:&lt;↑²> ( Int:D \n, Int:D \m --> Int:D )
	is equiv(&infix:&lt;↑↑>)
	is assoc&lt;right> { [↑] n xx m }
</pre>

You get the idea. I've made a much longer <A href="https://gist.github.com/briandfoy/b85de0526e3a747c15376a3d33629f28">demonstration program</a> that's in a gist.

<h2>Some things that came out of exercise</h2>

<ul>
<li><a href="https://stackoverflow.com/q/48219788/2766176">Why is Perl 6's right associativity not right?</a>
<li><a href="https://rt.perl.org/Ticket/Display.html?id=132713">#132713: Order of `is assoc` and precedence traits</a>
<li><a href="https://rt.perl.org/Ticket/Display.html?id=132711">#132711: [LTA] Stupidly using `is assoc` with unary prefix operator has an error message from the deep</a>
<li><a href="https://rt.perl.org/Ticket/Display.html?id=132710">#132710: [LTA] Warning message for duplicated tighter trait</a>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>525</wp:post_id>
  <wp:post_date>2018-01-18 09:28:15</wp:post_date>
  <wp:post_date_gmt>2018-01-18 09:28:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>525</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="operators"><![CDATA[Operators]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Hints for Perl 6 on Windows</title>
  <link>http://www.learningraku.com/2018/01/18/hints-for-perl-6-on-windows/</link>
  <pubDate>Thu, 18 Jan 2018 21:34:54 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=543</guid>
  <description/>
  <content:encoded><![CDATA[<style>
img.post { border: 1px solid #000 }
img.left { float: left; margin-right: 15px }
img.right { float: right; margin-left: 15px }
p.caption { font-style: italic }

div.center div {
        align: center;
        display: block;
	margin-top: 1em;
	margin-bottom: 1em;
        }

div.image p {
        font-style: italic;
        text-align: center;
        }

div.image img {
        border: 1px solid #000;
        display:block;
        margin: auto;
        }

div.right div {
        float: right;
        margin-left: 15px;
        }

div.left div {
        float: left;
        margin-right: 15px;
        }
</style>

I'm not going to waste too much time in the book explaining any particular operating system. I want to save space and I know I'll probably want to keep updating those bits anyway. Here are some hints for Windows. While writing the book I test stuff with Windows 10 and a particular workflow that I liked well enough. You might like something different (and if you do you probably don't need these instructions). <!--more-->

And I need these instructions because I'm not a regular Windows user. I've also written about this setup in <A href="https://www.windowsperl.com/2018/01/18/my_windows_environment/">my Windows Perl site</a> so I won't repeat most of it here. If you have a different setup that works for you let me know about it.


<h2>The Chocolatey package manager</h2>

I use the <a href="https://chocolatey.org">Chocolatey</a> package manager to get most of what I need; that includes <A href="https://chocolatey.org/packages/rakudostar">Rakudo Star</a>, and <a href="https://conemu.github.io">ConEmu</a> Follow its installation instructions to install that from a PowerShell administrator window:

<pre class="brush:plain">
PS C:\WINDOWS\system32> choco install rakudostar
PS C:\WINDOWS\system32> choco install ConEmu
PS C:\WINDOWS\system32> choco install notepadplusplus
PS C:\WINDOWS\system32> choco install git
PS C:\WINDOWS\system32> refreshenv
</pre>

<h2>Check your programs</h2>

After you install Rakudo and refresh the environment try a simple invocation from the command line. You can check the version. You should get something like this:

<pre class="brush:plain">
C:\Users\hamadryas> perl6 -v
This is Rakudo Star version 2017.10 built on MoarVM version 2017.10
implementing Perl 6.c.
</pre>

<h2>Edit a file</h2>

Somehow create and edit a file. If you installed NotePad++ you can run it from the command line:

<pre class="brush:plain">
C:\Users\hamadryas> notepad++ hello-perl6.p6
</pre>

Put in this text:

<pre class="brush:plain">
#!perl6
put 'Hello Perl 6';
</pre>

<div class="image center">
<div>
<img src="/images/windows-setup/notepad-hello.png" style="border: 1px solid" />
</div>
</div>

<h2>Run a file</h2>

<pre class="brush:plain">
C:\Users\hamadryas> perl6 hello-perl6.p6
</pre>

There are some Unicode test programs in the <a href="https://github.com/briandfoy/LearningPerl6_Downloads">Learning Perl 6 Downloads</a> repo.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>543</wp:post_id>
  <wp:post_date>2018-01-18 21:34:54</wp:post_date>
  <wp:post_date_gmt>2018-01-18 21:34:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hints-for-perl-6-on-windows</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The Universal Set</title>
  <link>http://www.learningraku.com/2018/02/16/the-universal-set/</link>
  <pubDate>Fri, 16 Feb 2018 01:55:50 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=561</guid>
  <description/>
  <content:encoded><![CDATA[Some people like to think you can't have a universal set. I say otherwise. The difference is what you can do about it.

Perl 6 has the empty set, <code>∅</code> and nothing is a member of that set:

<pre class="brush:plain">
if $a ∈ ∅ { put 'Never executes!' } # always False
</pre>

This is easy to construct with a set of no elements:

<pre class="brush:plain">
if $a ∈ set() { put 'Never executes!' } # always False
</pre>

Perl 6 can construct sets from finite sequences but I wondered about infinite ones. The universal set, <code>𝕌</code>, contains everything (although that causes some problems the set theorists haven't figured out other than to say "Don't do that").

But if I can figure out set membership without enumerating the members of the set I can make it work:

<pre class="brush:plain">
            # Double struck letters
class 𝕌 {}; # Universal, U+1D54C but wordpress don't like that

multi infix:<∈> ( Any:_ $c, 𝕌:U $ --> Bool ) { True }

use Test;

ok any(1,2) ∈ 𝕌, '(Junction) is part of the universal set';
ok   Any    ∈ 𝕌, '(Any) is part of the universal set';
ok   37     ∈ 𝕌, 'Int:D is part of the universal set';
ok  '37'    ∈ 𝕌, 'Integer string is part of the universal set';
ok   𝕌      ∈ 𝕌, 'Universal set contains itself? Not so sure...';
ok   ∅      ∈ 𝕌, 'Universal set contains the empty set';

done-testing();
</pre>

The trick is to figure out how to represent a set difference with a universal set. I know what the complement of that set so I need to flip around the operators. I'm still working out some other things (see <A href="https://stackoverflow.com/q/48819031/2766176">Where did my Perl 6 operator go after I defined a more specific multi?</a> for one hiccup) to make the set operators work, though.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>561</wp:post_id>
  <wp:post_date>2018-02-16 01:55:50</wp:post_date>
  <wp:post_date_gmt>2018-02-16 01:55:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-universal-set</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sets"><![CDATA[Sets]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1097</wp:comment_id>
    <wp:comment_author><![CDATA[shniperson]]></wp:comment_author>
    <wp:comment_author_email>kaspik99@ya.ru</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>217.19.208.100</wp:comment_author_IP>
    <wp:comment_date>2018-02-16 11:03:12</wp:comment_date>
    <wp:comment_date_gmt>2018-02-16 11:03:12</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[multi infix: ( Any:_ $c, :U $ --&gt; Bool ) { True }

What does this mean?
_ $c 
:U $]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1098</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.225.53</wp:comment_author_IP>
    <wp:comment_date>2018-02-16 19:47:44</wp:comment_date>
    <wp:comment_date_gmt>2018-02-16 19:47:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[<code>Any:_</code> says that the container accepts a type that is <code>Any</code> or inherits from <code>Any</code>. The <code>_</code> says it can be defined (<code>:D</code>) or undefined (<code>:U</code>). This is the same thing as no type constraint really.

The <code>$</code> is merely a scalar container I don't give a name to since the name doesn't matter.

I could have also written both as anonymous scalar containers since I don't really care about either name:

<pre class="brush:plain">
multi infix:<∈> ( $, 𝕌:U $ -–> Bool ) { True }
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1097</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1099</wp:comment_id>
    <wp:comment_author><![CDATA[a]]></wp:comment_author>
    <wp:comment_author_email>ab@c.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2a02:1205:5055:2b00:aebc:32ff:fea2:c109</wp:comment_author_IP>
    <wp:comment_date>2018-02-24 16:34:20</wp:comment_date>
    <wp:comment_date_gmt>2018-02-24 16:34:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I know you're just showing off Perl6, but it has to be said that the class 𝕌 isn't really a set, since 𝕌 !~~ Set.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1100</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>173.2.250.194</wp:comment_author_IP>
    <wp:comment_date>2018-03-02 17:29:28</wp:comment_date>
    <wp:comment_date_gmt>2018-03-02 17:29:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't define a set by the class tree. If it looks like a set and acts like a set, it's a set. In mathematics that's a collection of distinct items that's considered as a whole. 

In object orientation we should never care what something is as long as it does the things that we need. Don't check for types of objects—check for abilities. If it follows the same interface it doesn't matter what its lineage is.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1099</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title/>
  <link>http://www.learningraku.com/?p=568</link>
  <pubDate/>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=568</guid>
  <description/>
  <content:encoded><![CDATA[I have this little program:

<pre class="brush:plain">
my $junction = any( 1, 2, 3 );
put "Result is: " ~ (2 == $junction);
put ($junction == 2).^name;
</pre>

I get this curious result that repeats the first string again because the result of `==` is a Junction (although the docs don't really say what `==` will return):

<pre class="brush:plain">
Result is: False
Result is: True
Result is: False
Junction
<pre>

I expected the comparator to return a single boolean value:

    Result is: True
    Boolean

The junction I didn't expect applied the <code>"Result is: " ~</code>

So this works, but I expected the `==` to figure that out for me (conditionals such as `if` do this for you):

    my $junction = any( 1, 2, 3 );
    put "Result is: ", (2 == $junction).so;
    put ($junction == 2).^name;

I can live with that even if it seems anti-DWIM. 

> This is Rakudo Star version 2018.01 built on MoarVM version 2018.01
implementing Perl 6.c.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>568</wp:post_id>
  <wp:post_date>2018-02-16 23:04:10</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Infinite, cycling sequences</title>
  <link>http://www.learningraku.com/2018/03/02/infinite-cycling-sequences/</link>
  <pubDate>Fri, 02 Mar 2018 17:32:09 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=578</guid>
  <description/>
  <content:encoded><![CDATA[My <a href="https://www.metacpan.org/module/Tie::Cycle">Tie::Cycle</a> Perl 5 module is almost trivial but it solved a customer problem a long, long time ago. It's makes a list that looks like a scalar. Every time you access the scalar you get the next value in the list (wrapping around at the end).

How would I do the same thing in Perl 6? I started thinking about a way to make a sequence whose elements were always <code>True</code>, infinitely and forever. I fell back on the idea of cycling through a list:

<pre class="brush:plain">
my $colors := make-cycle( &lt;red green blue> );

for $colors {
	put $_;
	last if $++ > 5;
	}

sub make-cycle ( *@a --> Seq ) {
	{ @a[ $++ % * ] } ... Inf
	}
</pre>

It loops through all of the colors:

<pre class="brush:plain">
red
green
blue
red
green
blue
red
</pre>

I could have done the same thing with other lists that would cycle forever. Even the trivial list of one item might be useful. This is what I wanted when I started playing with this:

<pre class="brush:plain">
my $false       := make-cycle( False );
my $true        := make-cycle( True  );
my $true-false  := make-cycle( True, False );
my $false-true  := make-cycle( False, True );
</pre>

The <code>...</code> is the <a href="https://docs.perl6.org/language/operators#infix_...">sequence operator</a>. You can use some code to decide what comes next. That includes deciding what comes first. I want to grab the next element of the array. That's easy. Keep a cursor of the index and add to each each time I grab to something. When it gets too big reset it to the beginning.

Perl 6 has nice syntax for this. All that is in <code>$++ % *</code> that I use for the index in <code>@a[  ]</code>. I need a variable to act as the cursor. I don't need it anywhere else than inside the <a href="https://docs.perl6.org/language/operators#postcircumfix_[_]">array indexing operator</a>.

The <code>$</code> by itself is an anonymous scalar variable that allows you to skip the declaration; the variable shows up exactly once because that's how many times I need it. The <code>++</code> is the auto-increment operator to move the cursor along.

The value in <code>$</code> eventually passes the last index of the list. The modulus operator <code>%</code> brings it back in that range. For a list of 5 items, the first item is list is at indices 0, 5, 10, and so on. Those are all effectively 0 modulo the number elements.

The <code>*</code> is the <A href="https://docs.perl6.org/type/Whatever">Whatever</a> star. What that does depends on where it shows up. In the <a href="https://docs.perl6.org/language/operators#postcircumfix_[_]">array indexing operator</a> it's the number of elements (not the last index) in the thingy. That's the same number I need for the modulus.

All together that's the cryptic <code>$++ % *</code>. It's a bit tricky to read but I typically don't start writing code like that unless I've done it before. I do it the long way.

I don't even need the <code>make-cycle</code> factory (although it's convenient to forget how this works). I don't think I'd want this all over my code even if I can do it:

<pre class="brush:plain">
my $seq := { ( &lt;red green blue> )[ $++ % * ] } ... Inf;
</pre>

Even then, <code>Seq.from-loop</code> already does most of the work. I don't need to use <code>...</code> because this keeps going by always calling the block of code to get the next value:

<pre class="brush:plain">
my $seq := Seq.from-loop: { ( &lt;red green blue> )[ $++ % *] };
</pre>

It could be a module but this isn't node.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>578</wp:post_id>
  <wp:post_date>2018-03-02 17:32:09</wp:post_date>
  <wp:post_date_gmt>2018-03-02 17:32:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>infinite-cycling-sequences</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="sequences"><![CDATA[Sequences]]></category>
  <category domain="category" nicename="whatever"><![CDATA[Whatever]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1101</wp:comment_id>
    <wp:comment_author><![CDATA[timotimo]]></wp:comment_author>
    <wp:comment_author_email>timo+lp6@wakelift.de</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>2a02:8071:31a8:2f00:5604:a6ff:fe93:d1a6</wp:comment_author_IP>
    <wp:comment_date>2018-03-03 09:00:20</wp:comment_date>
    <wp:comment_date_gmt>2018-03-03 09:00:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[How do you feel about using a built-in for this instead:

<pre class="brush:plain">
my $seq := |&lt;red green blue&gt; xx *
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1104</wp:comment_id>
    <wp:comment_author><![CDATA[Elizabeth Mattijsen]]></wp:comment_author>
    <wp:comment_author_email>liz@wenzperl.nl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>83.80.19.124</wp:comment_author_IP>
    <wp:comment_date>2018-03-03 22:43:08</wp:comment_date>
    <wp:comment_date_gmt>2018-03-03 22:43:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[There is actually an idiom in Perl 6 for infinite recycling sequences. Basically <code>Slip xx *</code>:

<pre class="brush:plain">
.say for |&lt;red green blue&gt; xx *; # red green blue red green blue….
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1105</wp:comment_id>
    <wp:comment_author><![CDATA[Brad Gilbert]]></wp:comment_author>
    <wp:comment_author_email>b2gills@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>64.191.7.0</wp:comment_author_IP>
    <wp:comment_date>2018-03-05 23:10:52</wp:comment_date>
    <wp:comment_date_gmt>2018-03-05 23:10:52</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[You could also write it as

<pre class="brush:plain">
sub make-cycle ( +a ) { |a xx * }
</pre>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1106</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.225.53</wp:comment_author_IP>
    <wp:comment_date>2018-03-07 02:12:22</wp:comment_date>
    <wp:comment_date_gmt>2018-03-07 02:12:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very interesting but not something I'd want to explain to anyone! ;)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1105</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>My AppVeyor config now tests Perl 6 on Linux too</title>
  <link>http://www.learningraku.com/2018/03/13/my-appveyor-config-now-tests-perl-6-on-linux-too/</link>
  <pubDate>Tue, 13 Mar 2018 08:43:16 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=586</guid>
  <description/>
  <content:encoded><![CDATA[AppVeyor now <a href="https://www.appveyor.com/docs/getting-started-with-appveyor-for-linux/">supports Ubuntu</a> along with Windows. I've updated my <A href="https://github.com/briandfoy/perl6_appveyor_test">Perl 6 AppVeyor config example</a> to include that. I created a <a href="/2017/05/01/rakudo-in-chocolatey-makes-appveyor-easier/">chocolatey package for Rakudo Star</a> to make it easier to test on AppVeyor. I think there are some Rakudo Star packages for linux in the future and that will make the linux side even easier and faster. At the moment it takes about 20 minutes to build before you get to the tests.

<div class="image center">
<div>
<img src="/images/appveyor_logo.png" height="256" width="256">
</div>
</div>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>586</wp:post_id>
  <wp:post_date>2018-03-13 08:43:16</wp:post_date>
  <wp:post_date_gmt>2018-03-13 08:43:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-appveyor-config-now-tests-perl-6-on-linux-too</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[appveyor]]></category>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Use pre-built Rakudo packages on Travis CI</title>
  <link>http://www.learningraku.com/2018/03/15/use-pre-built-rakudo-packages-on-travis-ci/</link>
  <pubDate>Thu, 15 Mar 2018 02:10:39 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=590</guid>
  <description/>
  <content:encoded><![CDATA[I changed my Perl 6 Travis setup so I'm not using the <a href="https://docs.travis-ci.com/user/languages/community-supported-languages/">community supported</a> Perl 6. That one builds rakudo and sometimes it exhausts the memory. Even if it didn't do that it takes awhile to get to the things I want to test. My new configuration takes the run time from about 7 to under 2 minutes. <!--more-->

<A href="https://github.com/nxadm">Claudio Ramirez</a> provides some <A href="https://github.com/nxadm/rakudo-pkg">pre-built Rakudo packages for Linux</a>. I can install those instead of building Rakudo. To do that I can't declare a language (or can declare some language that in the base image). Declaring  "perl6" builds rakudo—maybe someone will change the community edition to use the pre-built package.

I still have a problem with the URL to get the pre-built package. There is a URL to get the latest package by <A href="https://nxadm.github.io/rakudo-pkg/lib.js">redirecting through some javascript</a>. It's not something that needs to happen in Javascript since the answers don't change and we could have a static page. That's maybe something I can work on later—or maybe you can. Put the direct links in the README and regenerate that when the packages change (monthly).

This is working nicely so far and I can improve on it later:

<pre class="brush:plain">
env:
  global:
    - TMPDIR=/tmp
    - RAKUDO_PKG_URL=https://github.com/nxadm/rakudo-pkg/releases/download/v2018.02.1/rakudo-pkg-Ubuntu14.04_2018.02.1-01_amd64.deb

# https://docs.travis-ci.com/user/installing-dependencies/#Installing-Packages-without-an-APT-Repository
before_install:
  - cd ${TMPDIR}
  # https://github.com/nxadm/rakudo-pkg
  - wget -O rakudo-pkg.deb ${RAKUDO_PKG_URL}
  - sudo dpkg -i rakudo-pkg.deb
  - export PATH=$PATH:~/.perl6/bin:/opt/rakudo-pkg/bin
  # https://github.com/ugexe/zef
  - git clone https://github.com/ugexe/zef.git && cd zef && perl6 -Ilib bin/zef install .

install:
  - cd ${TRAVIS_BUILD_DIR}
  - zef --debug --depsonly install .

script:
  - prove -v -r -e "perl6 --ll-exception -Ilib" t
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>590</wp:post_id>
  <wp:post_date>2018-03-15 02:10:39</wp:post_date>
  <wp:post_date_gmt>2018-03-15 02:10:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-pre-built-rakudo-packages-on-travis-ci</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <category domain="post_tag" nicename="continuous-integration"><![CDATA[continuous integration]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <category domain="post_tag" nicename="travis"><![CDATA[travis]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1109</wp:comment_id>
    <wp:comment_author><![CDATA[Patrick Spek]]></wp:comment_author>
    <wp:comment_author_email>p.spek@tyil.work</wp:comment_author_email>
    <wp:comment_author_url>http://tyil.nl</wp:comment_author_url>
    <wp:comment_author_IP>83.82.42.112</wp:comment_author_IP>
    <wp:comment_date>2018-03-20 09:26:54</wp:comment_date>
    <wp:comment_date_gmt>2018-03-20 09:26:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I've actually been using the prebuilt packages for a little bit already. I'm using a matrix in my Travis configuration to be able to test multiple Perl 6 targets as well. I might extend it into a seperate shell script to make it a tad cleaner, but for now you can check out the configuration I'm using on the repository of one of my modules: https://github.com/scriptkitties/perl6-dist-helper/blob/master/.travis.yml]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1110</wp:comment_id>
    <wp:comment_author><![CDATA[Fritz Zaucker]]></wp:comment_author>
    <wp:comment_author_email>fritz.zaucker@oetiker.ch</wp:comment_author_email>
    <wp:comment_author_url>http://www.oetiker.ch</wp:comment_author_url>
    <wp:comment_author_IP>46.140.110.82</wp:comment_author_IP>
    <wp:comment_date>2018-03-20 13:36:44</wp:comment_date>
    <wp:comment_date_gmt>2018-03-20 13:36:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Add the following lines to .travis.yml:

cache:
  directories:
  - $HOME/.perl6

This will cache the precompiled modules that zef installed.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1111</wp:comment_id>
    <wp:comment_author><![CDATA[Fritz Zaucker]]></wp:comment_author>
    <wp:comment_author_email>fritz.zaucker@oetiker.ch</wp:comment_author_email>
    <wp:comment_author_url>http://www.oetiker.ch</wp:comment_author_url>
    <wp:comment_author_IP>46.140.110.82</wp:comment_author_IP>
    <wp:comment_date>2018-03-20 14:22:36</wp:comment_date>
    <wp:comment_date_gmt>2018-03-20 14:22:36</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Instead of cloning zef you can run

/opt/rakudo-pkg/bin/install-zef-as-user

after installation of the deb package.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1112</wp:comment_id>
    <wp:comment_author><![CDATA[Jarkko Haapalainen]]></wp:comment_author>
    <wp:comment_author_email>jarkko@viidakko.fi</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>87.92.76.96</wp:comment_author_IP>
    <wp:comment_date>2018-03-21 05:56:06</wp:comment_date>
    <wp:comment_date_gmt>2018-03-21 05:56:06</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Nice thanks! I removed zef installation from this, because zef is already included in the debian package. Working nicely!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Use pre-built Rakudo packages on Appveyor</title>
  <link>http://www.learningraku.com/2018/03/15/use-pre-built-rakudo-packages-on-appveyor/</link>
  <pubDate>Thu, 15 Mar 2018 03:07:48 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=592</guid>
  <description/>
  <content:encoded><![CDATA[I've been fooling around with <A href="/2018/03/15/use-pre-built-rakudo-packages-on-travis-ci/">pre-built Rakudo packages on Travis CI</a> so I figured that I should do the same on AppVeyor. Last night I had a <A href="https://ci.appveyor.com/project/briandfoy/venturi/build/1.0.12/job/ahmktqs4ynu5u7x2">Ubuntu build that ran out of memory</a> before it could finish compiling Rakudo and it gave up. <a href="https://www.appveyor.com/docs/getting-started-with-appveyor-for-linux/">AppVeyor is rolling out Linux support</a> and I suspect their initial machines are underpowered (especially the ones I get for free—completely reasonable) but I haven't investigated it. It's certainly easier than the Pugs installations which could take days although much of that was just GHC. <!--more-->

The Windows side is easy because I use the <a href="/2017/05/01/rakudo-in-chocolatey-makes-appveyor-easier/">rakudo-star chocolatey package</a>.

This configuration is mostly the same as <A href="/2018/03/15/use-pre-built-rakudo-packages-on-travis-ci/">what I am doing on Travis</A> but translated to a configuration that's handling Windows and Linux at the same time. Lines starting with <code>sh:</code> are run on Linux only; lines with no prefix are run on both systems.

<pre class="brush:plain">
environment:
  TEMPDIR: /tmp
  RAKUDO_PKG_URL: https://github.com/nxadm/rakudo-pkg/releases/download/v2018.02.1/rakudo-pkg-Ubuntu14.04_2018.02.1-01_amd64.deb

install:
  # Ubuntu install
  - sh: cd ${TEMPDIR}
  - sh: wget -O rakudo-pkg.deb ${RAKUDO_PKG_URL}
  - sh: sudo dpkg -i rakudo-pkg.deb
  - sh: export PATH=$PATH:~/.perl6/bin:/opt/rakudo-pkg/bin
  - perl6 -v
  # zef and dependencies
  - sh: git clone https://github.com/ugexe/zef.git && cd zef && perl6 -Ilib bin/zef install .
  - sh: cd ${APPVEYOR_BUILD_FOLDER}
  - zef --debug --depsonly install .
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>592</wp:post_id>
  <wp:post_date>2018-03-15 03:07:48</wp:post_date>
  <wp:post_date_gmt>2018-03-15 03:07:48</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>use-pre-built-rakudo-packages-on-appveyor</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="appveyor"><![CDATA[appveyor]]></category>
  <category domain="category" nicename="coding-tools"><![CDATA[Coding Tools]]></category>
  <category domain="post_tag" nicename="continuous-integration"><![CDATA[continuous integration]]></category>
  <category domain="category" nicename="testing"><![CDATA[Testing]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Coercion types in signatures don't work and won't for awhile</title>
  <link>http://www.learningraku.com/2018/03/14/coercion-types-in-signatures-dont-work-and-wont-for-awhile/</link>
  <pubDate>Wed, 14 Mar 2018 09:26:24 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=597</guid>
  <description/>
  <content:encoded><![CDATA[I wanted to make a method that took an integer or a string that looked like an integer. I thought a coercion type would work nicely for that. The <code>Int</code> is the target type and <code>Str</code> is the type it will accept then coerce:

<pre class="brush:plain">
sub something ( Int:D(Str:D) $n ) { ... }

something( 37 );
something( "137" );
something( "Hello" ); # I want this to fail
something( 1.5 );     # I want this to fail too
</pre>

That didn't quite work out. If I pass it a <code>Str</code> it calls <code>.Int</code>. A string like <code>"1.5"</code> converts just fine because the <code>.Int</code> not only changes types but can change the data. We are used to <code>int()</code> as a way to make floating point numbers into whole numbers. So, <code>.Int</code> has two jobs: managing types and managing values. I don't like that and don't think that 3.14 is 3. I <A href="https://stackoverflow.com/q/49262872/2766176">asked about it on StackOverflow</a> and got some interesting answers. Brad Gilbert shows <a href="https://stackoverflow.com/a/49280457/2766176">the long hard way</a> which is close to what I was already doing but there's no need for the coercion type then. I was a little disappointed.

Then I wondered what would happen if a <code>.Int</code> method did not return the right sort of type. I didn't expect this to run without an error (I originally typed "expect this to work"!) but it does. I made an <code>.Int</code> that returned a <code>Str</code>. That's silly but I can imagine myself making stupid error like this and typing should show my stupidity:

<pre class="brush:plain">
class Foo {
    method Int ( --> Str:D ) { 'Hello' }
    }

put try-it( Foo.new );

sub try-it ( Int:D() $n ) { "Got 「$n」 of type 「{$n.^name}」" }
</pre>

Although the subroutine signature demanded an <code>Int</code> it accepted something that claimed to be able to convert but actually didn't. The <code>.Int</code> method is the right thing to call but there was nothing to check that it did the right thing:

<pre class="brush:plain">
Got 「Hello」 of type 「Str」
</pre>

I would have expected the runtime constraint to check the ultimate value against the type and this would have failed. But it doesn't check that the value ends up the correct type. Assigning to a value with a type limitation works though:

<pre class="brush:plain">
class Foo {
	method Int { "Hello" }
	}

my Str $m = Foo.Int;  # works
my Int $n = Foo.Int;  # this fails as expected
</pre>

I filed <a href="https://rt.perl.org/Ticket/Display.html?id=132980">RT 132980</a> which led to some <a href="https://docs.perl6.org/type/Signature#Coercion_Type">clarifications in the documentation</a> but also a note that it's on the back burner for a fix because the proper type check leads to a slowdown (even if you don't use it, I take it). The motto of Rakudo had been <a href="https://docs.perl6.org/language/faq#Is_Perl_6_fast_enough_for_me?">"make it work right then make it work fast"</a>, but sometimes there are other trade-offs that are more important.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>597</wp:post_id>
  <wp:post_date>2018-03-14 09:26:24</wp:post_date>
  <wp:post_date_gmt>2018-03-14 09:26:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>coercion-types-in-signatures-dont-work-and-wont-for-awhile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="avoid-this-feature"><![CDATA[Avoid This Feature]]></category>
  <category domain="category" nicename="signatures"><![CDATA[Signatures]]></category>
  <category domain="category" nicename="subroutines"><![CDATA[Subroutines]]></category>
  <category domain="category" nicename="types"><![CDATA[Types]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1107</wp:comment_id>
    <wp:comment_author><![CDATA[Elizabeth Mattijsen]]></wp:comment_author>
    <wp:comment_author_email>liz@wenzperl.nl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.114.37.61</wp:comment_author_IP>
    <wp:comment_date>2018-03-15 09:02:46</wp:comment_date>
    <wp:comment_date_gmt>2018-03-15 09:02:46</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Perhaps this could be compile-time checked: if the name of a method in a class matches an existing class, we could check if the `.returns` of the Method object actually matches the name of the method (and the class).  And if not, generate a compilation error.  And if there is no explicit `.returns` yet, set it to the class with the name of the  method.

That way we would get an early indication of the developer doing something wrong *and* the normal runtime type-checking.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1108</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.225.53</wp:comment_author_IP>
    <wp:comment_date>2018-03-15 18:11:30</wp:comment_date>
    <wp:comment_date_gmt>2018-03-15 18:11:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think that might work. So far all the types I know start with an uppercase letter, but there may be situations where people accidentally define a method with the same name as a type they are unaware of. That case should as least get a warning. But people are going to make lowercase class names too, which leads to odd order-of-definition issues. 

Ideally coercion methods would know their purpose through a trait or something. That allows the syntax to signal the intent instead of inferring it from a list maintained somewhere else (and potentially not safe from future type additions).

I think some people were recently talking about the difference between <code>.list</code> and <code>.List</code>. I know that's something I've carefully noted in the book.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1107</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Pre-order Learning Perl 6</title>
  <link>http://www.learningraku.com/2018/06/19/pre-order-learning-perl-6/</link>
  <pubDate>Tue, 19 Jun 2018 17:55:49 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=604</guid>
  <description/>
  <content:encoded><![CDATA[You can now <a href="https://goo.gl/KHavUw">pre-order Learning Perl 6 (Amazon US link)</a>. You've been able to do that for awhile but I didn't want to say anything until I knew it was going to be a book. Since I turned in the book to O'Reilly yesterday and it entered production today, I'm pretty sure that's happening now.

One of the curious effects of the publishing world is that all pre-orders count as first week sales. That means that books have months to collect orders that count when they are actually fulfilled. Of course, this means that people game the system to bump their books up in the charts for a bit.

If you were a KickStarter backer you don't need to order the book. I'll collect your details when the books are available and I'll send them to you myself. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>604</wp:post_id>
  <wp:post_date>2018-06-19 17:55:49</wp:post_date>
  <wp:post_date_gmt>2018-06-19 17:55:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pre-order-learning-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Table of contents</title>
  <link>http://www.learningraku.com/2018/08/14/table-of-contents/</link>
  <pubDate>Tue, 14 Aug 2018 21:41:13 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=607</guid>
  <description/>
  <content:encoded><![CDATA[Now that the book is done I have the <a href="/downloads/LearningPerl6_TOC.pdf">table of contents (PDF)</a>. That's quite a feat considering I re-ordered some chapters only a couple of months ago! The end of this post also contains a text version that's slightly outdated since it comes from my original sources before the editors adjusted some things. The content is essentially the same though.

Since I've just finished the last quality control cycle with O'Reilly, I expect that the print version will ship in three weeks (but that's merely a historical expectation, not a promise).

<ul>
<li>Preface
	<ul>
	<li>The Backstory of Perl 6
	<li>What You Should Already Know
	<li>Getting Rakudo
	<li>How to Use This Book
	<li>How to Get Help
	<li>Typographical Conventions
	<li>Code Examples
	<li>Safari® Books Online
	<li>How to Contact Us
	<li>Acknowledgments
	</ul>
<li>Introduction
	<ul>
	<li>Why Perl 6?
	<li>First steps with the REPL
	<li>Reading the Documentation
	<li>Basic Syntax
		<ul>
		<li>	Terms
		<li>	Operators and Expressions
			<ul>
			<li>		Before, after, and around
			<li>		Precedence
			</ul>
		<li>	Statements
		<li>	Blocks
		<li>	Comments
		<li>	Unspace
		<li>	Objects and Classes
		</ul>
	<li>Variables
		<ul>
		<li>	Simple Output
		<li>	Lexical Scope
		<li>	Pre-Defined Variables
		</ul>
	<li>Making and Running a Program
	<li>Summary
	</ul>
<li>number Guessing
	<ul>
	<li>Binding & Assignment
	<li>A MAIN program
		<ul>
		<li>	Program Arguments
		<li>	Prompting for Values
		</ul>
	<li>Literal Numbers
		<ul>
		<li>	Formatting Numbers
		</ul>
	<li>Numeric Operations
	<li>Conditional Execution
		<ul>
		<li>	Boolean Values
		<ul>
			<li>		Shortcircuit operators
			</ul>
		<li>	Comparing Things
		<ul>
			<li>		Chained comparisons
			<li>		Conditionally running a statement
			</ul>
		<li>	Conditional Branching
		</ul>
	<li>Putting It All Together
	<li>Summary
	</ul>
<li>Numbers
	<ul>
	<li>Number Types
	<li>Integers
		<ul>
		<li>	Type Constraints
		<li>	Smart Matching
		</ul>
	<li>Rational Numbers
	<li>Imaginary and Complex Numbers
	<li>Numbers Small and Large
	<li>The Numeric Hierarchy
	<li>Summary
	</ul>
<li>Strings
	<ul>
	<li>Literal Quoting
	<li>Escaped Strings
		<ul>
		<li>	Adverbs for Quoting
		<li>	String Operators and Methods
		<li>	Looking Inside Strings
		<li>	Normal Form Grapheme
		<li>	String Comparisons
		<li>	Prompting for Input
		<li>	Number to String Conversions
		<li>	String to Number Conversions
		</ul>
	<li>Interpolated Strings
	<li>Here Docs
	<li>Shell Strings
		<ul>
		<li>	Shell Safety
		</ul>
	<li>Fancier Quoting
	<li>Summary
	</ul>
<li>Blocks
	<ul>
	<li>Blocks
		<ul>
		<li>	Lexical Scope
		<li>	Control Structures
		<li>	Phasers
		<li>		The while structure
		<li>	Storing Blocks
		<li>	Blocks with Parameters
		<li>		Implicit parameters
		<li>		Explicit signatures
		<li>		Type constraints
		</ul>
	<li>Simple Subroutines
		<ul>
		<li>	Named Subroutines
		</ul>
	<li>Whatever Code
		<ul>
		<li>	Subsets
		</ul>
	<li>Summary
	</ul>
<li>Positionals
	<ul>
	<li>Constructing a List
		<ul>
		<li>	Iterating All the Elements
		<li>		Reading lines of input
		</ul>
	<li>Ranges
		<ul>
		<li>	The @ Coercer
		</ul>
	<li>Sequences
		<ul>
		<li>	Infinte Lazy Lists
		<li>	Gathering Values
		</ul>
	<li>Single Element Access
		<ul>
		<li>	Changing a Single Element
		<li>	Multiple Element Access
		</ul>
	<li>Arrays
		<ul>
		<li>	Constructing an Array
		<li>	Interpolating Arrays
		<li>	Array Operations
		<li>	Lists of Lists
		<li>	Flattening Lists
		<li>	Interesting Sublists
		</ul>
	<li>Combining Lists
		<ul>
		<li>	The Zip Operator, Z
		<li>	The Cross Operator, X
		<li>	The Hyperoperators
		<li>	The Reduction Operator
		</ul>
	<li>Filtering Lists
	<li>Transforming a List
	<li>Sorting Lists
	<li>Sorting on Multiple Comparisons
	<li>Summary
	</ul>
<li>Failures
	<ul>
	<li>Exceptions
		<ul>
		<li>	Catching Exceptions
		<li>	Backtraces
		<li>	Rethrowing Errors
		<li>	Throwing Your Own Exceptions
		<li>	Defining Your Own Exception Types
		</ul>
	<li>Failures
	<li>Warnings
	<li>The Wisdom of Exceptions
	<li>Summary
	</ul>
<li>Files and Directories
	<ul>
	<li>File Paths
		<ul>
		<li>	File Test Operators
		<li>	File Metadata
		<li>		File times
		<li>	Linking and Unlinking Files
		<li>	Renaming and Copying Files
		</ul>
	<li>Manipulating Directories
		<ul>
		<li>	Directory Listings
		<li>	Creating Directories
		<li>	Removing Directories
		</ul>
	<li>Formatted Output
		<ul>
		<li>		Common formatting tasks
		</ul>
	<li>The Standard Filehandles
		<ul>
		<li>	Standard Output
		<li>	Standard Error
		<li>	Standard Input
		</ul>
	<li>Reading Input
		<ul>
		<li>	Reading Lines
		<li>	Reading a File
		</ul>
	<li>Writing Output
		<ul>
		<li>	Opening a File for Writing
		</ul>
	<li>Binary Files
		<ul>
		<li>	Moving Around
		<li>	Writing Binary Files
		</ul>
	<li>Summary
	</ul>
<li>Associatives
	<ul>
	<li>Pairs
		<ul>
		<li>	Adverbs
		<li>	Modifying a Pair
		</ul>
	<li>Map
		<ul>
		<li>	Checking Keys
		<li>	Creating from a Positional
		<li>	Checking Allowed Values
		</ul>
	<li>Hashes
		<ul>
		<li>	Accumulating with a Hash
		</ul>
	<li>Multi-Level Hashes
	<li>Summary
	</ul>
<li>Using Modules
	<ul>
	<li>Installing Modules
	<li>Loading Modules
		<ul>
		<li>	Finding the Module
			<ul>
			<li>		The lib pragma
			<li>		The environment
			<li>		The -I switch
			</ul>
		<li>	Lexical Effect
		<li>	Loading a Module at Runtime
			<li>		Interpolating module names
			</ul>
		</ul>
	<li>Fetching Data from the Web
	<li>Running Perl 5 in Perl 6
	<li>Summary
	</ul>
<li>Subroutines
	<ul>
	<li>A Basic Subroutine
		<ul>
		<li>	Extra Arguments
		<li>	Explicit Returns
		</ul>
	<li>Recursing
		<ul>
		<li>	Iterating Instead of Recursing
		</ul>
	<li>Storing Subroutines in Libraries
		<ul>
		<li>	Exporting Subroutines
		</ul>
	<li>Positional Parameters
		<ul>
		<li>		Slurpy parameters
		<li>		Have it both ways
		<li>		Combining slurpies
		<li>	Optional and Default Arguments
		<li>	Parameter Traits
		<li>	Parameter Constraints
		</ul>
	<li>Same Name, Different Signature
		<ul>
		<li>	Literal Value Parameters
		<li>	Number of Arguments
		<li>	Parameter Types
		</ul>
	<li>Named Parameters
		<ul>
		<li>	Required Named Parameters
		<li>	Named Parameters For Free
		<li>	Mixed Parameters
		</ul>
	<li>Return Types
	<li>Summary
	</ul>
<li>Classes
	<ul>
	<li>Your First Class
	<li>Defining Methods
		<ul>
		<li>	Private Methods
		<li>	Defining Subroutines
		</ul>
	<li>Objects
		<ul>
		<li>	Private Attributes
		<li>	Public Attributes
		</ul>
	<li>Multi Methods
	<li>Inheriting Types
		<ul>
		<li>	Checking inheritance
		<li>	Stub Methods
		</ul>
	<li>Controlling Object Creation
		<ul>
		<li>	Building Objects
		<li>	Tweaking Objects
		</ul>
	<li>Private Classes
	<li>Summary
	</ul>
<li>Roles
	<ul>
	<li>Adding Behavior to Classes
		<ul>
		<li>	Applying Multiple Roles
		</ul>
	<li>Methods in Roles
	<li>De-conflicting Roles
	<li>Anonymous Roles
	<li>Summary
	</ul>
<li>Junctions
	<ul>
	<li>Junctions
		<ul>
		<li>	Any
		<li>	All
		<li>	One
		<li>	None
		<li>	Some Junctive Tricks
		</ul>
	<li>Sets
		<ul>
		<li>	Set Operations
		</ul>
	<li>Summary
	</ul>
<li>Regexes
	<ul>
	<li>The Match Operator
		<ul>
		<li>	Match Operator Syntax
		<li>	Succesful Matches
		<li>	Defining a Pattern
		<li>	Predefined Patterns
		</ul>
	<li>Match Nonliteral Characters
		<ul>
		<li>	Match Any Character
			<ul>
			<li>		Escaping characters
			<li>		Matching literal spaces
			</ul>
		<li>	Matching types of characters
			<ul>
			<li>		Unicode properties
			<li>		Combining properties
			</ul>
		<li>	User-Defined Character Classes
			<ul>
			<li>		Character class ranges
			<li>		Negated character classes
			</ul>
		</ul>
	<li>Match Adverbs
		<ul>
		<li>	Matching Either Case
		<li>	Ignoring Marks
		<li>	Global Matches
		</ul>
	<li>Things That Use Patterns
		<ul>
		<li>	Substitutions
		</ul>
	<li>Summary
	</ul>
<li>Fancier Regexes
	<ul>
	<li>Quantifiers
		<ul>
		<li>	Zero or More
		<li>	Greediness
		<li>	Zero or One
		<li>	Minimal and Maximal
		</ul>
	<li>Controlling Quantifiers
		<ul>
		<li>	Turning Off Backtracking
		</ul>
	<li>Captures
		<ul>
		<li>	Named Captures
		<li>	A Capture Tree
		<li>	Backreferences
		</ul>
	<li>Surrounders and Separators
	<li>Assertions
		<ul>
		<li>	Anchors
		<li>	Conditions
		<li>	Code Assertions
			<ul>
			<li>		Matching an IPv4 address
			</ul>
		</ul>
	<li>Alternations
		<ul>
		<li>	First Match
		<li>	Longest Token Matching
		</ul>
	<li>Summary
	</ul>
<li>Grammars
	<ul>
	<li>A Simple Grammar
	<li>Multiple Rules
	<li>Debugging Grammars
		<ul>
		<li>	Grammar::Tracer
		<li>	Grammar::Debugger
		</ul>
	<li>A Simple Action Class
		<ul>
		<li>	Creating an Abstract Syntax Tree
		</ul>
	<li>Ratcheting
	<li>Parsing JSON
	<li>Parsing CSV
		<ul>
		<li>	Adjusting the Grammar
		<li>	Using Roles in Grammars
		</ul>
	<li>Summary
	</ul>
<li>Supplies
	<ul>
	<li>Supplies
		<ul>
		<li>	Multiple Taps
		<li>	Live Supply
		</ul>
	<li>Channels
	<li>Promises
		<ul>
		<li>	Waiting for Promises
		<li>	Waiting for Multiple Promises
		<li>	Managing Your Own Promises
		<li>	Promise Junctions
		</ul>
	<li>Reactive Programming
		<ul>
		<li>	Reacting in the Background
		</ul>
	<li>Summary
	</ul>
<li>Interprocess
	<ul>
	<li>Quick and Easy
		<ul>
		<li>	Quoted Commands
		<li>	Safer Commands
		<li>	Writing to a Proc
		</ul>
	<li>Procs
	<li>Asynchronous Control
	<li>Summary
	</ul>
<li>Advanced Topics
	<ul>
	<li>One liners
	<li>Declarator Block Comments
	<li>Feed Operators
	<li>Destructuring Signatures
	<li>Defining Your Own Operators
	<li>Perl 5 Patterns
	<li>Shaped Arrays
	<li>Typed Containers
	<li>NativeCall
	<li>The with Topicalizer
	</ul>
<li>Conclusion
<li>Glossary
<li>Exercise Answers
</ul>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>607</wp:post_id>
  <wp:post_date>2018-08-14 21:41:13</wp:post_date>
  <wp:post_date_gmt>2018-08-14 21:41:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>table-of-contents</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The book cover</title>
  <link>http://www.learningraku.com/2018/08/15/the-book-cover/</link>
  <pubDate>Wed, 15 Aug 2018 22:50:12 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=610</guid>
  <description/>
  <content:encoded><![CDATA[The book production is in its final phases. Now that we know how big the book is (a literal measurement), we know how wide the spine is (<a href="https://www.programmingperl.org/2012/03/20-years-of-programming-perl/">note the physical comparisons I did for <i>Programming Perl</i></a>). The page size is already fixed. From there we create cover that wraps the paper. Here it is:

<div class="image center">
<div class="image center">
<a href="/downloads/learning_perl_6_cover.pdf"><img src="/images/learning_perl_6_cover.png" width="500" height="311"/></a>
</div>
</div>

You can <a href="https://goo.gl/KHavUw">pre-order Learning Perl 6 on Amazon (US Link)</a>. ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>610</wp:post_id>
  <wp:post_date>2018-08-15 22:50:12</wp:post_date>
  <wp:post_date_gmt>2018-08-15 22:50:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>the-book-cover</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Update your Kickstarter reward survey</title>
  <link>http://www.learningraku.com/2018/08/21/update-your-kickstarter-reward-survey/</link>
  <pubDate>Tue, 21 Aug 2018 00:19:32 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=614</guid>
  <description/>
  <content:encoded><![CDATA[<a href="https://www.kickstarter.com/projects/1422827986/learning-perl-6/posts/2268162">The book is going to the printers</a> so I'll have the paper book rewards soon. It's been awhile since the Kickstarter backers responded to the survey to supply their shipping address—<a href="https://help.kickstarter.com/hc/en-us/articles/115005126894-How-can-I-view-or-change-my-survey-responses-">log into Kickstarter to change that</a>. Or, you can send me a message through Kickstarter or email (<A href="mailto:brian.d.foy@gmail.com">brian.d.foy@gmail.com</a>).

If you're reward was an ebook, update your email address so I can send it to the right place. The people with the monthly draft rewards will find that in Dropbox or GitHub.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>614</wp:post_id>
  <wp:post_date>2018-08-21 00:19:32</wp:post_date>
  <wp:post_date_gmt>2018-08-21 00:19:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>update-your-kickstarter-reward-survey</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Preview Learning Perl 6 in Google Books</title>
  <link>http://www.learningraku.com/2018/09/03/preview-learning-perl-6-in-google-books/</link>
  <pubDate>Mon, 03 Sep 2018 16:06:39 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=621</guid>
  <description/>
  <content:encoded><![CDATA[Most O'Reilly books have extensive previews on Google Books, and that's true for the <a href="https://books.google.com/books?id=sbRqDwAAQBAJ&lpg=PA1&ots=yy9KUe-W4Y&dq=learning%20perl%206%3A%20keeping%20the%20easy%2C%20hard%2C%20and%20impossible%20within%20reach%20brian%20d.%20foy&pg=PA1#v=onepage&q=learning%20perl%206:%20keeping%20the%20easy,%20hard,%20and%20impossible%20within%20reach%20brian%20d.%20foy&f=false">Learning Perl 6 preview</a> too. You can check out the beginning of the book. If you like it you can buy the rest. Unfortunately the exercise answers are at the end of the book and not shown in the repo.

<div class="image center">
<div>
<a href="https://books.google.com/books?id=sbRqDwAAQBAJ&lpg=PA1&ots=yy9KUe-W4Y&dq=learning%20perl%206%3A%20keeping%20the%20easy%2C%20hard%2C%20and%20impossible%20within%20reach%20brian%20d.%20foy&pg=PA1#v=onepage&q=learning%20perl%206:%20keeping%20the%20easy,%20hard,%20and%20impossible%20within%20reach%20brian%20d.%20foy&f=false"><img src="/images/google_books.png" width="500" height="259"></a>
</div>
</div>

The formatting in Google Books is odd and does not look like the print sources (and we have to suffer through whatever e-readers try to do).

Some of my other works in Google Books:

<ul>
<li><a href="https://books.google.com/books?id=uFc4DQAAQBAJ&lpg=PP1&dq=learning%20perl%2C%207th%20edition&pg=PP1#v=onepage&q=learning%20perl,%207th%20edition&f=false">Learning Perl</a> (<a href="https://www.learning-perl.com/">website</a>)
<li><a href="https://books.google.com/books?id=b59cVHsH52kC&lpg=PP1&dq=intermediate%20perl&pg=PP1#v=onepage&q=intermediate%20perl&f=false">Intermediate Perl</a> (<a href="https://www.intermediateperl.com/">website</a>)
<li><a href="https://books.google.com/books?id=THyeTrOEh7cC&lpg=PP1&dq=programming%20perl%2C%204th%20edition&pg=PP1#v=onepage&q&f=false">Programming Perl</a> (<a href="https://www.programmingperl.org/">website</a>)
<li><a href="https://books.google.com/books?id=7cWMAgAAQBAJ&lpg=PP1&dq=mastering%20perl&pg=PP1#v=onepage&q=mastering%20perl&f=false">Mastering Perl</a> (<a href="https://www.masteringperl.org/">website</a>)
<li><a href="https://books.google.com/books?id=4NR81ru0LG4C&lpg=PP1&dq=effective%20perl%20programming&pg=PP1#v=onepage&q=effective%20perl%20programming&f=false">Effective Perl Programming</a> (<a href="https://www.effectiveperlprogramming.com/">website</a>)
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>621</wp:post_id>
  <wp:post_date>2018-09-03 16:06:39</wp:post_date>
  <wp:post_date_gmt>2018-09-03 16:06:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>preview-learning-perl-6-in-google-books</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <category domain="post_tag" nicename="google-books"><![CDATA[google books]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1120</wp:comment_id>
    <wp:comment_author><![CDATA[Michael Woods]]></wp:comment_author>
    <wp:comment_author_email>scopesoft@yahoo.co.uk</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>160.83.36.132</wp:comment_author_IP>
    <wp:comment_date>2018-09-12 11:56:51</wp:comment_date>
    <wp:comment_date_gmt>2018-09-12 11:56:51</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Amazon have used copies available going for £33. How is this?

A new copy costs £42 but will be dispatched in 1 to 2 months. 

Something not right?

https://www.amazon.co.uk/Learning-Perl-6-Brian-Foy/dp/149197768X/ref=sr_1_1?ie=UTF8&amp;qid=1536753267&amp;sr=8-1&amp;keywords=Learning+Perl+6]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1121</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>158.222.238.57</wp:comment_author_IP>
    <wp:comment_date>2018-10-09 21:55:00</wp:comment_date>
    <wp:comment_date_gmt>2018-10-09 21:55:00</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[The book business is cutthroat and dirty. There are all sorts of tricks that middleman play to take advantage of the inefficiencies.

Wholesalers by books at about 50% of the list price then resell them. That's how Amazon appears to offer such deep discounts. For what it's worth, I get my royalties based on my publishers revenue, not the book seller's revenue. So, my cut is off the wholesale price.

Amazon allows all sorts of sellers to move their goods without any organic infrastructure. If something fell off the back of a truck, someone could sell it on Amazon that night. I don't know if that's what happening, but the world is a cruel place. It's deeply troubling when you first find out about it, but this isn't my first book.

If you buy used books in the US, you may occasionally come by one with a black mark across it's pages or one with a missing cover. These are remainder books that were reported unsold to the publisher. The publisher refunded money to the bookseller (because there are all sorts of perverse incentives to shift risk to the publisher instead of the retailer). If you bought that book, the publisher and the author probably didn't benefit from it. More often, I've bought books that had previously lived in libraries. That doesn't really bother me, but the book cost $0.01 and the person made the money on the shipping and handling (about $4 for less than $2 in postage). If there's a way to make a little money, someone will do it.

I say that you find a company you'd like to support and pay them even if it's more than you'd pay at fly-by-night places. Otherwise your favorite places will disappear (and that's against your interests). That's not because I get more. As I said, my royalty doesn't depend on the retailer's revenue.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1120</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Rakudo Star 2018.10 is in Chocolatey</title>
  <link>http://www.learningraku.com/2018/11/16/rakudo-star-2018-10-is-in-chocolatey/</link>
  <pubDate>Fri, 16 Nov 2018 05:16:43 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=627</guid>
  <description/>
  <content:encoded><![CDATA[Rakudo Star 2018.10 is now in Chocolatey as the <a href="https://chocolatey.org/packages/rakudostar">rakudostar</a> package. There's something to note here: Steve Mynott has he's not going to prepare another Rakudo Star release. That doesn't mean there aren't going to be more releases—just that someone else needs to prepare them.

<div class="image center">
<div>
<img src="/images/chocolatey.png" height="216" width="500" />
</div>
</div>

<!--more-->

You might have expected this since the Rakudo Star releases have been gradually missing their release months and that the last two were backdated. That's not a big deal, but it shows that it's not trivial to put out these releases. The Rakudo compiler has monthly releases.

Maybe you can be the person who makes this easier!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>627</wp:post_id>
  <wp:post_date>2018-11-16 05:16:43</wp:post_date>
  <wp:post_date_gmt>2018-11-16 05:16:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rakudo-star-2018-10-is-in-chocolatey</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="chocolatey"><![CDATA[chocolatey]]></category>
  <category domain="category" nicename="rakudo"><![CDATA[Rakudo]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Taiwanese editions of Learning Perl 6</title>
  <link>http://www.learningraku.com/2019/06/12/taiwanese-editions-of-learning-perl-6/</link>
  <pubDate>Wed, 12 Jun 2019 02:35:16 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningperl6.com/?p=630</guid>
  <description/>
  <content:encoded><![CDATA[Learning Perl 6 has its first translation. I know that the translators worked hard on it because I answered many questions for them. It is on sale now at <a href="https://www.kingstone.com.tw/new/basic/2014713579683">KingStone</a> and <a href="https://www.tenlong.com.tw/products/9789865021382">Ten Long</a> and probably other places.

<div class="image center">
<div>
<img src="/images/taiwan.jpg" width="595" height="700"/>
</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>630</wp:post_id>
  <wp:post_date>2019-06-12 02:35:16</wp:post_date>
  <wp:post_date_gmt>2019-06-12 02:35:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>taiwanese-editions-of-learning-perl-6</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <category domain="post_tag" nicename="commerce"><![CDATA[commerce]]></category>
  <category domain="post_tag" nicename="translation"><![CDATA[translation]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1122</wp:comment_id>
    <wp:comment_author><![CDATA[stanley tam]]></wp:comment_author>
    <wp:comment_author_email>stanley_tam@163.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>218.18.229.179</wp:comment_author_IP>
    <wp:comment_date>2019-09-26 09:14:57</wp:comment_date>
    <wp:comment_date_gmt>2019-09-26 09:14:57</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Still cannot buy it from mainland China yet, is there a schedule ?
BTW, Chinese edition of think perl 6 is available from mainland China few days ago..]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>1123</wp:comment_id>
    <wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
    <wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>23.226.132.228</wp:comment_author_IP>
    <wp:comment_date>2019-12-01 07:09:28</wp:comment_date>
    <wp:comment_date_gmt>2019-12-01 07:09:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I don't control foreign editions. Typically, a publisher in another region buys the rights to the book, translates it, and publishes it. The publisher makes the deal and often takes a one time payment for it.

Find out who does that for your other tech books and encourage them to do that with Learning Perl 6!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1122</wp:comment_parent>
    <wp:comment_user_id>1</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Long Live Raku</title>
  <link>http://www.learningraku.com/2019/12/01/long-live-raku/</link>
  <pubDate>Sun, 01 Dec 2019 08:22:46 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningraku.com/?p=633</guid>
  <description/>
  <content:encoded><![CDATA[In October 2019, <a href="https://news.perlfoundation.org/post/tpf-response-raku-rename">Perl 6 changed its name to Raku</a>. I think it's a good move to let the language stand on its own two feet.

I've updated the older domains for this blog to permanently redirect to the new <i>www.learningraku.com</i>. I'd already changed the Twitter account to <i><a href="https://twitter.com/LearningRaku">@LearningRaku</a></i>. If you run into something that doesn't work, let me know.

I'm also exploring how I can change the name of the printed and e-books. Since the book is created by print-on-demand, that might not be too hard. It could take some time since I'd also take the chance to update the book for current Raku behavior.

Various parts of the Raku community will change their names, labels, and references in the coming weeks as people have time to deal with the huge effort. <A href="https://github.com/Raku/doc/issues/3046">You might even be able to help</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>633</wp:post_id>
  <wp:post_date>2019-12-01 08:22:46</wp:post_date>
  <wp:post_date_gmt>2019-12-01 08:22:46</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>long-live-raku</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Reducing comparison operators</title>
  <link>http://www.learningraku.com/2020/03/17/reducing-comparison-operators/</link>
  <pubDate>Tue, 17 Mar 2020 20:07:10 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningraku.com/?p=638</guid>
  <description/>
  <content:encoded><![CDATA[Brad Gilbert say my Effective Perl post about script runs (a stable feature in v5.32) and <a href="  https://twitter.com/b2gills/status/1239987592197738506">offered this Raku version on Twitter</a>:
<pre class="brush:plain"># Perl 5:  /(*script_run:(\d+))/
/ \d+  &lt;?{ [eq] $/.Str.uniprops('script') }&gt; /
</pre>
Bascially, it matches <code>\d+</code> then immediately uses an assertion that looks that the thing it just matched, <code>$/</code>, has characters with all the same Unicode properties.

He then defines a new <code>regex</code> to wrap it all up:
<pre class="brush:plain">my regex script-run ($r) {
  $r
  &lt;?{ [eq] $/.Str.uniprops('script') }&gt;
}

/ &lt;script-run( /\d+/ )&gt; /
</pre>
That's fine. The Raku grammars are really cool and amazingly flexible and is a language within the language (well, "slang").

The thing I find delightful about this Brad's use of the <a href="https://docs.raku.org/language/operators#Reduction_operators">reduction operator</a>, <code>[...]</code> with a comparison operator. So, I wrote this little program in Raku (<a href="https://repl.it/repls/CreepyGlossyTriangles">in repl.it</a>):
<pre class="brush:plain">my $n = 200.rand.Int;

if [&lt;] 37, $n, 137 {
    say "$n is between 37 and 137";
    }
else {
    say "$n is not between 37 and 137";
    }
</pre>
This works, and had I thought about it I might have expected it to work. Many (not all) of the math operators don't care about the order of operations, so <code>2 + 3 + 5</code> is <code>(2 + 3) + 5</code> is <code>2 + (3 + 5)</code>. Some operations do care, like exponentiation: <code>4**3**2</code> is <code>4**(3**2)</code> and is not <code>(4**3)**2</code>. The reduction operator isn't what you might expect from most examples; it doesn't just run the operation with the first two elements and replace them with a single value. It knows what operations to do first.

But, what's the result of a comparison operator? What does the reduction operator do then?

Raku has <a href="/2017/05/21/dont-use-in-programming/">"chained" comparisons</a>, but what you write is not what Raku is actually doing (like any good higher-level language):
<pre class="wp-block-preformatted">37 &lt; $n &lt; 137
</pre>
which is the same as doing each comparison on its own and logically combining the results:
<pre class="wp-block-preformatted">37 &lt; $n and $n &lt; 137
</pre>
Another way to write this is with the reduction operator:
<pre class="wp-block-preformatted">[&lt;] 37, $n, 137
</pre>
And it all works out. No loops and short.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>638</wp:post_id>
  <wp:post_date>2020-03-17 20:07:10</wp:post_date>
  <wp:post_date_gmt>2020-03-17 20:07:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>reducing-comparison-operators</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="operators"><![CDATA[Operators]]></category>
  <wp:comment>
    <wp:comment_id>1125</wp:comment_id>
    <wp:comment_author><![CDATA[Dabe]]></wp:comment_author>
    <wp:comment_author_email>dabe@dabe.com</wp:comment_author_email>
    <wp:comment_author_url>http://dabe.com</wp:comment_author_url>
    <wp:comment_author_IP>72.66.109.109</wp:comment_author_IP>
    <wp:comment_date>2020-03-25 00:38:20</wp:comment_date>
    <wp:comment_date_gmt>2020-03-25 00:38:20</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[One difference: [&lt;] isn&#039;t lazy / won&#039;t short-circuit:

  #!/usr/bin/env raku
  sub one { say &quot;ONE&quot;; 1 }
  sub ten { say &quot;TEN&quot;; 10 }

  # ONE
  # False
  say so ( one() &lt; 5 and 5 &lt; 3 and 3 &lt; ten() );

  # ONE
  # TEN
  # False
  say so ( [&lt;] one(), 5, 3, ten() );]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>Learning Raku digital cover mock-up</title>
  <link>http://www.learningraku.com/2020/03/19/learning-raku-digital-cover-mock-up/</link>
  <pubDate>Thu, 19 Mar 2020 22:02:00 +0000</pubDate>
  <dc:creator>brian</dc:creator>
  <guid isPermaLink="false">http://www.learningraku.com/?p=642</guid>
  <description/>
  <content:encoded><![CDATA[<i>Learning Perl 6</i> won't be renamed <i>Learning Raku</i> until at soonest the next major release cycle (maybe in a couple of years), although the latest cover for the reprint says "Covers Raku" in the upper right banner. However, if you have a digital version, you might like to replace your digital cover with this one I mocked up and is completely unofficial and unauthorized (<a href="/images/cover-large-raku.png">PNG</a>, <a href="/images/cover-large-raku.pdf">PDF</a>):
<div class="image center">
<div><a href="/images/cover-large-raku.pdf"><img src="/images/cover-large-raku.pdf"></a></div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>642</wp:post_id>
  <wp:post_date>2020-03-19 22:02:00</wp:post_date>
  <wp:post_date_gmt>2020-03-19 22:02:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learning-raku-digital-cover-mock-up</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="administrative-notes"><![CDATA[Administrative notes]]></category>
</item>
  </channel>
</rss>
